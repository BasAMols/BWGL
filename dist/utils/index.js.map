{
  "version": 3,
  "sources": ["../../ts/utils/canvas.ts", "../../ts/game.ts", "../../ts/utils/index.ts"],
  "sourcesContent": ["export class Canvas {\r\n    width: number;\r\n    height: number;\r\n    sprites: any[];\r\n    frame: HTMLCanvasElement;\r\n    ctx: CanvasRenderingContext2D ;\r\n\r\n    public constructor() {\r\n        console.log('t');\r\n        \r\n        this.width        = document.documentElement.clientWidth;\r\n        this.height       = document.documentElement.clientHeight;\r\n        this.sprites        = [];\r\n\r\n        this.frame = document.createElement('canvas');\r\n        this.frame.setAttribute('id', 'Canvas');\r\n        this.frame.setAttribute('width', String(this.width));\r\n        this.frame.setAttribute('height', String(this.height));\r\n        document.body.appendChild(this.frame);\r\n        this.ctx = this.frame.getContext('2d');\r\n        \r\n        // this.frame.addEventListener('click', game.start.bind(this));\r\n\r\n    }\r\n\r\n    // // FUNCTION TO TURN UNRENDERED SPRITES INTO RENDERED SPRITES AT THE APPROPRIATE SIZE\r\n    // // TODO: SEE IF IT IS ACTUALLY RELEVANT AS A SEPERATE CHARACTER DRAWER VS SPRITE DRAWER\r\n    // renderSprite(img) {\r\n\r\n    //     // Create canvas for original size image\r\n    //     var spriteCanvas1 = document.createElement('canvas');\r\n    //     spriteCanvas1.width = img.width;\r\n    //     spriteCanvas1.height = img.height;\r\n    //     var spriteCanvas1CTX = spriteCanvas1.getContext('2d');\r\n\r\n    //     // Place image in canvas\r\n    //     spriteCanvas1CTX.drawImage(img, 0, 0, img.width, img.height);\r\n\r\n    //     // Create canvas for resized image\r\n    //     var spriteCanvas2 = document.createElement('canvas');\r\n    //     spriteCanvas2.setAttribute('id', 'Canvas');\r\n    //     spriteCanvas2.setAttribute('width', img.width * game.characterRenderSize);\r\n    //     spriteCanvas2.setAttribute('height', img.height * game.characterRenderSize);\r\n    //     var spriteCanvas2CTX = spriteCanvas2.getContext('2d');\r\n\r\n    //     for (x = 0; x < spriteCanvas1.width; x++) {\r\n    //         for (y = 0; y < spriteCanvas1.height; y++) {\r\n\r\n    //             var pixelData = spriteCanvas1.getContext('2d').getImageData(x, y, 1, 1).data;\r\n    //             var hex = tools.rgbToHex(pixelData);\r\n                \r\n    //             spriteCanvas2CTX.fillStyle = hex;\r\n    //             spriteCanvas2CTX.fillRect(\r\n    //                 x * game.characterRenderSize,\r\n    //                 y * game.characterRenderSize,\r\n    //                 game.characterRenderSize,\r\n    //                 game.characterRenderSize  \r\n    //             );\r\n\r\n    //         }\r\n    //     }\r\n\r\n    //     var img = new Image();\r\n    //     img.src = spriteCanvas2.toDataURL();\r\n\r\n    //     return img\r\n\r\n    // },\r\n\r\n}", "import { Canvas } from \"./utils/canvas\";\r\nimport { Ticker } from \"./utils/ticker\";\r\n\r\nexport class Game {\r\n    private ticker: Ticker;\r\n    public constructor() {\r\n        console.log('asdasdasd')\r\n        // this.ticker = new Ticker();\r\n        // this.ticker.add(this.tick.bind(this))\r\n        // this.ticker.start();\r\n        \r\n        new Canvas();\r\n    }\r\n\r\n    private tick() {\r\n        // console.log('t');\r\n    }\r\n}\r\n\r\n\r\n", "import { Game } from \"../game\";\r\n\r\nconsole.log('asd')\r\nnew Game();"],
  "mappings": ";AAAO,IAAM,SAAN,MAAa;AAAA,EAOT,cAAc;AACjB,YAAQ,IAAI,GAAG;AAEf,SAAK,QAAe,SAAS,gBAAgB;AAC7C,SAAK,SAAe,SAAS,gBAAgB;AAC7C,SAAK,UAAiB,CAAC;AAEvB,SAAK,QAAQ,SAAS,cAAc,QAAQ;AAC5C,SAAK,MAAM,aAAa,MAAM,QAAQ;AACtC,SAAK,MAAM,aAAa,SAAS,OAAO,KAAK,KAAK,CAAC;AACnD,SAAK,MAAM,aAAa,UAAU,OAAO,KAAK,MAAM,CAAC;AACrD,aAAS,KAAK,YAAY,KAAK,KAAK;AACpC,SAAK,MAAM,KAAK,MAAM,WAAW,IAAI;AAAA,EAIzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8CJ;;;AClEO,IAAM,OAAN,MAAW;AAAA,EAEP,cAAc;AACjB,YAAQ,IAAI,WAAW;AAKvB,QAAI,OAAO;AAAA,EACf;AAAA,EAEQ,OAAO;AAAA,EAEf;AACJ;;;ACfA,QAAQ,IAAI,KAAK;AACjB,IAAI,KAAK;",
  "names": []
}
