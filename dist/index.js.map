{
  "version": 3,
  "sources": ["../ts/utils/element.ts", "../ts/utils/vector2.ts", "../ts/dom/domElement.ts", "../ts/canvas/canvasElement.ts", "../ts/canvas/canvasWrapper.ts", "../ts/canvas/canvasColor.ts", "../ts/canvas/canvasSquare.ts", "../ts/utils/renderer.ts", "../ts/dom/domText.ts", "../ts/utils/debug/fps.ts", "../ts/dom/domButton.ts", "../ts/utils/mode.ts", "../ts/canvas/canvasBackground.ts", "../ts/utils/level.ts", "../ts/canvas/canvasCircle.ts", "../ts/modes/swapper/character/parts/eye.ts", "../ts/modes/swapper/character/parts/tail.ts", "../ts/modes/swapper/character/snake.ts", "../ts/utils/controller.ts", "../ts/controllers/bounce.ts", "../ts/modes/swapper/levels/bouncingSnake.ts", "../ts/canvas/canvasRadialGradientBackground.ts", "../ts/controllers/random.ts", "../ts/modes/swapper/levels/discoSnake.ts", "../ts/modes/swapper/levels/empty.ts", "../ts/controllers/followMouse.ts", "../ts/modes/swapper/levels/followMouse.ts", "../ts/modes/swapper/snakeMode.ts", "../ts/utils/ticker.ts", "../ts/utils/event.ts", "../ts/utils/input.ts", "../ts/canvas/canvasImage.ts", "../ts/canvas/prepImage.ts", "../ts/canvas/canvasGrid.ts", "../ts/modes/topdown/overworld.ts", "../ts/modes/topdown/topdown.ts", "../ts/game.ts", "../ts/index.ts"],
  "sourcesContent": ["import { Event } from \"./event\";\r\nimport { Vector2 } from './vector2';\r\n\r\nexport interface ElementAttributes {\r\n    position?: Vector2,\r\n}\r\n\r\nexport abstract class Element {\r\n    private events: Event<unknown>[] = [];\r\n    \r\n    constructor(attr: ElementAttributes = {}) {\r\n        \r\n    }\r\n\r\n    addEvent(e: Event<unknown>) {\r\n        this.events.push(e);\r\n    }\r\n\r\n    getEvent(id: string) {\r\n        return this.events.find((e)=>id === e.id)\r\n    }\r\n}\r\n", "export class Vector2 {\r\n\tx: number;\r\n\ty: number;\r\n\tstatic Vector2: {};\r\n\tconstructor(x: number, y: number) {\r\n\t\tthis.x = (x === undefined) ? 0 : x;\r\n\t\tthis.y = (y === undefined) ? 0 : y;\r\n\t}\r\n\r\n\tclone(): Vector2 {\r\n\t\treturn new Vector2(this.x, this.y);\r\n\t}\r\n\r\n\tadd(vector: Vector2) {\r\n\t\treturn new Vector2(this.x + vector.x, this.y + vector.y);\r\n\t}\r\n\r\n\tmultiply(vector: Vector2) {\r\n\t\treturn new Vector2(this.x * vector.x, this.y * vector.y);\r\n\t}\r\n\r\n\tsubtract(vector: Vector2) {\r\n\t\treturn new Vector2(this.x - vector.x, this.y - vector.y);\r\n\t}\r\n\r\n\tscale(scalar: number) {\r\n\t\treturn new Vector2(this.x * scalar, this.y * scalar);\r\n\t}\r\n\r\n\tdot(vector: Vector2) {\r\n\t\treturn (this.x * vector.x + this.y + vector.y);\r\n\t}\r\n\r\n\tmoveTowards(vector: Vector2, t: number) {\r\n\t\tt = Math.min(t, 1); // still allow negative t\r\n\t\tvar diff = vector.subtract(this);\r\n\t\treturn this.add(diff.scale(t));\r\n\t}\r\n\r\n\tmagnitude() {\r\n\t\treturn Math.sqrt(this.magnitudeSqr());\r\n\t}\r\n\r\n\tmagnitudeSqr() {\r\n\t\treturn (this.x * this.x + this.y * this.y);\r\n\t}\r\n\r\n\tdistance(vector: Vector2) {\r\n\t\treturn Math.sqrt(this.distanceSqr(vector));\r\n\t}\r\n\r\n\tdistanceSqr(vector: Vector2) {\r\n\t\tvar deltaX = this.x - vector.x;\r\n\t\tvar deltaY = this.y - vector.y;\r\n\t\treturn (deltaX * deltaX + deltaY * deltaY);\r\n\t}\r\n\r\n\tnormalize() {\r\n\t\tvar mag = this.magnitude();\r\n\t\tvar vector = this.clone();\r\n\t\tif (Math.abs(mag) < 1e-9) {\r\n\t\t\tvector.x = 0;\r\n\t\t\tvector.y = 0;\r\n\t\t} else {\r\n\t\t\tvector.x /= mag;\r\n\t\t\tvector.y /= mag;\r\n\t\t}\r\n\t\treturn vector;\r\n\t}\r\n\r\n\tangle() {\r\n\t\treturn Math.atan2(this.y, this.x);\r\n\t}\r\n\r\n\trotate(rad: number) {\r\n\t\tvar cos = Math.cos(rad);\r\n\t\tvar sin = Math.sin(rad);\r\n\t\treturn new Vector2(\r\n\t\t\tthis.x * cos - this.y * sin,\r\n\t\t\tthis.x * sin + this.y * cos\r\n\t\t);\r\n\t}\r\n\r\n\ttoPrecision(precision: number) {\r\n\t\tvar vector = this.clone();\r\n\t\tvector.x = +vector.x.toFixed(precision);\r\n\t\tvector.y = +vector.y.toFixed(precision);\r\n\t\treturn vector;\r\n\t}\r\n\r\n\ttoString() {\r\n\t\tvar vector = this.toPrecision(1);\r\n\t\treturn (\"[\" + vector.x + \"; \" + vector.y + \"]\");\r\n\t}\r\n\r\n\tstatic get zero() {\r\n\t\treturn new Vector2(0, 0);\r\n\t}\r\n\tstatic get down() {\r\n\t\treturn new Vector2(0, 1);\r\n\t}\r\n\tstatic get up() {\r\n\t\treturn new Vector2(0, -1);\r\n\t}\r\n\tstatic get right() {\r\n\t\treturn new Vector2(1, 0);\r\n\t}\r\n\tstatic get left() {\r\n\t\treturn new Vector2(-1, 0);\r\n\t}\r\n\tstatic get fromDegree() {\r\n\t\treturn new Vector2(0, 0);\r\n\t}\r\n}\r\n", "import { Element, ElementAttributes } from \"../utils/element\";\r\nimport { Vector2 } from \"../utils/vector2\";\r\n\r\nexport type DomElementAttributes = ElementAttributes &  {\r\n    id?: string,\r\n    size?: Vector2,\r\n    background?: string,\r\n    position?: Vector2\r\n}\r\nexport class DomElement<T extends keyof HTMLElementTagNameMap> extends Element {\r\n    public dom: HTMLElementTagNameMap[T];\r\n\r\n    private _position: Vector2; \r\n\r\n    private _visible: boolean = true;\r\n    public get visible(): boolean {\r\n        return this._visible;\r\n    }\r\n    public set visible(value: boolean) {\r\n        this.dom.style.display = value ? 'block' : 'none';\r\n        this._visible = value;\r\n    }\r\n\r\n    public get position(): Vector2 {\r\n        return this._position;\r\n    }\r\n\r\n    public set position(value: Vector2) {\r\n        if (value && this.dom){\r\n            this.dom.style.left = value.x + 'px';\r\n            this.dom.style.top = value.y + 'px';\r\n        }\r\n    }\r\n\r\n    public get id() { return this.dom.id }\r\n    public set id(value: string) {\r\n        if (value){\r\n            this.dom.id = value;\r\n        }\r\n    }\r\n\r\n    public get size() {\r\n        return new Vector2(this.width,this.height)\r\n    }\r\n    public set size(value: Vector2) {\r\n        if (value) {\r\n            this.width = value.x;\r\n            this.height = value.y;\r\n        }\r\n    };\r\n\r\n    public set background (v: string) {\r\n        this.dom.style.background = v; \r\n    }\r\n\r\n    public get width(){return this.dom.clientWidth}\r\n    public set width(value: number) {\r\n        this.dom.style.width = `${value}px`\r\n        this.dom.setAttribute('width', String(value));\r\n    }\r\n\r\n    public get height(){return this.dom.clientHeight}\r\n    public set height(value: number) {\r\n        this.dom.style.height = `${value}px`\r\n        this.dom.setAttribute('height', String(value));\r\n    }\r\n\r\n    constructor(type: T, attr: DomElementAttributes = {}) {\r\n        super(attr);\r\n        this.dom = document.createElement(type)\r\n        this.dom.style.position = 'absolute';\r\n        this.id = attr.id || '';\r\n        this.size = attr.size;\r\n        this.background = attr.background || '';\r\n        this.position = attr.position || Vector2.zero;\r\n    }\r\n\r\n    public appendChild(e: DomElement<any>) {\r\n        this.dom.appendChild(e.dom)\r\n        this.dom.addEventListener\r\n    }\r\n\r\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLAnchorElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void {\r\n        this.dom.addEventListener(type, listener, options)\r\n    };\r\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLAnchorElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\r\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void {\r\n        this.dom.removeEventListener(type, listener, options)\r\n    };\r\n\r\n    \r\n\r\n}\r\n", "import { DomElement } from '../dom/domElement';\r\nimport { Game } from '../game';\r\nimport { CanvasController } from '../utils/controller';\r\nimport { Element, ElementAttributes } from \"../utils/element\";\r\nimport { Level } from '../utils/level';\r\nimport { Mode } from '../utils/mode';\r\nimport { TickerReturnData } from '../utils/ticker';\r\nimport { Vector2 } from \"../utils/vector2\";\r\n\r\nexport type CanvasElementAttributes = ElementAttributes & {\r\n    hasDom?: boolean,\r\n    position?: Vector2,\r\n    controllers?: CanvasController[]\r\n}\r\nexport interface CanvasElement {\r\n    tick?(obj: TickerReturnData): void\r\n    build?(): void\r\n    mouseMove?(e: MouseEvent): void\r\n    keyDown?(e: KeyboardEvent): void\r\n    keyUp?(e: KeyboardEvent): void\r\n}\r\nexport type CanvasElementType = 'color'|'image'|'wrapper'|'logic';\r\nexport abstract class CanvasElement extends Element {\r\n    public abstract type: CanvasElementType;\r\n    public parent!: CanvasElement;\r\n    public game!: Game;\r\n    public mode!: Mode;\r\n    public level!: Level;\r\n    public dom!: DomElement<any>;\r\n\r\n    public absolute: boolean = true; \r\n    private lastPosition: Vector2  = Vector2.zero; \r\n    public movedAmount: Vector2 = Vector2.zero; \r\n    public position: Vector2  = Vector2.zero; \r\n    public active: boolean = true;\r\n    public visible: boolean = true;\r\n    public lowerChildren: CanvasElement[] = [];\r\n    public higherChildren: CanvasElement[] = [];\r\n    public controllers: CanvasController[] = [];\r\n    constructor(attr: CanvasElementAttributes = {}) {\r\n        super(attr);\r\n        this.position = attr.position || Vector2.zero;\r\n        this.addControllers(attr.controllers || []);\r\n        if (attr.hasDom){\r\n            this.dom = new DomElement('div')\r\n        }\r\n    }\r\n\r\n    public addChild(child: CanvasElement, above: boolean = false){\r\n        if (child.parent === undefined){\r\n            child.parent ??= this;\r\n            child.game ??= this.game;\r\n            child.mode ??= this.mode;\r\n            child.level ??= this.level;\r\n\r\n            this[above?'higherChildren':'lowerChildren'].push(child);\r\n\r\n            if (child.dom){\r\n                this.dom.appendChild(child.dom);\r\n            }\r\n\r\n            if (child.build){\r\n                child.build()\r\n            }\r\n\r\n            child.registerControllers(child);\r\n\r\n        } else {\r\n            console.log('The element is already a parent of another element.');\r\n        }\r\n    }\r\n\r\n    public addControllers(c: CanvasController[]){\r\n        this.controllers.push(...c);\r\n    }\r\n\r\n    public registerControllers(child: CanvasElement) {\r\n        child.controllers.forEach((controller) => {\r\n            if (controller.parent === undefined){\r\n                controller.parent ??= child;\r\n                controller.game ??= child.game;\r\n                controller.mode ??= child.mode;\r\n                controller.level ??= child.level;\r\n            }\r\n        });\r\n    }\r\n    \r\n    public tick?(obj: TickerReturnData) {\r\n        if (this.active){\r\n            this.movedAmount = this.lastPosition.subtract(this.position);\r\n            this.lastPosition = this.position;\r\n            this.controllers.forEach((c) => c.tick(obj) );\r\n            this.lowerChildren.forEach((c) => c.tick(obj) );\r\n            this.higherChildren.forEach((c) => c.tick(obj) );\r\n        }\r\n    }\r\n\r\n    public abstract render(c: CanvasRenderingContext2D ): void\r\n}\r\n\r\n\r\n", "import { CanvasElement, CanvasElementAttributes } from './canvasElement';\r\n\r\nexport type CanvasWrapperAttributes = CanvasElementAttributes & {\r\n}\r\nexport abstract class CanvasWrapper extends CanvasElement {\r\n    public readonly type = 'wrapper';\r\n\r\n    constructor(attr: CanvasWrapperAttributes = {}) {\r\n        super(attr);\r\n    }\r\n\r\n    public render(c: CanvasRenderingContext2D): void {\r\n        // void\r\n    }\r\n}\r\n", "import { Vector2 } from '../utils/vector2';\r\nimport { CanvasElement, CanvasElementAttributes } from './canvasElement';\r\n\r\nexport type LinearGradient = {\r\n    angle: number,\r\n    stops: [number,string][]\r\n}\r\nexport type RadialGradient = {\r\n    stops: [number,string][],\r\n    offset?: Vector2,\r\n}\r\nexport type ColorType = 'color'|'linearGradient'|'radialGradient';\r\nexport type CanvasColorAttributes = CanvasElementAttributes & {\r\n    color?: string,\r\n    stroke?: string,\r\n    strokeWidth?: number,\r\n    linearGradient?: LinearGradient,\r\n    radialGradient?: RadialGradient,\r\n}\r\nexport abstract class CanvasColor extends CanvasElement {\r\n    public abstract shape: 'circle'|'square';\r\n    public type = 'color' as const;\r\n    public colorType: ColorType = 'color';\r\n    public color: string;\r\n    public linearGradient: LinearGradient;\r\n    public radialGradient: RadialGradient;\r\n    public stroke: string;\r\n    public strokeWidth: number = 0;\r\n\r\n    constructor(attr: CanvasColorAttributes = {}) {\r\n        super(attr);\r\n        this.color = attr.color\r\n        this.stroke = attr.stroke\r\n        this.strokeWidth = attr.strokeWidth | 0\r\n        this.linearGradient = attr.linearGradient\r\n        this.radialGradient = attr.radialGradient\r\n    }\r\n\r\n    public getColor(): string | CanvasGradient | CanvasPattern {\r\n        if (this.colorType === 'color'){\r\n            return this.color\r\n        }\r\n        if (this.colorType === 'linearGradient'){\r\n            return this.getLiniarGradient();\r\n        }\r\n        if (this.colorType === 'radialGradient'){\r\n            return this.getRadialGradient();\r\n        }\r\n    }\r\n    public abstract getLiniarGradient(): CanvasGradient | ''\r\n    public abstract getRadialGradient(): CanvasGradient | ''\r\n}\r\n", "import { Vector2 } from '../utils/vector2';\r\nimport { CanvasColor, CanvasColorAttributes } from './canvasColor';\r\n\r\nexport type CanvasSquareAttributes = CanvasColorAttributes & {\r\n    size?: Vector2,\r\n};\r\nexport class CanvasSquare extends CanvasColor {\r\n    public shape = 'square' as const;\r\n\r\n    private _size: Vector2;\r\n    public get size() {\r\n        return this._size;\r\n    }\r\n    public set size(value: Vector2) {\r\n        if (value) {\r\n            this._size = value;\r\n        }\r\n    };\r\n\r\n    public get width() { return this._size.x; }\r\n    public set width(value: number) {\r\n        this._size.x = value;\r\n    }\r\n\r\n    public get height() { return this._size.y; }\r\n    public set height(value: number) {\r\n        this._size.y = value;\r\n    }\r\n\r\n    constructor(attr: CanvasSquareAttributes = {}) {\r\n        super(attr);\r\n        this.color = attr.color;\r\n        this.size = attr.size;\r\n    }\r\n\r\n    public render(ctx: CanvasRenderingContext2D): void {\r\n        ctx.fillStyle = this.getColor();\r\n        ctx.fillRect(this.position.x, this.position.y, this.size.x, this.size.y);\r\n    }\r\n\r\n    public getLiniarGradient(): CanvasGradient | '' {\r\n        if (this.linearGradient) {\r\n            const grd = this.game.renderer.ctx.createLinearGradient(this.position.x, this.position.y, this.position.x + this.width, this.position.y + this.height);\r\n            \r\n            this.linearGradient.stops.forEach(([number,color])=>{\r\n                grd.addColorStop(number, color);\r\n            })\r\n            \r\n            return grd;\r\n        } \r\n        return \"\"\r\n    }\r\n    public getRadialGradient(): CanvasGradient | '' {\r\n        if (this.radialGradient) {\r\n            const grd = this.game.renderer.ctx.createRadialGradient(\r\n                this.position.x + this.width /2,\r\n                this.position.y + this.height /2,\r\n                0,\r\n                this.position.x + this.width /2,\r\n                this.position.y + this.height /2,\r\n                this.width\r\n            );            \r\n            this.radialGradient.stops.forEach(([number,color])=>{\r\n                grd.addColorStop(number, color);\r\n            })\r\n            return grd;\r\n        } \r\n        return \"\"\r\n    }\r\n}\r\n", "import { CanvasElement } from '../canvas/canvasElement';\r\nimport { CanvasWrapper } from '../canvas/canvasWrapper';\r\nimport { TickerReturnData } from './ticker';\r\nimport { DomElement } from '../dom/domElement';\r\nimport { Vector2 } from './vector2';\r\nimport { CanvasSquare } from '../canvas/canvasSquare';\r\n\r\nexport class Renderer extends CanvasWrapper {\r\n    public ctx: CanvasRenderingContext2D;\r\n    public canvas: DomElement<'canvas'>;\r\n    public hasDom = true;\r\n    blockRight: CanvasSquare;\r\n    public constructor() {\r\n        super({ hasDom: true });\r\n    }\r\n\r\n    build() {\r\n\r\n        this.canvas = new DomElement('canvas');\r\n        this.canvas.dom.tabIndex = 1;\r\n        this.blockRight = new CanvasSquare({\r\n                position: new Vector2(0, 0),\r\n                size: new Vector2(20, 20),\r\n                color: 'black'\r\n            });\r\n            this.addChild(this.blockRight, true);\r\n\r\n        this.game.getEvent('resize').subscribe(String(Math.random()), (size: Vector2) => {\r\n            this.canvas.size = size;\r\n        });\r\n        this.game.resize();\r\n\r\n        this.ctx = this.canvas.dom.getContext('2d');\r\n        this.dom.appendChild(this.canvas);\r\n    }\r\n\r\n    public tick(obj: TickerReturnData) {\r\n        super.tick(obj);\r\n        this.recursive(this);\r\n    }\r\n\r\n    private recursive(element: CanvasElement) {\r\n        if (element.active && element.visible) {\r\n            element.lowerChildren.forEach((child) => this.recursive(child));\r\n            this.renderAll(element);\r\n            element.higherChildren.forEach((child) => this.recursive(child));\r\n        }\r\n    }\r\n\r\n    public renderAll(c: CanvasElement) {\r\n        const activeLevel = Object.values(Object.values(this.game.modes).find((mode) => mode.active)?.levels).find((level) => level.active);\r\n        if (activeLevel.width < this.canvas.width) {\r\n            this.blockRight.visible = true\r\n            this.blockRight.position = new Vector2(activeLevel.width, 0);\r\n            this.blockRight.size = new Vector2(this.canvas.width - activeLevel.width, this.canvas.height);\r\n        } else {\r\n            this.blockRight.visible = false\r\n        }\r\n\r\n        c.render(this.ctx);\r\n    }\r\n}", "import { DomElement, DomElementAttributes } from \"./domElement\";\r\n\r\nexport type  DomTextAttributes = DomElementAttributes & {\r\n    text?: string,\r\n    color?: string,\r\n    fontSize?: number,\r\n    fontWeight?: number,\r\n    fontFamily?: string,\r\n    padding?: [number,number,number,number],\r\n}\r\nexport class DomText extends DomElement<'div'> {\r\n    set color (v: string) {\r\n        this.dom.style.color = v; \r\n    }\r\n    set fontSize (v: number) {\r\n        this.dom.style.fontSize = String(v)+'px'; \r\n    }\r\n    set fontWeight (v: number) {\r\n        this.dom.style.fontWeight = String(v); \r\n    }\r\n    set fontFamily (v: string) {\r\n        this.dom.style.fontFamily = v; \r\n    }\r\n    public get text() {\r\n        return this.dom.innerHTML;\r\n    }\r\n    public set text (v: string) {\r\n        this.dom.innerHTML = v?v:''; \r\n    }\r\n    public set padding (v: [number,number,number,number]) {\r\n        this.dom.style.padding = v.join('px ')+'px'; \r\n    }\r\n    public constructor(attr: DomTextAttributes = {}) {\r\n        super('div', attr);\r\n        this.color = attr.color;\r\n        this.text = attr.text;\r\n        this.fontSize = attr.fontSize;\r\n        this.fontWeight = attr.fontWeight;\r\n        this.fontFamily = attr.fontFamily;\r\n        this.padding = attr.padding || [0,0,0,0];\r\n\r\n        this.dom.style.pointerEvents = 'none';\r\n        this.dom.style.userSelect = 'none';\r\n\r\n    }\r\n}", "import { DomText } from \"../../dom/domText\";\r\nimport { TickerReturnData } from '../ticker';\r\nimport { Vector2 } from '../vector2';\r\n\r\nexport class FPS extends DomText {\r\n    private fCount: number = 0;\r\n    private tCount: number = 0;\r\n    public constructor( ) {\r\n        super({\r\n            text: FPS.getString(0),\r\n            fontSize: 35,\r\n            fontWeight: 900,\r\n            color: 'white',\r\n            position: new Vector2(5,5), \r\n            size: new Vector2(100, 50),\r\n            background: '#ff0000aa',\r\n            fontFamily: 'monospace',\r\n            padding: [0,10,0,10]\r\n        });\r\n    }\r\n\r\n    public tick({interval}: TickerReturnData){\r\n        this.fCount++;\r\n        this.tCount+=interval;\r\n        if (this.tCount > 1000){\r\n            this.text = FPS.getString(this.fCount);\r\n            this.fCount = 0;\r\n            this.tCount = 0;\r\n        }\r\n    }\r\n\r\n    public static getString(v: number){\r\n        return `${String(v)}<sub style=\"font-size:25px; top: -7px; position: relative\">FPS</sub>`\r\n    }\r\n}", "\r\n\r\nimport { DomText, DomTextAttributes } from './domText';\r\n\r\nexport type  DomButtonAttributes = DomTextAttributes & {\r\n    onClick: ()=>void\r\n}\r\nexport class DomButton extends DomText {\r\n    public onClick: ()=>void;\r\n    public constructor(attr: DomButtonAttributes) {\r\n        super(attr);        \r\n        this.onClick = attr.onClick;\r\n        this.dom.style.pointerEvents = 'auto';\r\n        this.dom.style.cursor = 'pointer';\r\n        this.dom.onclick = this.onClick;\r\n    }\r\n}", "import { CanvasWrapper, CanvasWrapperAttributes } from '../canvas/canvasWrapper';\r\nimport { Level } from './level';\r\n\r\nexport type modeAttributes = CanvasWrapperAttributes & {\r\n\r\n}\r\nexport abstract class Mode extends CanvasWrapper {\r\n    public levels: Record<string, Level> = {};\r\n\r\n    private keyAliases = {\r\n        'w': 'up',\r\n        'a': 'left',\r\n        's': 'down',\r\n        'd': 'right',\r\n        'ArrowUp': 'up',\r\n        'ArrowLeft': 'left',\r\n        'ArrowDown': 'down',\r\n        'ArrowRight': 'right',\r\n    } as const\r\n\r\n    public input: {\r\n        'up': boolean,\r\n        'left': boolean,\r\n        'down': boolean,\r\n        'right': boolean,\r\n    } = {\r\n        'up': false,\r\n        'left': false,\r\n        'down': false,\r\n        'right': false,\r\n    }\r\n\r\n    constructor(attr: modeAttributes = {}) {\r\n        super(attr);\r\n        this.mode = this;\r\n    }\r\n\r\n    protected addLevel(s: string, level: Level) {\r\n        this.levels[s] = level;\r\n        this.addChild(level);\r\n    }\r\n\r\n    public switchLevel(s:string){\r\n        Object.entries(this.levels).forEach(([key, level])=>{\r\n            level.active = key === s;\r\n            level.visible = key === s;\r\n            level.dom?level.dom.visible = key === s: null;\r\n        });\r\n    }\r\n\r\n    public keyDown(e: KeyboardEvent) {\r\n        if (Object.keys(this.keyAliases).includes(e.key)){\r\n            this.input[this.keyAliases[e.key as keyof typeof this.keyAliases]] = true;\r\n        }\r\n    }\r\n    \r\n    public keyUp(e: KeyboardEvent) {\r\n        if (Object.keys(this.keyAliases).includes(e.key)){\r\n            this.input[this.keyAliases[e.key as keyof typeof this.keyAliases]] = false;\r\n        }\r\n    }\r\n}\r\n", "import { Vector2 } from '../utils/vector2';\r\nimport { CanvasSquare } from './canvasSquare';\r\n\r\nexport class CanvasColorBackground extends CanvasSquare {\r\n    constructor(color: string) {\r\n        super({\r\n            position: Vector2.zero,\r\n            color,\r\n        });\r\n    }\r\n\r\n    build() {\r\n        this.game.getEvent('resize').subscribe(String(Math.random()), (size: Vector2)=>{\r\n            this.size = this.level.size\r\n        });\r\n    }\r\n}\r\n\r\n\r\n", "import { CanvasSquare } from '../canvas/canvasSquare';\r\nimport { CanvasWrapper, CanvasWrapperAttributes } from '../canvas/canvasWrapper';\r\nimport { Vector2 } from \"./vector2\";\r\n\r\nexport type levelAttributes =  CanvasWrapperAttributes & {\r\n\r\n}\r\nexport abstract class Level extends CanvasWrapper{\r\n    abstract start: Vector2;\r\n    abstract background: CanvasSquare;\r\n    abstract height: number;\r\n    abstract width: number;\r\n\r\n    public get size(): Vector2 {\r\n        return new Vector2(this.width, this.height);\r\n    }\r\n    public set size(value: Vector2) {\r\n        this.width = value.x;\r\n        this.height = value.y;\r\n    }\r\n    public ready = false;\r\n\r\n    constructor(attr: levelAttributes = {}) {\r\n        super(attr);\r\n        this.level = this;\r\n    }\r\n}\r\n", "import { Vector2 } from '../utils/vector2';\r\nimport { CanvasColor, CanvasColorAttributes } from './canvasColor';\r\n\r\nexport type CanvasCircleAttributes = CanvasColorAttributes & {\r\n    radius: number,\r\n    radiusY?: number,\r\n    center?: boolean;\r\n    angle?: number;\r\n};\r\nexport class CanvasCircle extends CanvasColor {\r\n\r\n    public readonly shape = 'circle';\r\n\r\n    public radius: number;\r\n    public radiusY: number;\r\n    public angle: number;\r\n\r\n    public center: boolean;\r\n\r\n    constructor(attr: CanvasCircleAttributes) {\r\n        super(attr);\r\n        this.radius = attr.radius;\r\n        this.radiusY = attr.radiusY || attr.radius;\r\n        this.center = attr.center;\r\n        this.angle = attr.angle || 0;\r\n    }\r\n\r\n    public render(ctx: CanvasRenderingContext2D): void {\r\n        ctx.fillStyle = this.getColor();\r\n        ctx.beginPath();\r\n        \r\n        ctx.ellipse(this.position.x, this.position.y, this.radius, this.radiusY,this.angle, 0, 2 * Math.PI, false);\r\n        ctx.fill();\r\n        if (this.strokeWidth) {\r\n            ctx.lineWidth = this.strokeWidth;\r\n            ctx.strokeStyle = this.stroke || 'black';\r\n            ctx.stroke();\r\n        }\r\n        ctx.closePath();\r\n    }\r\n\r\n    public getLiniarGradient(): CanvasGradient | '' {\r\n        if (this.linearGradient) {\r\n            const grd = this.game.renderer.ctx.createLinearGradient(this.position.x - this.radius, this.position.y - this.radiusY, this.position.x + this.radius, this.position.y + this.radiusY);\r\n            this.linearGradient.stops.forEach(([number,color])=>{\r\n                grd.addColorStop(number, color);\r\n            })\r\n            return grd;\r\n        }\r\n        return '';\r\n    }\r\n    public getRadialGradient(): CanvasGradient | '' {\r\n        if (this.radialGradient) {\r\n            if (!this.radialGradient.offset){\r\n                this.radialGradient.offset = Vector2.zero\r\n            }\r\n            const grd = this.game.renderer.ctx.createRadialGradient(\r\n                this.position.x+ this.radialGradient.offset.x,\r\n                this.position.y + this.radialGradient.offset.y,\r\n                0,\r\n                this.position.x ,\r\n                this.position.y,\r\n                Math.max(this.radius, this.radiusY)\r\n            );\r\n            this.radialGradient.stops.forEach(([number,color])=>{\r\n                grd.addColorStop(number, color);\r\n            })\r\n            return grd;\r\n        }\r\n        return '';\r\n    }\r\n}\r\n", "\r\nimport { CanvasCircle } from '../../../../canvas/canvasCircle';\r\nimport { CanvasElipse } from '../../../../canvas/canvasElipse';\r\nimport { TickerReturnData } from '../../../../utils/ticker';\r\nimport { Vector2 } from '../../../../utils/vector2';\r\n\r\nexport class Eye extends CanvasCircle {\r\n    public readonly colorType = 'radialGradient';\r\n    public offset: Vector2;\r\n\r\n    constructor(offset: Vector2, size: number = 65) {\r\n        super({\r\n            radialGradient: {\r\n                stops: [[0, '#555555'], [0.5, 'black'], [0.5, 'white'], [1, 'grey'],],\r\n            },\r\n            // strokeWidth: 5,\r\n            radius: size, \r\n            radiusY: size*1.1, \r\n            stroke: 'black', \r\n        });\r\n        this.offset = offset\r\n    }\r\n    tick(obj: TickerReturnData){\r\n        super.tick(obj);\r\n        this.radialGradient.offset = new Vector2(\r\n            -this.radius*Math.max(Math.min((this.movedAmount.x / obj.interval), .50),-.50),\r\n            -this.radiusY*Math.max(Math.min((this.movedAmount.y / obj.interval), .60),-.60),\r\n        )\r\n        \r\n        this.position = this.parent.position.add(this.offset)\r\n    }\r\n}\r\n", "import { CanvasCircle } from '../../../../canvas/canvasCircle';\r\nimport { ColorType } from '../../../../canvas/canvasColor';\r\nimport { CanvasController } from '../../../../utils/controller';\r\nimport { Vector2 } from '../../../../utils/vector2';\r\nimport { SnakeColors } from '../snake';\r\n\r\nexport class Tail extends CanvasCircle {\r\n    private trace: Vector2[] = [];\r\n    private number: number;\r\n    \r\n    protected bottomRadius: number;\r\n    protected topRadius: number;\r\n    protected moving: boolean = false;\r\n    protected next: Tail;\r\n\r\n    public colorType: ColorType = 'radialGradient';\r\n    public colors: SnakeColors;\r\n    public distance: number;\r\n    public total: number;\r\n\r\n    constructor({\r\n        number,\r\n        distance,\r\n        total,\r\n        topRadius = 120,\r\n        bottomRadius = 20,\r\n        controllers = []\r\n    }: {\r\n        number: number;\r\n        distance: number;\r\n        total: number;\r\n        topRadius?: number;\r\n        bottomRadius?: number;\r\n        controllers?: CanvasController[];\r\n    }) {\r\n\r\n        super({\r\n            position: new Vector2(200, 200),\r\n            radius: (1- (number / total)) * (topRadius - bottomRadius) + bottomRadius,\r\n            color: `transparant`,\r\n            center: true,\r\n            controllers\r\n        });\r\n        \r\n        this.number = number;\r\n        this.distance = distance;\r\n        this.total = total;\r\n        this.visible = false;\r\n        this.topRadius = topRadius;\r\n        this.bottomRadius = bottomRadius;\r\n    }\r\n\r\n    public add(total: number) {\r\n        if (this.next) {\r\n            this.next.add(total);\r\n        } else {\r\n            this.next = new Tail({ number: this.number + 1, distance: this.distance, total, topRadius: this.topRadius, bottomRadius: this.bottomRadius, controllers: [] });\r\n            this.next.colors = this.colors;\r\n            this.addChild(this.next);\r\n        }\r\n    }\r\n\r\n    public follow(p: Vector2) {\r\n        this.trace.push(p);\r\n\r\n        if (this.moving) {\r\n            this.position = this.trace.shift().clone();\r\n            if (this.next) {\r\n                this.next.follow(this.position.clone());\r\n            }\r\n\r\n        } else if (this.trace.length === Math.max(3, Math.round((this.distance - ((this.number / this.total) * this.distance))))) {\r\n            this.moving = true;\r\n            this.position = this.trace[0].clone();\r\n            this.visible = true;\r\n            this.getColorGradient();\r\n\r\n        } else {\r\n            this.visible = false;\r\n        }\r\n    }\r\n\r\n    public getColorGradient() {\r\n\r\n\r\n        const lin = 1 - (this.number / this.total);\r\n        const h = (lin * 360);\r\n        const s = ({\r\n            rainbow: [\r\n                [0.1, `hsla(${h},0%,0%,${100}%)`],\r\n                [0.68, `hsla(${h},100%,50%,${100}%)`],\r\n            ],\r\n            green: [\r\n                [0.1, `hsla(140,0%,0%,${100}%)`],\r\n                [0.68, `hsla(140,45%,40%,${100}%)`],\r\n            ],\r\n            dark: [\r\n                [0.1, `black`],\r\n                [0.68, `black`],\r\n            ],\r\n        } as Record<SnakeColors, [number, string][]>)[this.colors];\r\n\r\n        s.push(\r\n            [0.68, `black`],\r\n            [0.7 + ((1 - lin) * .06), `black`],\r\n            [0.7 + ((1 - lin) * .06), `#00000011`],\r\n            [1, `#00000000`]\r\n        );\r\n\r\n        this.radialGradient = {\r\n            stops: s,\r\n            offset: new Vector2(10 * lin, 10 * lin)\r\n        };\r\n    }\r\n}\r\n", "import { CanvasCircle } from '../../../canvas/canvasCircle';\r\nimport { CanvasController } from '../../../utils/controller';\r\nimport { TickerReturnData } from '../../../utils/ticker';\r\nimport { Vector2 } from '../../../utils/vector2';\r\nimport { Eye } from './parts/eye';\r\nimport { Tail } from './parts/tail';\r\n\r\nexport type SnakeColors = 'rainbow' | 'dark' | 'green';\r\nexport class Snake extends Tail {\r\n    public eye1: CanvasCircle;\r\n    public eye2: CanvasCircle;\r\n    private faceSize: number;\r\n\r\n    constructor({\r\n        position = Vector2.zero,\r\n        totals = 10,\r\n        distance = 10,\r\n        topRadius = 120,\r\n        bottomRadius = 5,\r\n        colors = 'rainbow',\r\n        controllers = []\r\n    }: {\r\n        position?: Vector2;\r\n        totals?: number;\r\n        distance?: number;\r\n        topRadius?: number;\r\n        bottomRadius?: number;\r\n        colors?: SnakeColors;\r\n        controllers?: CanvasController[];\r\n    } = {}) {\r\n\r\n        super({ number: 0, distance, total: totals, controllers, topRadius: topRadius + 25, bottomRadius });\r\n        this.faceSize = topRadius;\r\n        this.position = position;\r\n        this.colors = colors;\r\n    }\r\n\r\n    build() {\r\n        this.moving = true;\r\n        this.visible = true;\r\n        this.radius = this.faceSize * 1.2;\r\n        this.radiusY = this.faceSize;\r\n        this.strokeWidth = 3;\r\n        this.setcolor();\r\n\r\n        for (let index = 0; index < this.total; index++) {\r\n            this.add(this.total);\r\n        }\r\n\r\n        this.addChild(new Eye(new Vector2(-this.faceSize * 0.62, -this.faceSize * 0.4), this.faceSize * 0.6), true);\r\n        this.addChild(new Eye(new Vector2(this.faceSize * 0.62, -this.faceSize * 0.4), this.faceSize * 0.6), true);\r\n\r\n    }\r\n\r\n    public tick(obj: TickerReturnData) {\r\n        super.tick(obj);\r\n\r\n        if (this.next) {\r\n            this.next.follow(this.position.clone());\r\n        }\r\n    }\r\n\r\n    public setcolor() {\r\n        if (this.colors === 'rainbow') {\r\n            this.colorType = 'linearGradient';\r\n            this.linearGradient = {\r\n                stops: [\r\n                    [0.0, 'rgba(255,0,0,1)'],\r\n                    [0.1, 'rgba(255,154,0,1)'],\r\n                    [0.2, 'rgba(208,222,33,1)'],\r\n                    [0.3, 'rgba(79,220,74,1)'],\r\n                    [0.4, 'rgba(63,218,216,1)'],\r\n                    [0.5, 'rgba(47,201,226,1)'],\r\n                    [0.6, 'rgba(28,127,238,1)'],\r\n                    [0.7, 'rgba(95,21,242,1)'],\r\n                    [0.8, 'rgba(186,12,248,1)'],\r\n                    [0.9, 'rgba(251,7,217,1)'],\r\n                    [1.0, 'rgba(255,0,0,1)'],\r\n                ],\r\n                angle: 0,\r\n            };\r\n\r\n        } else if (this.colors === 'dark') {\r\n            this.colorType = 'radialGradient';\r\n            this.radialGradient = {\r\n                stops: [\r\n                    [0.0, 'rgba(255,0,0,1)'],\r\n                    [0.1, 'rgba(255,154,0,1)'],\r\n                    [0.2, 'rgba(208,222,33,1)'],\r\n                    [0.3, 'rgba(79,220,74,1)'],\r\n                    [0.4, 'rgba(63,218,216,1)'],\r\n                    [0.5, 'rgba(47,201,226,1)'],\r\n                    [0.6, 'rgba(28,127,238,1)'],\r\n                    [0.7, 'rgba(95,21,242,1)'],\r\n                    [0.8, 'rgba(186,12,248,1)'],\r\n                    [0.9, 'rgba(251,7,217,1)'],\r\n                    [1.0, 'rgba(255,0,0,1)'],\r\n                ],\r\n            };\r\n           \r\n        } else if (this.colors === 'green') {\r\n            this.colorType = 'radialGradient';\r\n            this.radialGradient = {\r\n                stops: [\r\n                    [0, `hsla(140,100%,20%,${100}%)`],\r\n                    [1, `hsla(140,45%,40%,${100}%)`],\r\n                ],\r\n            };\r\n        }\r\n    }\r\n}\r\n", "import { CanvasElement, CanvasElementAttributes, CanvasElementType } from '../canvas/canvasElement';\r\n\r\nexport class CanvasController extends CanvasElement {\r\n    public type: CanvasElementType = 'logic';\r\n\r\n    public constructor(attr: CanvasElementAttributes = {}) {\r\n        super(attr);\r\n    }\r\n\r\n    public render(c: CanvasRenderingContext2D): void {\r\n        // void\r\n    }\r\n    public mouseMove(e: MouseEvent) {\r\n        // void\r\n    }\r\n    public keyDown(e: KeyboardEvent) {\r\n        // void\r\n    }\r\n    public keyUp(e: KeyboardEvent) {\r\n        // void\r\n    }\r\n}", "import { CanvasController } from '../utils/controller';\r\nimport { TickerReturnData } from '../utils/ticker';\r\nimport { Vector2 } from '../utils/vector2';\r\n\r\nexport class Bounce extends CanvasController {\r\n    private velocity: Vector2 = new Vector2(10, 0);\r\n    private bouncing: boolean = true;\r\n    private radius: number;\r\n\r\n    constructor(radius: number) {\r\n        super();\r\n        this.radius = radius;\r\n    }\r\n\r\n    public tick(obj: TickerReturnData) {\r\n        super.tick(obj);\r\n\r\n        this.bounceGround();\r\n        this.bounceWall();\r\n    }\r\n\r\n    bounceWall() {\r\n        if (this.parent.position.add(this.velocity).x > this.level.width - this.radius) {\r\n            this.velocity.x = (-this.velocity.x * 0.8);\r\n        } else if (this.parent.position.add(this.velocity).x < (this.radius)) {\r\n            this.velocity.x = (-this.velocity.x * 0.8);\r\n        }\r\n\r\n        if (this.bouncing){\r\n            this.parent.position.x += this.velocity.x;\r\n        } else {\r\n            this.velocity.x*=0.98\r\n            this.parent.position.x += this.velocity.x;\r\n        }\r\n    }\r\n\r\n    bounceGround() {\r\n        if (this.bouncing) {\r\n            if (this.parent.position.add(this.velocity).y > this.level.height - this.radius) {\r\n                if (this.velocity.y > 5) {\r\n                    this.velocity.y = (-this.velocity.y) + 3;\r\n                } else {\r\n                    this.land();\r\n                    return;\r\n                }\r\n            }\r\n            this.velocity.y += 1;\r\n            this.parent.position.y += this.velocity.y;\r\n        }\r\n    }\r\n\r\n    land() {\r\n        this.parent.position.y = this.level.height - this.radius;\r\n        this.bouncing = false;\r\n    }\r\n}", "import { CanvasColorBackground } from '../../../canvas/canvasBackground';\r\nimport { Vector2 } from \"../../../utils/vector2\"\r\nimport { Level } from \"../../../utils/level\"\r\nimport { Snake } from '../character/snake';\r\nimport { Bounce } from '../../../controllers/bounce';\r\n\r\nexport class BouncerLevel extends Level {\r\n    public start = new Vector2(300, 400)\r\n    public background = new CanvasColorBackground('black')\r\n    public height = 1145\r\n    public width = 2000\r\n\r\n    build(){\r\n        this.game.getEvent('resize').subscribe(String(Math.random()), (size: Vector2)=>{\r\n            this.width = size.x\r\n            this.height = size.y\r\n        });\r\n        this.addChild(this.background);\r\n        this.addChild(new Snake({ position: this.start, totals: 50, distance: 6, colors: 'rainbow', controllers: [new Bounce(120)] }));\r\n    }\r\n\r\n}\r\n", "import { Vector2 } from '../utils/vector2';\r\nimport { CanvasSquare } from './canvasSquare';\r\nimport { RadialGradient } from './canvasColor';\r\n\r\n\r\nexport class CanvasRadialGradientBackground extends CanvasSquare {\r\n    public colorType = 'radialGradient' as const;\r\n    constructor(radialGradient: RadialGradient) {\r\n        super({\r\n            position: Vector2.zero,\r\n            radialGradient: radialGradient\r\n        });\r\n    }\r\n\r\n    build() {\r\n        this.game.getEvent('resize').subscribe(String(Math.random()), (size: Vector2) => {\r\n            this.size = this.level.size;\r\n        });\r\n    }\r\n}\r\n", "import { CanvasController } from '../utils/controller';\r\nimport { TickerReturnData } from '../utils/ticker';\r\nimport { Vector2 } from '../utils/vector2';\r\n\r\nexport class Random extends CanvasController {\r\n    private speed = new Vector2(7, 7);\r\n    private direction = Vector2.up;\r\n    private steering: number = Math.random();\r\n    private maxSteering: number = 5;\r\n    private radius: number;;\r\n\r\n    constructor(radius: number, direction: Vector2 = Vector2.up) {\r\n        super();\r\n        this.radius = radius\r\n        this.direction = direction;\r\n    }\r\n\r\n    public tick(obj: TickerReturnData) {\r\n        super.tick(obj);\r\n\r\n        this.steering = Math.max(Math.min(this.steering + ((Math.random() * 2) - 1) / 5, this.maxSteering), -this.maxSteering);\r\n        this.direction = this.direction.rotate(this.steering / 200);\r\n        this.parent.position = this.parent.position.add(this.speed.multiply(this.direction).scale(obj.interval / 10));\r\n\r\n        if (this.parent.position.x > this.level.width + this.radius) {\r\n            this.parent.position.x = -this.radius;\r\n        }\r\n        if (this.parent.position.y > this.level.height + this.radius) {\r\n            this.parent.position.y = -this.radius;\r\n        }\r\n        if (this.parent.position.x < -this.radius) {\r\n            this.parent.position.x = this.level.width + this.radius;\r\n        }\r\n        if (this.parent.position.y < -this.radius) {\r\n            this.parent.position.y = this.level.height + this.radius;\r\n        }\r\n    }\r\n}", "import { Vector2 } from \"../../../utils/vector2\";\r\nimport { Level } from \"../../../utils/level\";\r\nimport { CanvasRadialGradientBackground } from '../../../canvas/canvasRadialGradientBackground';\r\nimport { Snake } from '../character/snake';\r\nimport { Random } from '../../../controllers/random';\r\n\r\nexport class DiscoLevel extends Level {\r\n    public start = new Vector2(300, 400);\r\n    public background = new CanvasRadialGradientBackground({\r\n        stops: [[0, 'purple'], [1, 'pink']],\r\n    });\r\n    public height = 1145;\r\n    public width = 2000;\r\n\r\n    build() {\r\n        this.game.getEvent('resize').subscribe(String(Math.random()), (size: Vector2) => {\r\n            this.width = size.x;\r\n            this.height = size.y;\r\n        });\r\n        this.addChild(this.background);\r\n\r\n        this.addChild(new Snake({\r\n            totals: 30,\r\n            distance: 1,\r\n            topRadius: 50,\r\n            bottomRadius: 1,\r\n            position: new Vector2(0 - 150, 200),\r\n            controllers: [new Random(200, Vector2.left)]\r\n        }));\r\n        this.addChild(new Snake({\r\n            totals: 50,\r\n            distance: 4,\r\n            position: new Vector2(0 - 150, 200),\r\n            controllers: [new Random(200, Vector2.right)]\r\n        }));\r\n        this.addChild(new Snake({\r\n            totals: 50,\r\n            distance: 4,\r\n            position: new Vector2(this.width + 150, 950),\r\n            colors: 'green',\r\n            controllers: [new Random(100, Vector2.left)]\r\n        },));\r\n\r\n\r\n        // this.addChild(new RandomSnake(new Vector2(0 - 150, 450), Vector2.right));\r\n        // this.addChild(new RandomSnake(new Vector2(0-150,700), Vector2.right))\r\n        // this.addChild(new RandomSnake(new Vector2(0-150,950), Vector2.right))\r\n        // this.addChild(new RandomSnake(new Vector2(this.width + 150, 200), Vector2.left));\r\n        // this.addChild(new RandomSnake(new Vector2(this.width + 150, 450), Vector2.left));\r\n        // this.addChild(new RandomSnake(new Vector2(this.width+150,700), Vector2.left))\r\n    }\r\n\r\n}", "import { CanvasColorBackground } from '../../../canvas/canvasBackground';\r\nimport { Vector2 } from \"../../../utils/vector2\"\r\nimport { Level } from \"../../../utils/level\"\r\n\r\nexport class Empty extends Level {\r\n\r\n    public start = new Vector2(300, 400)\r\n    public background = new CanvasColorBackground('darkblue')\r\n    public height = 1145\r\n    public width = 1594\r\n\r\n    build() {\r\n        this.addChild(this.background);\r\n    }\r\n\r\n}", "import { CanvasController } from '../utils/controller';\r\nimport { TickerReturnData } from '../utils/ticker';\r\nimport { Vector2 } from '../utils/vector2';\r\n\r\nexport class FollowMouse extends CanvasController {\r\n    private speed = new Vector2(6, 6);\r\n    private direction = Vector2.right;\r\n    public target: Vector2;\r\n\r\n    constructor(direction: Vector2 = Vector2.up) {\r\n        super();\r\n        this.direction = direction;\r\n    }\r\n\r\n    public tick(obj: TickerReturnData) {\r\n        super.tick(obj);\r\n\r\n        if (this.target) {\r\n            const d = this.target.subtract(this.parent.position).angle()+ Math.PI - this.direction.angle();\r\n            \r\n            if (d > Math.PI || d < 0){\r\n                this.direction = this.direction.rotate(Math.PI/120);\r\n            } else {\r\n                this.direction = this.direction.rotate(-Math.PI/120);\r\n            }\r\n            this.parent.position = this.parent.position.add(this.direction.multiply(this.speed).scale(obj.interval / 10));\r\n        }\r\n    }\r\n\r\n    mouseMove(e: MouseEvent){\r\n        super.mouseMove(e);\r\n        this.target = new Vector2(e.clientX, e.clientY);\r\n    }\r\n}", "import { CanvasRadialGradientBackground } from '../../../canvas/canvasRadialGradientBackground';\r\nimport { Vector2 } from \"../../../utils/vector2\";\r\nimport { Level } from \"../../../utils/level\";\r\nimport { Snake } from '../character/snake';\r\nimport { FollowMouse } from '../../../controllers/followMouse';\r\n\r\nexport class FollowLevel extends Level {\r\n    public start = new Vector2(300, 400);\r\n    public background = new CanvasRadialGradientBackground({\r\n        stops: [[0, 'red'], [1, 'blue']],\r\n    });\r\n    public height = 1145;\r\n    public width = 2000;\r\n\r\n    build() {\r\n        this.game.getEvent('resize').subscribe(String(Math.random()), (size: Vector2) => {\r\n            this.width = size.x;\r\n            this.height = size.y;\r\n        });\r\n        \r\n        this.addChild(this.background);\r\n        this.addChild(new Snake({ position: this.start, totals: 50, distance: 6, colors: 'rainbow', controllers: [new FollowMouse()] }));\r\n    }\r\n}", "import { DomButton } from '../../dom/domButton';\r\nimport { Mode } from '../../utils/mode';\r\nimport { Vector2 } from '../../utils/vector2';\r\nimport { BouncerLevel } from './levels/bouncingSnake';\r\nimport { DiscoLevel } from './levels/discoSnake';\r\nimport { Empty } from './levels/empty';\r\nimport { FollowLevel } from './levels/followMouse';\r\n\r\nexport class SnakeMode extends Mode{\r\n    public constructor() {\r\n        super({hasDom: true});\r\n        this.dom.appendChild(new DomButton({\r\n            text: 'DISCO',\r\n            fontSize: 39,\r\n            fontWeight: 1000,\r\n            color: 'black',\r\n            position: new Vector2(5,60), \r\n            size: new Vector2(105, 50),\r\n            background: 'linear-gradient(90deg, rgba(255,0,0,1) 0%, rgba(255,154,0,1) 10%, rgba(208,222,33,1) 20%, rgba(79,220,74,1) 30%, rgba(63,218,216,1) 40%, rgba(47,201,226,1) 50%, rgba(28,127,238,1) 60%, rgba(95,21,242,1) 70%, rgba(186,12,248,1) 80%, rgba(251,7,217,1) 90%, rgba(255,0,0,1) 100%)',\r\n            fontFamily: 'monospace',\r\n            padding: [0,10,0,10],\r\n            onClick: ()=>{\r\n                this.mode.switchLevel('disco')\r\n            }\r\n        }));\r\n        this.dom.appendChild(new DomButton({\r\n            text: 'BOUNCE',\r\n            fontSize: 39,\r\n            fontWeight: 1000,\r\n            color: 'white',\r\n            position: new Vector2(135,60), \r\n            size: new Vector2(130, 50),\r\n            background: '#ff00ffaa',\r\n            fontFamily: 'monospace',\r\n            padding: [0,10,0,10],\r\n            onClick: ()=>{\r\n                this.mode.switchLevel('bounce')\r\n            }\r\n        }));\r\n    }\r\n\r\n    build(){\r\n        this.addLevel('disco', new DiscoLevel());\r\n        this.addLevel('bounce', new BouncerLevel());\r\n        this.addLevel('follow', new FollowLevel());\r\n        this.addLevel('Empty', new Empty());\r\n        this.switchLevel('disco');\r\n    }\r\n}", "import { Vector2 } from './vector2';\r\n\r\nexport type TickerReturnData = {interval: number, total: number}\r\nexport type TickerCallback = (obj: TickerReturnData) => void;\r\nexport class Ticker {\r\n    private callbacks: TickerCallback[] = [];\r\n    private sTime: number;\r\n    public get startTime() {\r\n        return this.sTime;\r\n    }\r\n    private eTime: number;\r\n    public get elapsed() {\r\n        return this.eTime;\r\n    }\r\n    private pTime: number;\r\n    \r\n    private fFrame(time: number) {\r\n        this.sTime = time;\r\n        this.pTime = time;\r\n        window.requestAnimationFrame(this.frame.bind(this));\r\n    }\r\n    private frame(timeStamp: number) {\r\n        const interval = timeStamp - this.pTime;\r\n        this.eTime = timeStamp - this.sTime;\r\n        this.pTime = timeStamp;\r\n\r\n        const o = {\r\n            interval,\r\n            total: this.eTime,\r\n        }\r\n\r\n        this.callbacks.forEach((c) => {\r\n            c(o);\r\n        });\r\n\r\n        window.requestAnimationFrame(this.frame.bind(this));\r\n    }\r\n\r\n    public start() {\r\n        window.requestAnimationFrame(this.fFrame.bind(this));\r\n    }\r\n\r\n    public add(callback: TickerCallback) {\r\n        this.callbacks.push(callback);\r\n    }\r\n}\r\n", "export type eventFunction<T> = (v: T) => void;\r\nexport class Event<T> {\r\n    public id: string;\r\n    private subscribers: Record<string, eventFunction<T>> = {};\r\n    constructor(id: string) {\r\n        this.id = id;\r\n    }\r\n\r\n    public subscribe(key: string, func: eventFunction<T>) {\r\n        this.subscribers[key] = func;\r\n    }\r\n\r\n    public alert(v: T) {\r\n        Object.values(this.subscribers).forEach((s) => {\r\n            s(v);\r\n        });\r\n    }\r\n}\r\n", "import { CanvasElement } from '../canvas/canvasElement';\r\nimport { DomElement } from '../dom/domElement';\r\nimport { Game } from '../game';\r\nimport { Mode } from './mode';\r\n\r\nexport type inputEvents = 'mouseMove'|'keyDown'|'keyUp';\r\nexport type inputEventsData = {\r\n    'mouseMove': MouseEvent,\r\n    'keyDown': KeyboardEvent,\r\n    'keyUp': KeyboardEvent,\r\n}\r\nexport class Input {\r\n    private canvas: DomElement<\"canvas\">;\r\n    private game: Game;\r\n    public constructor(game: Game) {\r\n        this.game = game;\r\n        this.canvas = game.renderer.canvas;\r\n        this.canvas.addEventListener('mousemove', this.mouseMove.bind(this));\r\n        this.canvas.addEventListener('keydown', this.keyDown.bind(this));\r\n        this.canvas.addEventListener('keyup', this.keyUp.bind(this));\r\n\r\n    }\r\n\r\n    public mouseMove(e: MouseEvent) {\r\n        this.recursive('mouseMove', this.game.renderer, e); \r\n    }\r\n\r\n    public keyDown(e: KeyboardEvent) {\r\n        this.recursive('keyDown', this.game.renderer, e);\r\n    }\r\n\r\n    public keyUp(e: KeyboardEvent) {\r\n        this.recursive('keyUp', this.game.renderer, e);\r\n    }\r\n\r\n    private recursive(event:inputEvents, element: CanvasElement, e: KeyboardEvent|MouseEvent) {\r\n        if (element.active) {\r\n            if (element[event]) {\r\n                if (event === 'mouseMove') {\r\n                    element[event](e as MouseEvent);\r\n                } else {\r\n                    element[event](e as KeyboardEvent);\r\n                }\r\n            }\r\n            element.lowerChildren.forEach((child) => this.recursive(event, child, e));\r\n            element.controllers.forEach((child) => this.recursive(event, child, e));\r\n        }\r\n    }\r\n}", "import { CanvasElement, CanvasElementAttributes } from './canvasElement';\r\nimport { PreppedImage } from './prepImage';\r\n\r\nexport type CanvasImageAttributes = CanvasElementAttributes & {\r\n    image: PreppedImage,\r\n}\r\nexport class CanvasImage extends CanvasElement {\r\n    public type = 'image' as const;\r\n    public prepped: PreppedImage;\r\n\r\n    public get width() { return this.prepped.size.x; }\r\n    public set width(value: number) {\r\n        this.prepped.size.x = value;\r\n    }\r\n\r\n    public get height() { return this.prepped.size.y; }\r\n    public set height(value: number) {\r\n        this.prepped.size.y = value;\r\n    }\r\n\r\n    constructor(attr: CanvasImageAttributes) {\r\n        super(attr);\r\n        this.prepped = attr.image;\r\n    }\r\n\r\n    public render(ctx: CanvasRenderingContext2D) {\r\n        if (this.prepped.ready){\r\n            ctx.drawImage(this.prepped.image, this.position.x, this.position.y, this.prepped.width, this.prepped.height);\r\n        }\r\n    }\r\n}\r\n", "import { Vector2 } from '../utils/vector2';\r\n\r\nexport type PreppedImageAttributes = {\r\n    factor?: number;\r\n    url: string;\r\n};\r\nexport class PreppedImage {\r\n    public original: HTMLImageElement;\r\n    public image: HTMLImageElement;\r\n    public get size(): Vector2 {\r\n        return new Vector2(this.width, this.height);\r\n    }\r\n    public get width() { return this.image.width; }\r\n    public get height() { return this.image.height; }\r\n\r\n    private factor: number;\r\n    public ready: boolean = false;\r\n\r\n    constructor(attr: PreppedImageAttributes) {\r\n        this.factor = attr.factor;\r\n        this.original = new Image();\r\n        this.original.src = attr.url;\r\n        this.original.onload = () => {\r\n            if (this.factor) {\r\n                this.upScale();\r\n            } else {\r\n                this.loaded(this.original);\r\n            }\r\n        };\r\n    }\r\n\r\n    protected upScale() {\r\n        const os = document.createElement('canvas');\r\n        os.width = this.original.width;\r\n        os.height = this.original.height;\r\n        const osCTX = os.getContext('2d', { alpha: true});\r\n\r\n        osCTX.drawImage(this.original, 0, 0, this.original.width, this.original.height);\r\n\r\n        const ss = document.createElement('canvas');\r\n        ss.width = this.factor * this.original.width;\r\n        ss.height = this.factor * this.original.height;\r\n        const ssCTX = ss.getContext('2d');\r\n\r\n        for (let x = 0; x < this.original.width; x++) {\r\n            for (let y = 0; y < this.original.height; y++) {\r\n                const r = osCTX.getImageData(x, y, 1, 1).data.join(',');\r\n                ssCTX.fillStyle = `rgba(${r})`;\r\n                ssCTX.fillRect(\r\n                    x * this.factor,\r\n                    y * this.factor,\r\n                    this.factor,\r\n                    this.factor\r\n                );\r\n            }\r\n        }\r\n\r\n        const newI = new Image();\r\n        newI.src = ss.toDataURL();\r\n        \r\n        newI.onload = () => {\r\n            this.loaded(newI);\r\n        };\r\n    }\r\n\r\n    protected loaded(i: HTMLImageElement) {\r\n        this.image = i;\r\n        this.ready = true;\r\n    }\r\n\r\n}\r\n", "\r\nimport { Vector2 } from \"../utils/vector2\";\r\nimport { CanvasElement, CanvasElementAttributes } from './canvasElement';\r\nimport { CanvasImage } from './canvasImage';\r\nimport { PreppedImage } from './prepImage';\r\n\r\nexport type CanvasGridAttributes = CanvasElementAttributes & {\r\n    factor?: number;\r\n    width?: number;\r\n    height?: number;\r\n    json?: string;\r\n};\r\nexport type TileData = {\r\n    x: number,\r\n    y: number,\r\n    \"type\": string;\r\n};\r\nexport type SpriteData = {\r\n    \"url\": string,\r\n    \"name\": string,\r\n};\r\n\r\nexport class CanvasGrid extends CanvasElement {\r\n    public type = 'logic' as const;\r\n\r\n    public factor: number;\r\n    public width: number;\r\n    public height: number;\r\n    public json: string;\r\n    public ready: Boolean = false;\r\n    private sprites: Record<string, PreppedImage> = {};\r\n\r\n    public get gridDimentsion(): Vector2 {\r\n        return new Vector2(this.width, this.height);\r\n    }\r\n\r\n    public set gridDimentsion(value: Vector2) {\r\n        this.width = value.x;\r\n        this.height = value.y;\r\n    }\r\n\r\n    constructor(attr: CanvasGridAttributes = {}) {\r\n        super(attr);\r\n        this.width = attr.width || 10;\r\n        this.height = attr.height || 10;\r\n        this.factor = attr.factor || 10;\r\n        this.json = attr.json;\r\n\r\n        CanvasGrid.loadJsonFile(this.json).then(this.jsonLoaded.bind(this));\r\n    }\r\n\r\n    private jsonLoaded({ sprites, tiles }: { sprites: SpriteData[], tiles: TileData[]; }) {\r\n        sprites.forEach((sprite) => {\r\n            if (tiles.find((tile) => sprite.name === tile.type)){\r\n                this.sprites[sprite.name] = new PreppedImage({\r\n                    url: sprite.url,\r\n                    factor: this.factor\r\n                });\r\n            }\r\n\r\n        });\r\n        tiles.forEach((sprite) => {\r\n            this.addChild(new CanvasImage({\r\n                position: new Vector2(\r\n                    sprite.x * this.factor * 16,\r\n                    (this.height - sprite.y) * this.factor * 16\r\n                ),\r\n                image: this.sprites[sprite.type],\r\n            }));\r\n        });\r\n    }\r\n\r\n    private static async loadJsonFile(url: string): Promise<any> {\r\n        const response = await fetch(url);\r\n        const data = await response.json();\r\n        return data;\r\n    }\r\n\r\n    public render(c: CanvasRenderingContext2D): void {\r\n        //\r\n    }\r\n\r\n}\r\n", "import { CanvasColorBackground } from '../../canvas/canvasBackground';\r\nimport { CanvasGrid } from '../../canvas/canvasGrid';\r\nimport { Bounce } from '../../controllers/bounce';\r\nimport { DirectTop } from '../../controllers/directTop';\r\nimport { Random } from '../../controllers/random';\r\nimport { Level } from '../../utils/level';\r\nimport { Vector2 } from '../../utils/vector2';\r\nimport { Snake } from '../swapper/character/snake';\r\n\r\nexport class Overworld extends Level {\r\n    private zoom = 3;\r\n\r\n    public start = new Vector2(-100, -100)\r\n    public background = new CanvasColorBackground('#272727')\r\n    public height = 20*this.zoom*16\r\n    public width = 20*this.zoom*16\r\n\r\n    build() {\r\n        this.addChild(this.background);\r\n        this.addChild(new CanvasGrid({json: '/json/overworld/terrain.json', width: 19, height: 19, factor: this.zoom}));\r\n        this.addChild(new CanvasGrid({json: '/json/overworld/Objects.json', width: 19, height: 19, factor: this.zoom}));\r\n        this.addChild(new CanvasGrid({json: '/json/overworld/decorations.json', width: 19, height: 19, factor: this.zoom}));\r\n        this.addChild(new CanvasGrid({json: '/json/overworld/overlay.json', width: 19, height: 19, factor: this.zoom}));\r\n        this.addChild(new Snake({ \r\n            position: this.start, \r\n            totals: 30, \r\n            distance: 6, \r\n            topRadius: 100,\r\n            bottomRadius: 4,\r\n            colors: 'green', \r\n            controllers: [ new  Random(100, Vector2.down)] \r\n        }));\r\n    }\r\n}", "import { Mode } from '../../utils/mode';\r\nimport { TickerReturnData } from '../../utils/ticker';\r\nimport { Overworld as Overworld } from './overworld';\r\n\r\nexport class Topdown extends Mode{\r\n    public constructor() {\r\n        super({hasDom: true});\r\n    }\r\n\r\n    build(){\r\n        this.addLevel('overworld', new Overworld());\r\n        this.switchLevel('overworld');\r\n    }\r\n    \r\n    tick(obj: TickerReturnData): void {\r\n        super.tick(obj);\r\n    }\r\n}", "import { CanvasWrapper } from './canvas/canvasWrapper';\r\nimport { Renderer } from './utils/renderer';\r\nimport { FPS } from './utils/debug/fps';\r\nimport { SnakeMode } from './modes/swapper/snakeMode';\r\nimport { Ticker } from './utils/ticker';\r\nimport { Event } from './utils/event';\r\nimport { Vector2 } from './utils/vector2';\r\nimport { Input } from './utils/input';\r\nimport { Mode } from './utils/mode';\r\nimport { Topdown } from './modes/topdown/topdown';\r\nimport { DomButton } from './dom/domButton';\r\n\r\nexport class Game extends CanvasWrapper {\r\n    public ticker: Ticker;\r\n    public renderer: Renderer;\r\n    private fps: FPS;\r\n    public modes: Record<string, Mode> = {};\r\n    public game = this;\r\n    public ctx: any;\r\n    public hasDom = true;\r\n    public input: Input;\r\n    \r\n    public constructor()  {\r\n        super({hasDom: true});\r\n        this.game = this;\r\n        this.addEvent(new Event('resize'));\r\n        window.addEventListener(\"resize\", ()=>{this.resize()});\r\n\r\n\r\n        this.build();\r\n        this.resize();\r\n    }\r\n    build() {\r\n        \r\n        this.renderer = new Renderer();\r\n        this.addChild(this.renderer);\r\n\r\n        this.setupModes();\r\n\r\n        this.ticker = new Ticker();\r\n        this.ticker.add(this.tick.bind(this));\r\n\r\n        this.input = new Input(this);\r\n\r\n        this.debug();\r\n        this.start();  \r\n        this.resize();\r\n    }\r\n\r\n    private setupModes() {\r\n        this.addMode('snakes', new SnakeMode());\r\n        this.addMode('topdown', new Topdown());\r\n\r\n        this.dom.appendChild(new DomButton({\r\n            text: 'RPG',\r\n            fontSize: 39,\r\n            fontWeight: 1000,\r\n            color: 'white',\r\n            position: new Vector2(130, 5),\r\n            size: new Vector2(65, 50),\r\n            background: '#ff00ffaa',\r\n            fontFamily: 'monospace',\r\n            padding: [0, 10, 0, 10],\r\n            onClick: () => {\r\n                this.switchMode('topdown');\r\n            }\r\n        }));\r\n        this.dom.appendChild(new DomButton({\r\n            text: 'SNAKES',\r\n            fontSize: 39,\r\n            fontWeight: 1000,\r\n            color: 'white',\r\n            position: new Vector2(220, 5),\r\n            size: new Vector2(130, 50),\r\n            background: '#ff00ffaa',\r\n            fontFamily: 'monospace',\r\n            padding: [0, 10, 0, 10],\r\n            onClick: () => {\r\n                this.switchMode('snakes');\r\n            }\r\n        }));\r\n\r\n        this.switchMode('snakes');\r\n    }\r\n\r\n    resize() {\r\n        this.game.getEvent('resize').alert(new Vector2(document.body.clientWidth,document.body.clientHeight));\r\n    }\r\n\r\n    private debug() {\r\n        this.fps = new FPS();\r\n        this.dom.appendChild(this.fps);\r\n        this.ticker.add(this.fps.tick.bind(this.fps));\r\n    }\r\n\r\n    \r\n    protected addMode(s: string, mode: Mode) {\r\n        this.modes[s] = mode;\r\n        this.renderer.addChild(mode);\r\n    }\r\n\r\n    public switchMode(s:string){\r\n        Object.entries(this.modes).forEach(([key, mode])=>{\r\n            mode.active = key === s;\r\n            mode.visible = key === s;\r\n            mode.dom?mode.dom.visible = key === s: null;\r\n        });\r\n    }\r\n\r\n    public start() {\r\n        this.ticker.start();\r\n    }\r\n}\r\n\r\n\r\n", "import { Game } from \"./game\";\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\r\n    document.body.appendChild(new Game().dom.dom);;\r\n});"],
  "mappings": ";AAOO,IAAe,UAAf,MAAuB;AAAA,EAG1B,YAAY,OAA0B,CAAC,GAAG;AAF1C,SAAQ,SAA2B,CAAC;AAAA,EAIpC;AAAA,EAEA,SAAS,GAAmB;AACxB,SAAK,OAAO,KAAK,CAAC;AAAA,EACtB;AAAA,EAEA,SAAS,IAAY;AACjB,WAAO,KAAK,OAAO,KAAK,CAAC,MAAI,OAAO,EAAE,EAAE;AAAA,EAC5C;AACJ;;;ACrBO,IAAM,UAAN,MAAM,SAAQ;AAAA,EAIpB,YAAY,GAAW,GAAW;AACjC,SAAK,IAAK,MAAM,SAAa,IAAI;AACjC,SAAK,IAAK,MAAM,SAAa,IAAI;AAAA,EAClC;AAAA,EAEA,QAAiB;AAChB,WAAO,IAAI,SAAQ,KAAK,GAAG,KAAK,CAAC;AAAA,EAClC;AAAA,EAEA,IAAI,QAAiB;AACpB,WAAO,IAAI,SAAQ,KAAK,IAAI,OAAO,GAAG,KAAK,IAAI,OAAO,CAAC;AAAA,EACxD;AAAA,EAEA,SAAS,QAAiB;AACzB,WAAO,IAAI,SAAQ,KAAK,IAAI,OAAO,GAAG,KAAK,IAAI,OAAO,CAAC;AAAA,EACxD;AAAA,EAEA,SAAS,QAAiB;AACzB,WAAO,IAAI,SAAQ,KAAK,IAAI,OAAO,GAAG,KAAK,IAAI,OAAO,CAAC;AAAA,EACxD;AAAA,EAEA,MAAM,QAAgB;AACrB,WAAO,IAAI,SAAQ,KAAK,IAAI,QAAQ,KAAK,IAAI,MAAM;AAAA,EACpD;AAAA,EAEA,IAAI,QAAiB;AACpB,WAAQ,KAAK,IAAI,OAAO,IAAI,KAAK,IAAI,OAAO;AAAA,EAC7C;AAAA,EAEA,YAAY,QAAiB,GAAW;AACvC,QAAI,KAAK,IAAI,GAAG,CAAC;AACjB,QAAI,OAAO,OAAO,SAAS,IAAI;AAC/B,WAAO,KAAK,IAAI,KAAK,MAAM,CAAC,CAAC;AAAA,EAC9B;AAAA,EAEA,YAAY;AACX,WAAO,KAAK,KAAK,KAAK,aAAa,CAAC;AAAA,EACrC;AAAA,EAEA,eAAe;AACd,WAAQ,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK;AAAA,EACzC;AAAA,EAEA,SAAS,QAAiB;AACzB,WAAO,KAAK,KAAK,KAAK,YAAY,MAAM,CAAC;AAAA,EAC1C;AAAA,EAEA,YAAY,QAAiB;AAC5B,QAAI,SAAS,KAAK,IAAI,OAAO;AAC7B,QAAI,SAAS,KAAK,IAAI,OAAO;AAC7B,WAAQ,SAAS,SAAS,SAAS;AAAA,EACpC;AAAA,EAEA,YAAY;AACX,QAAI,MAAM,KAAK,UAAU;AACzB,QAAI,SAAS,KAAK,MAAM;AACxB,QAAI,KAAK,IAAI,GAAG,IAAI,MAAM;AACzB,aAAO,IAAI;AACX,aAAO,IAAI;AAAA,IACZ,OAAO;AACN,aAAO,KAAK;AACZ,aAAO,KAAK;AAAA,IACb;AACA,WAAO;AAAA,EACR;AAAA,EAEA,QAAQ;AACP,WAAO,KAAK,MAAM,KAAK,GAAG,KAAK,CAAC;AAAA,EACjC;AAAA,EAEA,OAAO,KAAa;AACnB,QAAI,MAAM,KAAK,IAAI,GAAG;AACtB,QAAI,MAAM,KAAK,IAAI,GAAG;AACtB,WAAO,IAAI;AAAA,MACV,KAAK,IAAI,MAAM,KAAK,IAAI;AAAA,MACxB,KAAK,IAAI,MAAM,KAAK,IAAI;AAAA,IACzB;AAAA,EACD;AAAA,EAEA,YAAY,WAAmB;AAC9B,QAAI,SAAS,KAAK,MAAM;AACxB,WAAO,IAAI,CAAC,OAAO,EAAE,QAAQ,SAAS;AACtC,WAAO,IAAI,CAAC,OAAO,EAAE,QAAQ,SAAS;AACtC,WAAO;AAAA,EACR;AAAA,EAEA,WAAW;AACV,QAAI,SAAS,KAAK,YAAY,CAAC;AAC/B,WAAQ,MAAM,OAAO,IAAI,OAAO,OAAO,IAAI;AAAA,EAC5C;AAAA,EAEA,WAAW,OAAO;AACjB,WAAO,IAAI,SAAQ,GAAG,CAAC;AAAA,EACxB;AAAA,EACA,WAAW,OAAO;AACjB,WAAO,IAAI,SAAQ,GAAG,CAAC;AAAA,EACxB;AAAA,EACA,WAAW,KAAK;AACf,WAAO,IAAI,SAAQ,GAAG,EAAE;AAAA,EACzB;AAAA,EACA,WAAW,QAAQ;AAClB,WAAO,IAAI,SAAQ,GAAG,CAAC;AAAA,EACxB;AAAA,EACA,WAAW,OAAO;AACjB,WAAO,IAAI,SAAQ,IAAI,CAAC;AAAA,EACzB;AAAA,EACA,WAAW,aAAa;AACvB,WAAO,IAAI,SAAQ,GAAG,CAAC;AAAA,EACxB;AACD;;;ACxGO,IAAM,aAAN,cAAgE,QAAQ;AAAA,EA0D3E,YAAY,MAAS,OAA6B,CAAC,GAAG;AAClD,UAAM,IAAI;AAtDd,SAAQ,WAAoB;AAuDxB,SAAK,MAAM,SAAS,cAAc,IAAI;AACtC,SAAK,IAAI,MAAM,WAAW;AAC1B,SAAK,KAAK,KAAK,MAAM;AACrB,SAAK,OAAO,KAAK;AACjB,SAAK,aAAa,KAAK,cAAc;AACrC,SAAK,WAAW,KAAK,YAAY,QAAQ;AAAA,EAC7C;AAAA,EA5DA,IAAW,UAAmB;AAC1B,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAW,QAAQ,OAAgB;AAC/B,SAAK,IAAI,MAAM,UAAU,QAAQ,UAAU;AAC3C,SAAK,WAAW;AAAA,EACpB;AAAA,EAEA,IAAW,WAAoB;AAC3B,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,IAAW,SAAS,OAAgB;AAChC,QAAI,SAAS,KAAK,KAAI;AAClB,WAAK,IAAI,MAAM,OAAO,MAAM,IAAI;AAChC,WAAK,IAAI,MAAM,MAAM,MAAM,IAAI;AAAA,IACnC;AAAA,EACJ;AAAA,EAEA,IAAW,KAAK;AAAE,WAAO,KAAK,IAAI;AAAA,EAAG;AAAA,EACrC,IAAW,GAAG,OAAe;AACzB,QAAI,OAAM;AACN,WAAK,IAAI,KAAK;AAAA,IAClB;AAAA,EACJ;AAAA,EAEA,IAAW,OAAO;AACd,WAAO,IAAI,QAAQ,KAAK,OAAM,KAAK,MAAM;AAAA,EAC7C;AAAA,EACA,IAAW,KAAK,OAAgB;AAC5B,QAAI,OAAO;AACP,WAAK,QAAQ,MAAM;AACnB,WAAK,SAAS,MAAM;AAAA,IACxB;AAAA,EACJ;AAAA,EAEA,IAAW,WAAY,GAAW;AAC9B,SAAK,IAAI,MAAM,aAAa;AAAA,EAChC;AAAA,EAEA,IAAW,QAAO;AAAC,WAAO,KAAK,IAAI;AAAA,EAAW;AAAA,EAC9C,IAAW,MAAM,OAAe;AAC5B,SAAK,IAAI,MAAM,QAAQ,GAAG,cAAK;AAC/B,SAAK,IAAI,aAAa,SAAS,OAAO,KAAK,CAAC;AAAA,EAChD;AAAA,EAEA,IAAW,SAAQ;AAAC,WAAO,KAAK,IAAI;AAAA,EAAY;AAAA,EAChD,IAAW,OAAO,OAAe;AAC7B,SAAK,IAAI,MAAM,SAAS,GAAG,cAAK;AAChC,SAAK,IAAI,aAAa,UAAU,OAAO,KAAK,CAAC;AAAA,EACjD;AAAA,EAYO,YAAY,GAAoB;AACnC,SAAK,IAAI,YAAY,EAAE,GAAG;AAC1B,SAAK,IAAI;AAAA,EACb;AAAA,EAGA,iBAAiB,MAAc,UAA8C,SAAmD;AAC5H,SAAK,IAAI,iBAAiB,MAAM,UAAU,OAAO;AAAA,EACrD;AAAA,EAEA,oBAAoB,MAAc,UAA8C,SAAgD;AAC5H,SAAK,IAAI,oBAAoB,MAAM,UAAU,OAAO;AAAA,EACxD;AAIJ;;;ACvEO,IAAe,gBAAf,cAAqC,QAAQ;AAAA,EAiBhD,YAAY,OAAgC,CAAC,GAAG;AAC5C,UAAM,IAAI;AAVd,SAAO,WAAoB;AAC3B,SAAQ,eAAyB,QAAQ;AACzC,SAAO,cAAuB,QAAQ;AACtC,SAAO,WAAqB,QAAQ;AACpC,SAAO,SAAkB;AACzB,SAAO,UAAmB;AAC1B,SAAO,gBAAiC,CAAC;AACzC,SAAO,iBAAkC,CAAC;AAC1C,SAAO,cAAkC,CAAC;AAGtC,SAAK,WAAW,KAAK,YAAY,QAAQ;AACzC,SAAK,eAAe,KAAK,eAAe,CAAC,CAAC;AAC1C,QAAI,KAAK,QAAO;AACZ,WAAK,MAAM,IAAI,WAAW,KAAK;AAAA,IACnC;AAAA,EACJ;AAAA,EAEO,SAAS,OAAsB,QAAiB,OAAM;AAhDjE;AAiDQ,QAAI,MAAM,WAAW,QAAU;AAC3B,kBAAM,WAAN,kBAAM,SAAW;AACjB,kBAAM,SAAN,kBAAM,OAAS,KAAK;AACpB,kBAAM,SAAN,kBAAM,OAAS,KAAK;AACpB,kBAAM,UAAN,kBAAM,QAAU,KAAK;AAErB,WAAK,QAAM,mBAAiB,eAAe,EAAE,KAAK,KAAK;AAEvD,UAAI,MAAM,KAAI;AACV,aAAK,IAAI,YAAY,MAAM,GAAG;AAAA,MAClC;AAEA,UAAI,MAAM,OAAM;AACZ,cAAM,MAAM;AAAA,MAChB;AAEA,YAAM,oBAAoB,KAAK;AAAA,IAEnC,OAAO;AACH,cAAQ,IAAI,qDAAqD;AAAA,IACrE;AAAA,EACJ;AAAA,EAEO,eAAe,GAAsB;AACxC,SAAK,YAAY,KAAK,GAAG,CAAC;AAAA,EAC9B;AAAA,EAEO,oBAAoB,OAAsB;AAC7C,UAAM,YAAY,QAAQ,CAAC,eAAe;AA7ElD;AA8EY,UAAI,WAAW,WAAW,QAAU;AAChC,yBAAW,WAAX,uBAAW,SAAW;AACtB,yBAAW,SAAX,uBAAW,OAAS,MAAM;AAC1B,yBAAW,SAAX,uBAAW,OAAS,MAAM;AAC1B,yBAAW,UAAX,uBAAW,QAAU,MAAM;AAAA,MAC/B;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAEO,KAAM,KAAuB;AAChC,QAAI,KAAK,QAAO;AACZ,WAAK,cAAc,KAAK,aAAa,SAAS,KAAK,QAAQ;AAC3D,WAAK,eAAe,KAAK;AACzB,WAAK,YAAY,QAAQ,CAAC,MAAM,EAAE,KAAK,GAAG,CAAE;AAC5C,WAAK,cAAc,QAAQ,CAAC,MAAM,EAAE,KAAK,GAAG,CAAE;AAC9C,WAAK,eAAe,QAAQ,CAAC,MAAM,EAAE,KAAK,GAAG,CAAE;AAAA,IACnD;AAAA,EACJ;AAGJ;;;AC9FO,IAAe,gBAAf,cAAqC,cAAc;AAAA,EAGtD,YAAY,OAAgC,CAAC,GAAG;AAC5C,UAAM,IAAI;AAHd,SAAgB,OAAO;AAAA,EAIvB;AAAA,EAEO,OAAO,GAAmC;AAAA,EAEjD;AACJ;;;ACKO,IAAe,cAAf,cAAmC,cAAc;AAAA,EAUpD,YAAY,OAA8B,CAAC,GAAG;AAC1C,UAAM,IAAI;AATd,SAAO,OAAO;AACd,SAAO,YAAuB;AAK9B,SAAO,cAAsB;AAIzB,SAAK,QAAQ,KAAK;AAClB,SAAK,SAAS,KAAK;AACnB,SAAK,cAAc,KAAK,cAAc;AACtC,SAAK,iBAAiB,KAAK;AAC3B,SAAK,iBAAiB,KAAK;AAAA,EAC/B;AAAA,EAEO,WAAoD;AACvD,QAAI,KAAK,cAAc,SAAQ;AAC3B,aAAO,KAAK;AAAA,IAChB;AACA,QAAI,KAAK,cAAc,kBAAiB;AACpC,aAAO,KAAK,kBAAkB;AAAA,IAClC;AACA,QAAI,KAAK,cAAc,kBAAiB;AACpC,aAAO,KAAK,kBAAkB;AAAA,IAClC;AAAA,EACJ;AAGJ;;;AC7CO,IAAM,eAAN,cAA2B,YAAY;AAAA,EAuB1C,YAAY,OAA+B,CAAC,GAAG;AAC3C,UAAM,IAAI;AAvBd,SAAO,QAAQ;AAwBX,SAAK,QAAQ,KAAK;AAClB,SAAK,OAAO,KAAK;AAAA,EACrB;AAAA,EAvBA,IAAW,OAAO;AACd,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAW,KAAK,OAAgB;AAC5B,QAAI,OAAO;AACP,WAAK,QAAQ;AAAA,IACjB;AAAA,EACJ;AAAA,EAEA,IAAW,QAAQ;AAAE,WAAO,KAAK,MAAM;AAAA,EAAG;AAAA,EAC1C,IAAW,MAAM,OAAe;AAC5B,SAAK,MAAM,IAAI;AAAA,EACnB;AAAA,EAEA,IAAW,SAAS;AAAE,WAAO,KAAK,MAAM;AAAA,EAAG;AAAA,EAC3C,IAAW,OAAO,OAAe;AAC7B,SAAK,MAAM,IAAI;AAAA,EACnB;AAAA,EAQO,OAAO,KAAqC;AAC/C,QAAI,YAAY,KAAK,SAAS;AAC9B,QAAI,SAAS,KAAK,SAAS,GAAG,KAAK,SAAS,GAAG,KAAK,KAAK,GAAG,KAAK,KAAK,CAAC;AAAA,EAC3E;AAAA,EAEO,oBAAyC;AAC5C,QAAI,KAAK,gBAAgB;AACrB,YAAM,MAAM,KAAK,KAAK,SAAS,IAAI,qBAAqB,KAAK,SAAS,GAAG,KAAK,SAAS,GAAG,KAAK,SAAS,IAAI,KAAK,OAAO,KAAK,SAAS,IAAI,KAAK,MAAM;AAErJ,WAAK,eAAe,MAAM,QAAQ,CAAC,CAAC,QAAO,KAAK,MAAI;AAChD,YAAI,aAAa,QAAQ,KAAK;AAAA,MAClC,CAAC;AAED,aAAO;AAAA,IACX;AACA,WAAO;AAAA,EACX;AAAA,EACO,oBAAyC;AAC5C,QAAI,KAAK,gBAAgB;AACrB,YAAM,MAAM,KAAK,KAAK,SAAS,IAAI;AAAA,QAC/B,KAAK,SAAS,IAAI,KAAK,QAAO;AAAA,QAC9B,KAAK,SAAS,IAAI,KAAK,SAAQ;AAAA,QAC/B;AAAA,QACA,KAAK,SAAS,IAAI,KAAK,QAAO;AAAA,QAC9B,KAAK,SAAS,IAAI,KAAK,SAAQ;AAAA,QAC/B,KAAK;AAAA,MACT;AACA,WAAK,eAAe,MAAM,QAAQ,CAAC,CAAC,QAAO,KAAK,MAAI;AAChD,YAAI,aAAa,QAAQ,KAAK;AAAA,MAClC,CAAC;AACD,aAAO;AAAA,IACX;AACA,WAAO;AAAA,EACX;AACJ;;;AC9DO,IAAM,WAAN,cAAuB,cAAc;AAAA,EAKjC,cAAc;AACjB,UAAM,EAAE,QAAQ,KAAK,CAAC;AAH1B,SAAO,SAAS;AAAA,EAIhB;AAAA,EAEA,QAAQ;AAEJ,SAAK,SAAS,IAAI,WAAW,QAAQ;AACrC,SAAK,OAAO,IAAI,WAAW;AAC3B,SAAK,aAAa,IAAI,aAAa;AAAA,MAC3B,UAAU,IAAI,QAAQ,GAAG,CAAC;AAAA,MAC1B,MAAM,IAAI,QAAQ,IAAI,EAAE;AAAA,MACxB,OAAO;AAAA,IACX,CAAC;AACD,SAAK,SAAS,KAAK,YAAY,IAAI;AAEvC,SAAK,KAAK,SAAS,QAAQ,EAAE,UAAU,OAAO,KAAK,OAAO,CAAC,GAAG,CAAC,SAAkB;AAC7E,WAAK,OAAO,OAAO;AAAA,IACvB,CAAC;AACD,SAAK,KAAK,OAAO;AAEjB,SAAK,MAAM,KAAK,OAAO,IAAI,WAAW,IAAI;AAC1C,SAAK,IAAI,YAAY,KAAK,MAAM;AAAA,EACpC;AAAA,EAEO,KAAK,KAAuB;AAC/B,UAAM,KAAK,GAAG;AACd,SAAK,UAAU,IAAI;AAAA,EACvB;AAAA,EAEQ,UAAU,SAAwB;AACtC,QAAI,QAAQ,UAAU,QAAQ,SAAS;AACnC,cAAQ,cAAc,QAAQ,CAAC,UAAU,KAAK,UAAU,KAAK,CAAC;AAC9D,WAAK,UAAU,OAAO;AACtB,cAAQ,eAAe,QAAQ,CAAC,UAAU,KAAK,UAAU,KAAK,CAAC;AAAA,IACnE;AAAA,EACJ;AAAA,EAEO,UAAU,GAAkB;AAjDvC;AAkDQ,UAAM,cAAc,OAAO,QAAO,YAAO,OAAO,KAAK,KAAK,KAAK,EAAE,KAAK,CAAC,SAAS,KAAK,MAAM,MAAzD,mBAA4D,MAAM,EAAE,KAAK,CAAC,UAAU,MAAM,MAAM;AAClI,QAAI,YAAY,QAAQ,KAAK,OAAO,OAAO;AACvC,WAAK,WAAW,UAAU;AAC1B,WAAK,WAAW,WAAW,IAAI,QAAQ,YAAY,OAAO,CAAC;AAC3D,WAAK,WAAW,OAAO,IAAI,QAAQ,KAAK,OAAO,QAAQ,YAAY,OAAO,KAAK,OAAO,MAAM;AAAA,IAChG,OAAO;AACH,WAAK,WAAW,UAAU;AAAA,IAC9B;AAEA,MAAE,OAAO,KAAK,GAAG;AAAA,EACrB;AACJ;;;ACnDO,IAAM,UAAN,cAAsB,WAAkB;AAAA,EAC3C,IAAI,MAAO,GAAW;AAClB,SAAK,IAAI,MAAM,QAAQ;AAAA,EAC3B;AAAA,EACA,IAAI,SAAU,GAAW;AACrB,SAAK,IAAI,MAAM,WAAW,OAAO,CAAC,IAAE;AAAA,EACxC;AAAA,EACA,IAAI,WAAY,GAAW;AACvB,SAAK,IAAI,MAAM,aAAa,OAAO,CAAC;AAAA,EACxC;AAAA,EACA,IAAI,WAAY,GAAW;AACvB,SAAK,IAAI,MAAM,aAAa;AAAA,EAChC;AAAA,EACA,IAAW,OAAO;AACd,WAAO,KAAK,IAAI;AAAA,EACpB;AAAA,EACA,IAAW,KAAM,GAAW;AACxB,SAAK,IAAI,YAAY,IAAE,IAAE;AAAA,EAC7B;AAAA,EACA,IAAW,QAAS,GAAkC;AAClD,SAAK,IAAI,MAAM,UAAU,EAAE,KAAK,KAAK,IAAE;AAAA,EAC3C;AAAA,EACO,YAAY,OAA0B,CAAC,GAAG;AAC7C,UAAM,OAAO,IAAI;AACjB,SAAK,QAAQ,KAAK;AAClB,SAAK,OAAO,KAAK;AACjB,SAAK,WAAW,KAAK;AACrB,SAAK,aAAa,KAAK;AACvB,SAAK,aAAa,KAAK;AACvB,SAAK,UAAU,KAAK,WAAW,CAAC,GAAE,GAAE,GAAE,CAAC;AAEvC,SAAK,IAAI,MAAM,gBAAgB;AAC/B,SAAK,IAAI,MAAM,aAAa;AAAA,EAEhC;AACJ;;;ACzCO,IAAM,MAAN,MAAM,aAAY,QAAQ;AAAA,EAGtB,cAAe;AAClB,UAAM;AAAA,MACF,MAAM,KAAI,UAAU,CAAC;AAAA,MACrB,UAAU;AAAA,MACV,YAAY;AAAA,MACZ,OAAO;AAAA,MACP,UAAU,IAAI,QAAQ,GAAE,CAAC;AAAA,MACzB,MAAM,IAAI,QAAQ,KAAK,EAAE;AAAA,MACzB,YAAY;AAAA,MACZ,YAAY;AAAA,MACZ,SAAS,CAAC,GAAE,IAAG,GAAE,EAAE;AAAA,IACvB,CAAC;AAbL,SAAQ,SAAiB;AACzB,SAAQ,SAAiB;AAAA,EAazB;AAAA,EAEO,KAAK,EAAC,SAAQ,GAAoB;AACrC,SAAK;AACL,SAAK,UAAQ;AACb,QAAI,KAAK,SAAS,KAAK;AACnB,WAAK,OAAO,KAAI,UAAU,KAAK,MAAM;AACrC,WAAK,SAAS;AACd,WAAK,SAAS;AAAA,IAClB;AAAA,EACJ;AAAA,EAEA,OAAc,UAAU,GAAU;AAC9B,WAAO,GAAG,cAAO,CAAC,GAAC;AAAA,EACvB;AACJ;;;AC3BO,IAAM,YAAN,cAAwB,QAAQ;AAAA,EAE5B,YAAY,MAA2B;AAC1C,UAAM,IAAI;AACV,SAAK,UAAU,KAAK;AACpB,SAAK,IAAI,MAAM,gBAAgB;AAC/B,SAAK,IAAI,MAAM,SAAS;AACxB,SAAK,IAAI,UAAU,KAAK;AAAA,EAC5B;AACJ;;;ACVO,IAAe,OAAf,cAA4B,cAAc;AAAA,EA0B7C,YAAY,OAAuB,CAAC,GAAG;AACnC,UAAM,IAAI;AA1Bd,SAAO,SAAgC,CAAC;AAExC,SAAQ,aAAa;AAAA,MACjB,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,WAAW;AAAA,MACX,aAAa;AAAA,MACb,aAAa;AAAA,MACb,cAAc;AAAA,IAClB;AAEA,SAAO,QAKH;AAAA,MACA,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,SAAS;AAAA,IACb;AAII,SAAK,OAAO;AAAA,EAChB;AAAA,EAEU,SAAS,GAAW,OAAc;AACxC,SAAK,OAAO,CAAC,IAAI;AACjB,SAAK,SAAS,KAAK;AAAA,EACvB;AAAA,EAEO,YAAY,GAAS;AACxB,WAAO,QAAQ,KAAK,MAAM,EAAE,QAAQ,CAAC,CAAC,KAAK,KAAK,MAAI;AAChD,YAAM,SAAS,QAAQ;AACvB,YAAM,UAAU,QAAQ;AACxB,YAAM,MAAI,MAAM,IAAI,UAAU,QAAQ,IAAG;AAAA,IAC7C,CAAC;AAAA,EACL;AAAA,EAEO,QAAQ,GAAkB;AAC7B,QAAI,OAAO,KAAK,KAAK,UAAU,EAAE,SAAS,EAAE,GAAG,GAAE;AAC7C,WAAK,MAAM,KAAK,WAAW,EAAE,GAAmC,CAAC,IAAI;AAAA,IACzE;AAAA,EACJ;AAAA,EAEO,MAAM,GAAkB;AAC3B,QAAI,OAAO,KAAK,KAAK,UAAU,EAAE,SAAS,EAAE,GAAG,GAAE;AAC7C,WAAK,MAAM,KAAK,WAAW,EAAE,GAAmC,CAAC,IAAI;AAAA,IACzE;AAAA,EACJ;AACJ;;;AC1DO,IAAM,wBAAN,cAAoC,aAAa;AAAA,EACpD,YAAY,OAAe;AACvB,UAAM;AAAA,MACF,UAAU,QAAQ;AAAA,MAClB;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAEA,QAAQ;AACJ,SAAK,KAAK,SAAS,QAAQ,EAAE,UAAU,OAAO,KAAK,OAAO,CAAC,GAAG,CAAC,SAAgB;AAC3E,WAAK,OAAO,KAAK,MAAM;AAAA,IAC3B,CAAC;AAAA,EACL;AACJ;;;ACTO,IAAe,QAAf,cAA6B,cAAa;AAAA,EAe7C,YAAY,OAAwB,CAAC,GAAG;AACpC,UAAM,IAAI;AAHd,SAAO,QAAQ;AAIX,SAAK,QAAQ;AAAA,EACjB;AAAA,EAZA,IAAW,OAAgB;AACvB,WAAO,IAAI,QAAQ,KAAK,OAAO,KAAK,MAAM;AAAA,EAC9C;AAAA,EACA,IAAW,KAAK,OAAgB;AAC5B,SAAK,QAAQ,MAAM;AACnB,SAAK,SAAS,MAAM;AAAA,EACxB;AAOJ;;;ACjBO,IAAM,eAAN,cAA2B,YAAY;AAAA,EAU1C,YAAY,MAA8B;AACtC,UAAM,IAAI;AATd,SAAgB,QAAQ;AAUpB,SAAK,SAAS,KAAK;AACnB,SAAK,UAAU,KAAK,WAAW,KAAK;AACpC,SAAK,SAAS,KAAK;AACnB,SAAK,QAAQ,KAAK,SAAS;AAAA,EAC/B;AAAA,EAEO,OAAO,KAAqC;AAC/C,QAAI,YAAY,KAAK,SAAS;AAC9B,QAAI,UAAU;AAEd,QAAI,QAAQ,KAAK,SAAS,GAAG,KAAK,SAAS,GAAG,KAAK,QAAQ,KAAK,SAAQ,KAAK,OAAO,GAAG,IAAI,KAAK,IAAI,KAAK;AACzG,QAAI,KAAK;AACT,QAAI,KAAK,aAAa;AAClB,UAAI,YAAY,KAAK;AACrB,UAAI,cAAc,KAAK,UAAU;AACjC,UAAI,OAAO;AAAA,IACf;AACA,QAAI,UAAU;AAAA,EAClB;AAAA,EAEO,oBAAyC;AAC5C,QAAI,KAAK,gBAAgB;AACrB,YAAM,MAAM,KAAK,KAAK,SAAS,IAAI,qBAAqB,KAAK,SAAS,IAAI,KAAK,QAAQ,KAAK,SAAS,IAAI,KAAK,SAAS,KAAK,SAAS,IAAI,KAAK,QAAQ,KAAK,SAAS,IAAI,KAAK,OAAO;AACpL,WAAK,eAAe,MAAM,QAAQ,CAAC,CAAC,QAAO,KAAK,MAAI;AAChD,YAAI,aAAa,QAAQ,KAAK;AAAA,MAClC,CAAC;AACD,aAAO;AAAA,IACX;AACA,WAAO;AAAA,EACX;AAAA,EACO,oBAAyC;AAC5C,QAAI,KAAK,gBAAgB;AACrB,UAAI,CAAC,KAAK,eAAe,QAAO;AAC5B,aAAK,eAAe,SAAS,QAAQ;AAAA,MACzC;AACA,YAAM,MAAM,KAAK,KAAK,SAAS,IAAI;AAAA,QAC/B,KAAK,SAAS,IAAG,KAAK,eAAe,OAAO;AAAA,QAC5C,KAAK,SAAS,IAAI,KAAK,eAAe,OAAO;AAAA,QAC7C;AAAA,QACA,KAAK,SAAS;AAAA,QACd,KAAK,SAAS;AAAA,QACd,KAAK,IAAI,KAAK,QAAQ,KAAK,OAAO;AAAA,MACtC;AACA,WAAK,eAAe,MAAM,QAAQ,CAAC,CAAC,QAAO,KAAK,MAAI;AAChD,YAAI,aAAa,QAAQ,KAAK;AAAA,MAClC,CAAC;AACD,aAAO;AAAA,IACX;AACA,WAAO;AAAA,EACX;AACJ;;;ACjEO,IAAM,MAAN,cAAkB,aAAa;AAAA,EAIlC,YAAY,QAAiB,OAAe,IAAI;AAC5C,UAAM;AAAA,MACF,gBAAgB;AAAA,QACZ,OAAO,CAAC,CAAC,GAAG,SAAS,GAAG,CAAC,KAAK,OAAO,GAAG,CAAC,KAAK,OAAO,GAAG,CAAC,GAAG,MAAM,CAAE;AAAA,MACxE;AAAA;AAAA,MAEA,QAAQ;AAAA,MACR,SAAS,OAAK;AAAA,MACd,QAAQ;AAAA,IACZ,CAAC;AAZL,SAAgB,YAAY;AAaxB,SAAK,SAAS;AAAA,EAClB;AAAA,EACA,KAAK,KAAsB;AACvB,UAAM,KAAK,GAAG;AACd,SAAK,eAAe,SAAS,IAAI;AAAA,MAC7B,CAAC,KAAK,SAAO,KAAK,IAAI,KAAK,IAAK,KAAK,YAAY,IAAI,IAAI,UAAW,GAAG,GAAE,IAAI;AAAA,MAC7E,CAAC,KAAK,UAAQ,KAAK,IAAI,KAAK,IAAK,KAAK,YAAY,IAAI,IAAI,UAAW,GAAG,GAAE,IAAI;AAAA,IAClF;AAEA,SAAK,WAAW,KAAK,OAAO,SAAS,IAAI,KAAK,MAAM;AAAA,EACxD;AACJ;;;ACzBO,IAAM,OAAN,MAAM,cAAa,aAAa;AAAA,EAcnC,YAAY;AAAA,IACR;AAAA,IACA;AAAA,IACA;AAAA,IACA,YAAY;AAAA,IACZ,eAAe;AAAA,IACf,cAAc,CAAC;AAAA,EACnB,GAOG;AAEC,UAAM;AAAA,MACF,UAAU,IAAI,QAAQ,KAAK,GAAG;AAAA,MAC9B,SAAS,IAAI,SAAS,UAAW,YAAY,gBAAgB;AAAA,MAC7D,OAAO;AAAA,MACP,QAAQ;AAAA,MACR;AAAA,IACJ,CAAC;AAnCL,SAAQ,QAAmB,CAAC;AAK5B,SAAU,SAAkB;AAG5B,SAAO,YAAuB;AA6B1B,SAAK,SAAS;AACd,SAAK,WAAW;AAChB,SAAK,QAAQ;AACb,SAAK,UAAU;AACf,SAAK,YAAY;AACjB,SAAK,eAAe;AAAA,EACxB;AAAA,EAEO,IAAI,OAAe;AACtB,QAAI,KAAK,MAAM;AACX,WAAK,KAAK,IAAI,KAAK;AAAA,IACvB,OAAO;AACH,WAAK,OAAO,IAAI,MAAK,EAAE,QAAQ,KAAK,SAAS,GAAG,UAAU,KAAK,UAAU,OAAO,WAAW,KAAK,WAAW,cAAc,KAAK,cAAc,aAAa,CAAC,EAAE,CAAC;AAC7J,WAAK,KAAK,SAAS,KAAK;AACxB,WAAK,SAAS,KAAK,IAAI;AAAA,IAC3B;AAAA,EACJ;AAAA,EAEO,OAAO,GAAY;AACtB,SAAK,MAAM,KAAK,CAAC;AAEjB,QAAI,KAAK,QAAQ;AACb,WAAK,WAAW,KAAK,MAAM,MAAM,EAAE,MAAM;AACzC,UAAI,KAAK,MAAM;AACX,aAAK,KAAK,OAAO,KAAK,SAAS,MAAM,CAAC;AAAA,MAC1C;AAAA,IAEJ,WAAW,KAAK,MAAM,WAAW,KAAK,IAAI,GAAG,KAAK,MAAO,KAAK,WAAa,KAAK,SAAS,KAAK,QAAS,KAAK,QAAU,CAAC,GAAG;AACtH,WAAK,SAAS;AACd,WAAK,WAAW,KAAK,MAAM,CAAC,EAAE,MAAM;AACpC,WAAK,UAAU;AACf,WAAK,iBAAiB;AAAA,IAE1B,OAAO;AACH,WAAK,UAAU;AAAA,IACnB;AAAA,EACJ;AAAA,EAEO,mBAAmB;AAGtB,UAAM,MAAM,IAAK,KAAK,SAAS,KAAK;AACpC,UAAM,IAAK,MAAM;AACjB,UAAM,IAAK;AAAA,MACP,SAAS;AAAA,QACL,CAAC,KAAK,QAAQ,UAAC,WAAU,YAAG,KAAI;AAAA,QAChC,CAAC,MAAM,QAAQ,UAAC,cAAa,YAAG,KAAI;AAAA,MACxC;AAAA,MACA,OAAO;AAAA,QACH,CAAC,KAAK,kBAAkB,YAAG,KAAI;AAAA,QAC/B,CAAC,MAAM,oBAAoB,YAAG,KAAI;AAAA,MACtC;AAAA,MACA,MAAM;AAAA,QACF,CAAC,KAAK,OAAO;AAAA,QACb,CAAC,MAAM,OAAO;AAAA,MAClB;AAAA,IACJ,EAA8C,KAAK,MAAM;AAEzD,MAAE;AAAA,MACE,CAAC,MAAM,OAAO;AAAA,MACd,CAAC,OAAQ,IAAI,OAAO,MAAM,OAAO;AAAA,MACjC,CAAC,OAAQ,IAAI,OAAO,MAAM,WAAW;AAAA,MACrC,CAAC,GAAG,WAAW;AAAA,IACnB;AAEA,SAAK,iBAAiB;AAAA,MAClB,OAAO;AAAA,MACP,QAAQ,IAAI,QAAQ,KAAK,KAAK,KAAK,GAAG;AAAA,IAC1C;AAAA,EACJ;AACJ;;;AC1GO,IAAM,QAAN,cAAoB,KAAK;AAAA,EAK5B,YAAY;AAAA,IACR,WAAW,QAAQ;AAAA,IACnB,SAAS;AAAA,IACT,WAAW;AAAA,IACX,YAAY;AAAA,IACZ,eAAe;AAAA,IACf,SAAS;AAAA,IACT,cAAc,CAAC;AAAA,EACnB,IAQI,CAAC,GAAG;AAEJ,UAAM,EAAE,QAAQ,GAAG,UAAU,OAAO,QAAQ,aAAa,WAAW,YAAY,IAAI,aAAa,CAAC;AAClG,SAAK,WAAW;AAChB,SAAK,WAAW;AAChB,SAAK,SAAS;AAAA,EAClB;AAAA,EAEA,QAAQ;AACJ,SAAK,SAAS;AACd,SAAK,UAAU;AACf,SAAK,SAAS,KAAK,WAAW;AAC9B,SAAK,UAAU,KAAK;AACpB,SAAK,cAAc;AACnB,SAAK,SAAS;AAEd,aAAS,QAAQ,GAAG,QAAQ,KAAK,OAAO,SAAS;AAC7C,WAAK,IAAI,KAAK,KAAK;AAAA,IACvB;AAEA,SAAK,SAAS,IAAI,IAAI,IAAI,QAAQ,CAAC,KAAK,WAAW,MAAM,CAAC,KAAK,WAAW,GAAG,GAAG,KAAK,WAAW,GAAG,GAAG,IAAI;AAC1G,SAAK,SAAS,IAAI,IAAI,IAAI,QAAQ,KAAK,WAAW,MAAM,CAAC,KAAK,WAAW,GAAG,GAAG,KAAK,WAAW,GAAG,GAAG,IAAI;AAAA,EAE7G;AAAA,EAEO,KAAK,KAAuB;AAC/B,UAAM,KAAK,GAAG;AAEd,QAAI,KAAK,MAAM;AACX,WAAK,KAAK,OAAO,KAAK,SAAS,MAAM,CAAC;AAAA,IAC1C;AAAA,EACJ;AAAA,EAEO,WAAW;AACd,QAAI,KAAK,WAAW,WAAW;AAC3B,WAAK,YAAY;AACjB,WAAK,iBAAiB;AAAA,QAClB,OAAO;AAAA,UACH,CAAC,GAAK,iBAAiB;AAAA,UACvB,CAAC,KAAK,mBAAmB;AAAA,UACzB,CAAC,KAAK,oBAAoB;AAAA,UAC1B,CAAC,KAAK,mBAAmB;AAAA,UACzB,CAAC,KAAK,oBAAoB;AAAA,UAC1B,CAAC,KAAK,oBAAoB;AAAA,UAC1B,CAAC,KAAK,oBAAoB;AAAA,UAC1B,CAAC,KAAK,mBAAmB;AAAA,UACzB,CAAC,KAAK,oBAAoB;AAAA,UAC1B,CAAC,KAAK,mBAAmB;AAAA,UACzB,CAAC,GAAK,iBAAiB;AAAA,QAC3B;AAAA,QACA,OAAO;AAAA,MACX;AAAA,IAEJ,WAAW,KAAK,WAAW,QAAQ;AAC/B,WAAK,YAAY;AACjB,WAAK,iBAAiB;AAAA,QAClB,OAAO;AAAA,UACH,CAAC,GAAK,iBAAiB;AAAA,UACvB,CAAC,KAAK,mBAAmB;AAAA,UACzB,CAAC,KAAK,oBAAoB;AAAA,UAC1B,CAAC,KAAK,mBAAmB;AAAA,UACzB,CAAC,KAAK,oBAAoB;AAAA,UAC1B,CAAC,KAAK,oBAAoB;AAAA,UAC1B,CAAC,KAAK,oBAAoB;AAAA,UAC1B,CAAC,KAAK,mBAAmB;AAAA,UACzB,CAAC,KAAK,oBAAoB;AAAA,UAC1B,CAAC,KAAK,mBAAmB;AAAA,UACzB,CAAC,GAAK,iBAAiB;AAAA,QAC3B;AAAA,MACJ;AAAA,IAEJ,WAAW,KAAK,WAAW,SAAS;AAChC,WAAK,YAAY;AACjB,WAAK,iBAAiB;AAAA,QAClB,OAAO;AAAA,UACH,CAAC,GAAG,qBAAqB,YAAG,KAAI;AAAA,UAChC,CAAC,GAAG,oBAAoB,YAAG,KAAI;AAAA,QACnC;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACJ;;;AC5GO,IAAM,mBAAN,cAA+B,cAAc;AAAA,EAGzC,YAAY,OAAgC,CAAC,GAAG;AACnD,UAAM,IAAI;AAHd,SAAO,OAA0B;AAAA,EAIjC;AAAA,EAEO,OAAO,GAAmC;AAAA,EAEjD;AAAA,EACO,UAAU,GAAe;AAAA,EAEhC;AAAA,EACO,QAAQ,GAAkB;AAAA,EAEjC;AAAA,EACO,MAAM,GAAkB;AAAA,EAE/B;AACJ;;;ACjBO,IAAM,SAAN,cAAqB,iBAAiB;AAAA,EAKzC,YAAY,QAAgB;AACxB,UAAM;AALV,SAAQ,WAAoB,IAAI,QAAQ,IAAI,CAAC;AAC7C,SAAQ,WAAoB;AAKxB,SAAK,SAAS;AAAA,EAClB;AAAA,EAEO,KAAK,KAAuB;AAC/B,UAAM,KAAK,GAAG;AAEd,SAAK,aAAa;AAClB,SAAK,WAAW;AAAA,EACpB;AAAA,EAEA,aAAa;AACT,QAAI,KAAK,OAAO,SAAS,IAAI,KAAK,QAAQ,EAAE,IAAI,KAAK,MAAM,QAAQ,KAAK,QAAQ;AAC5E,WAAK,SAAS,IAAK,CAAC,KAAK,SAAS,IAAI;AAAA,IAC1C,WAAW,KAAK,OAAO,SAAS,IAAI,KAAK,QAAQ,EAAE,IAAK,KAAK,QAAS;AAClE,WAAK,SAAS,IAAK,CAAC,KAAK,SAAS,IAAI;AAAA,IAC1C;AAEA,QAAI,KAAK,UAAS;AACd,WAAK,OAAO,SAAS,KAAK,KAAK,SAAS;AAAA,IAC5C,OAAO;AACH,WAAK,SAAS,KAAG;AACjB,WAAK,OAAO,SAAS,KAAK,KAAK,SAAS;AAAA,IAC5C;AAAA,EACJ;AAAA,EAEA,eAAe;AACX,QAAI,KAAK,UAAU;AACf,UAAI,KAAK,OAAO,SAAS,IAAI,KAAK,QAAQ,EAAE,IAAI,KAAK,MAAM,SAAS,KAAK,QAAQ;AAC7E,YAAI,KAAK,SAAS,IAAI,GAAG;AACrB,eAAK,SAAS,IAAK,CAAC,KAAK,SAAS,IAAK;AAAA,QAC3C,OAAO;AACH,eAAK,KAAK;AACV;AAAA,QACJ;AAAA,MACJ;AACA,WAAK,SAAS,KAAK;AACnB,WAAK,OAAO,SAAS,KAAK,KAAK,SAAS;AAAA,IAC5C;AAAA,EACJ;AAAA,EAEA,OAAO;AACH,SAAK,OAAO,SAAS,IAAI,KAAK,MAAM,SAAS,KAAK;AAClD,SAAK,WAAW;AAAA,EACpB;AACJ;;;ACjDO,IAAM,eAAN,cAA2B,MAAM;AAAA,EAAjC;AAAA;AACH,SAAO,QAAQ,IAAI,QAAQ,KAAK,GAAG;AACnC,SAAO,aAAa,IAAI,sBAAsB,OAAO;AACrD,SAAO,SAAS;AAChB,SAAO,QAAQ;AAAA;AAAA,EAEf,QAAO;AACH,SAAK,KAAK,SAAS,QAAQ,EAAE,UAAU,OAAO,KAAK,OAAO,CAAC,GAAG,CAAC,SAAgB;AAC3E,WAAK,QAAQ,KAAK;AAClB,WAAK,SAAS,KAAK;AAAA,IACvB,CAAC;AACD,SAAK,SAAS,KAAK,UAAU;AAC7B,SAAK,SAAS,IAAI,MAAM,EAAE,UAAU,KAAK,OAAO,QAAQ,IAAI,UAAU,GAAG,QAAQ,WAAW,aAAa,CAAC,IAAI,OAAO,GAAG,CAAC,EAAE,CAAC,CAAC;AAAA,EACjI;AAEJ;;;AChBO,IAAM,iCAAN,cAA6C,aAAa;AAAA,EAE7D,YAAY,gBAAgC;AACxC,UAAM;AAAA,MACF,UAAU,QAAQ;AAAA,MAClB;AAAA,IACJ,CAAC;AALL,SAAO,YAAY;AAAA,EAMnB;AAAA,EAEA,QAAQ;AACJ,SAAK,KAAK,SAAS,QAAQ,EAAE,UAAU,OAAO,KAAK,OAAO,CAAC,GAAG,CAAC,SAAkB;AAC7E,WAAK,OAAO,KAAK,MAAM;AAAA,IAC3B,CAAC;AAAA,EACL;AACJ;;;ACfO,IAAM,SAAN,cAAqB,iBAAiB;AAAA,EAOzC,YAAY,QAAgB,YAAqB,QAAQ,IAAI;AACzD,UAAM;AAPV,SAAQ,QAAQ,IAAI,QAAQ,GAAG,CAAC;AAChC,SAAQ,YAAY,QAAQ;AAC5B,SAAQ,WAAmB,KAAK,OAAO;AACvC,SAAQ,cAAsB;AAK1B,SAAK,SAAS;AACd,SAAK,YAAY;AAAA,EACrB;AAAA,EAEO,KAAK,KAAuB;AAC/B,UAAM,KAAK,GAAG;AAEd,SAAK,WAAW,KAAK,IAAI,KAAK,IAAI,KAAK,YAAa,KAAK,OAAO,IAAI,IAAK,KAAK,GAAG,KAAK,WAAW,GAAG,CAAC,KAAK,WAAW;AACrH,SAAK,YAAY,KAAK,UAAU,OAAO,KAAK,WAAW,GAAG;AAC1D,SAAK,OAAO,WAAW,KAAK,OAAO,SAAS,IAAI,KAAK,MAAM,SAAS,KAAK,SAAS,EAAE,MAAM,IAAI,WAAW,EAAE,CAAC;AAE5G,QAAI,KAAK,OAAO,SAAS,IAAI,KAAK,MAAM,QAAQ,KAAK,QAAQ;AACzD,WAAK,OAAO,SAAS,IAAI,CAAC,KAAK;AAAA,IACnC;AACA,QAAI,KAAK,OAAO,SAAS,IAAI,KAAK,MAAM,SAAS,KAAK,QAAQ;AAC1D,WAAK,OAAO,SAAS,IAAI,CAAC,KAAK;AAAA,IACnC;AACA,QAAI,KAAK,OAAO,SAAS,IAAI,CAAC,KAAK,QAAQ;AACvC,WAAK,OAAO,SAAS,IAAI,KAAK,MAAM,QAAQ,KAAK;AAAA,IACrD;AACA,QAAI,KAAK,OAAO,SAAS,IAAI,CAAC,KAAK,QAAQ;AACvC,WAAK,OAAO,SAAS,IAAI,KAAK,MAAM,SAAS,KAAK;AAAA,IACtD;AAAA,EACJ;AACJ;;;AC/BO,IAAM,aAAN,cAAyB,MAAM;AAAA,EAA/B;AAAA;AACH,SAAO,QAAQ,IAAI,QAAQ,KAAK,GAAG;AACnC,SAAO,aAAa,IAAI,+BAA+B;AAAA,MACnD,OAAO,CAAC,CAAC,GAAG,QAAQ,GAAG,CAAC,GAAG,MAAM,CAAC;AAAA,IACtC,CAAC;AACD,SAAO,SAAS;AAChB,SAAO,QAAQ;AAAA;AAAA,EAEf,QAAQ;AACJ,SAAK,KAAK,SAAS,QAAQ,EAAE,UAAU,OAAO,KAAK,OAAO,CAAC,GAAG,CAAC,SAAkB;AAC7E,WAAK,QAAQ,KAAK;AAClB,WAAK,SAAS,KAAK;AAAA,IACvB,CAAC;AACD,SAAK,SAAS,KAAK,UAAU;AAE7B,SAAK,SAAS,IAAI,MAAM;AAAA,MACpB,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,WAAW;AAAA,MACX,cAAc;AAAA,MACd,UAAU,IAAI,QAAQ,IAAI,KAAK,GAAG;AAAA,MAClC,aAAa,CAAC,IAAI,OAAO,KAAK,QAAQ,IAAI,CAAC;AAAA,IAC/C,CAAC,CAAC;AACF,SAAK,SAAS,IAAI,MAAM;AAAA,MACpB,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,UAAU,IAAI,QAAQ,IAAI,KAAK,GAAG;AAAA,MAClC,aAAa,CAAC,IAAI,OAAO,KAAK,QAAQ,KAAK,CAAC;AAAA,IAChD,CAAC,CAAC;AACF,SAAK,SAAS,IAAI,MAAM;AAAA,MACpB,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,UAAU,IAAI,QAAQ,KAAK,QAAQ,KAAK,GAAG;AAAA,MAC3C,QAAQ;AAAA,MACR,aAAa,CAAC,IAAI,OAAO,KAAK,QAAQ,IAAI,CAAC;AAAA,IAC/C,CAAE,CAAC;AAAA,EASP;AAEJ;;;AChDO,IAAM,QAAN,cAAoB,MAAM;AAAA,EAA1B;AAAA;AAEH,SAAO,QAAQ,IAAI,QAAQ,KAAK,GAAG;AACnC,SAAO,aAAa,IAAI,sBAAsB,UAAU;AACxD,SAAO,SAAS;AAChB,SAAO,QAAQ;AAAA;AAAA,EAEf,QAAQ;AACJ,SAAK,SAAS,KAAK,UAAU;AAAA,EACjC;AAEJ;;;ACXO,IAAM,cAAN,cAA0B,iBAAiB;AAAA,EAK9C,YAAY,YAAqB,QAAQ,IAAI;AACzC,UAAM;AALV,SAAQ,QAAQ,IAAI,QAAQ,GAAG,CAAC;AAChC,SAAQ,YAAY,QAAQ;AAKxB,SAAK,YAAY;AAAA,EACrB;AAAA,EAEO,KAAK,KAAuB;AAC/B,UAAM,KAAK,GAAG;AAEd,QAAI,KAAK,QAAQ;AACb,YAAM,IAAI,KAAK,OAAO,SAAS,KAAK,OAAO,QAAQ,EAAE,MAAM,IAAG,KAAK,KAAK,KAAK,UAAU,MAAM;AAE7F,UAAI,IAAI,KAAK,MAAM,IAAI,GAAE;AACrB,aAAK,YAAY,KAAK,UAAU,OAAO,KAAK,KAAG,GAAG;AAAA,MACtD,OAAO;AACH,aAAK,YAAY,KAAK,UAAU,OAAO,CAAC,KAAK,KAAG,GAAG;AAAA,MACvD;AACA,WAAK,OAAO,WAAW,KAAK,OAAO,SAAS,IAAI,KAAK,UAAU,SAAS,KAAK,KAAK,EAAE,MAAM,IAAI,WAAW,EAAE,CAAC;AAAA,IAChH;AAAA,EACJ;AAAA,EAEA,UAAU,GAAc;AACpB,UAAM,UAAU,CAAC;AACjB,SAAK,SAAS,IAAI,QAAQ,EAAE,SAAS,EAAE,OAAO;AAAA,EAClD;AACJ;;;AC3BO,IAAM,cAAN,cAA0B,MAAM;AAAA,EAAhC;AAAA;AACH,SAAO,QAAQ,IAAI,QAAQ,KAAK,GAAG;AACnC,SAAO,aAAa,IAAI,+BAA+B;AAAA,MACnD,OAAO,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,GAAG,MAAM,CAAC;AAAA,IACnC,CAAC;AACD,SAAO,SAAS;AAChB,SAAO,QAAQ;AAAA;AAAA,EAEf,QAAQ;AACJ,SAAK,KAAK,SAAS,QAAQ,EAAE,UAAU,OAAO,KAAK,OAAO,CAAC,GAAG,CAAC,SAAkB;AAC7E,WAAK,QAAQ,KAAK;AAClB,WAAK,SAAS,KAAK;AAAA,IACvB,CAAC;AAED,SAAK,SAAS,KAAK,UAAU;AAC7B,SAAK,SAAS,IAAI,MAAM,EAAE,UAAU,KAAK,OAAO,QAAQ,IAAI,UAAU,GAAG,QAAQ,WAAW,aAAa,CAAC,IAAI,YAAY,CAAC,EAAE,CAAC,CAAC;AAAA,EACnI;AACJ;;;ACfO,IAAM,YAAN,cAAwB,KAAI;AAAA,EACxB,cAAc;AACjB,UAAM,EAAC,QAAQ,KAAI,CAAC;AACpB,SAAK,IAAI,YAAY,IAAI,UAAU;AAAA,MAC/B,MAAM;AAAA,MACN,UAAU;AAAA,MACV,YAAY;AAAA,MACZ,OAAO;AAAA,MACP,UAAU,IAAI,QAAQ,GAAE,EAAE;AAAA,MAC1B,MAAM,IAAI,QAAQ,KAAK,EAAE;AAAA,MACzB,YAAY;AAAA,MACZ,YAAY;AAAA,MACZ,SAAS,CAAC,GAAE,IAAG,GAAE,EAAE;AAAA,MACnB,SAAS,MAAI;AACT,aAAK,KAAK,YAAY,OAAO;AAAA,MACjC;AAAA,IACJ,CAAC,CAAC;AACF,SAAK,IAAI,YAAY,IAAI,UAAU;AAAA,MAC/B,MAAM;AAAA,MACN,UAAU;AAAA,MACV,YAAY;AAAA,MACZ,OAAO;AAAA,MACP,UAAU,IAAI,QAAQ,KAAI,EAAE;AAAA,MAC5B,MAAM,IAAI,QAAQ,KAAK,EAAE;AAAA,MACzB,YAAY;AAAA,MACZ,YAAY;AAAA,MACZ,SAAS,CAAC,GAAE,IAAG,GAAE,EAAE;AAAA,MACnB,SAAS,MAAI;AACT,aAAK,KAAK,YAAY,QAAQ;AAAA,MAClC;AAAA,IACJ,CAAC,CAAC;AAAA,EACN;AAAA,EAEA,QAAO;AACH,SAAK,SAAS,SAAS,IAAI,WAAW,CAAC;AACvC,SAAK,SAAS,UAAU,IAAI,aAAa,CAAC;AAC1C,SAAK,SAAS,UAAU,IAAI,YAAY,CAAC;AACzC,SAAK,SAAS,SAAS,IAAI,MAAM,CAAC;AAClC,SAAK,YAAY,OAAO;AAAA,EAC5B;AACJ;;;AC5CO,IAAM,SAAN,MAAa;AAAA,EAAb;AACH,SAAQ,YAA8B,CAAC;AAAA;AAAA,EAEvC,IAAW,YAAY;AACnB,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,IAAW,UAAU;AACjB,WAAO,KAAK;AAAA,EAChB;AAAA,EAGQ,OAAO,MAAc;AACzB,SAAK,QAAQ;AACb,SAAK,QAAQ;AACb,WAAO,sBAAsB,KAAK,MAAM,KAAK,IAAI,CAAC;AAAA,EACtD;AAAA,EACQ,MAAM,WAAmB;AAC7B,UAAM,WAAW,YAAY,KAAK;AAClC,SAAK,QAAQ,YAAY,KAAK;AAC9B,SAAK,QAAQ;AAEb,UAAM,IAAI;AAAA,MACN;AAAA,MACA,OAAO,KAAK;AAAA,IAChB;AAEA,SAAK,UAAU,QAAQ,CAAC,MAAM;AAC1B,QAAE,CAAC;AAAA,IACP,CAAC;AAED,WAAO,sBAAsB,KAAK,MAAM,KAAK,IAAI,CAAC;AAAA,EACtD;AAAA,EAEO,QAAQ;AACX,WAAO,sBAAsB,KAAK,OAAO,KAAK,IAAI,CAAC;AAAA,EACvD;AAAA,EAEO,IAAI,UAA0B;AACjC,SAAK,UAAU,KAAK,QAAQ;AAAA,EAChC;AACJ;;;AC5CO,IAAM,QAAN,MAAe;AAAA,EAGlB,YAAY,IAAY;AADxB,SAAQ,cAAgD,CAAC;AAErD,SAAK,KAAK;AAAA,EACd;AAAA,EAEO,UAAU,KAAa,MAAwB;AAClD,SAAK,YAAY,GAAG,IAAI;AAAA,EAC5B;AAAA,EAEO,MAAM,GAAM;AACf,WAAO,OAAO,KAAK,WAAW,EAAE,QAAQ,CAAC,MAAM;AAC3C,QAAE,CAAC;AAAA,IACP,CAAC;AAAA,EACL;AACJ;;;ACNO,IAAM,QAAN,MAAY;AAAA,EAGR,YAAY,MAAY;AAC3B,SAAK,OAAO;AACZ,SAAK,SAAS,KAAK,SAAS;AAC5B,SAAK,OAAO,iBAAiB,aAAa,KAAK,UAAU,KAAK,IAAI,CAAC;AACnE,SAAK,OAAO,iBAAiB,WAAW,KAAK,QAAQ,KAAK,IAAI,CAAC;AAC/D,SAAK,OAAO,iBAAiB,SAAS,KAAK,MAAM,KAAK,IAAI,CAAC;AAAA,EAE/D;AAAA,EAEO,UAAU,GAAe;AAC5B,SAAK,UAAU,aAAa,KAAK,KAAK,UAAU,CAAC;AAAA,EACrD;AAAA,EAEO,QAAQ,GAAkB;AAC7B,SAAK,UAAU,WAAW,KAAK,KAAK,UAAU,CAAC;AAAA,EACnD;AAAA,EAEO,MAAM,GAAkB;AAC3B,SAAK,UAAU,SAAS,KAAK,KAAK,UAAU,CAAC;AAAA,EACjD;AAAA,EAEQ,UAAU,OAAmB,SAAwB,GAA6B;AACtF,QAAI,QAAQ,QAAQ;AAChB,UAAI,QAAQ,KAAK,GAAG;AAChB,YAAI,UAAU,aAAa;AACvB,kBAAQ,KAAK,EAAE,CAAe;AAAA,QAClC,OAAO;AACH,kBAAQ,KAAK,EAAE,CAAkB;AAAA,QACrC;AAAA,MACJ;AACA,cAAQ,cAAc,QAAQ,CAAC,UAAU,KAAK,UAAU,OAAO,OAAO,CAAC,CAAC;AACxE,cAAQ,YAAY,QAAQ,CAAC,UAAU,KAAK,UAAU,OAAO,OAAO,CAAC,CAAC;AAAA,IAC1E;AAAA,EACJ;AACJ;;;AC1CO,IAAM,cAAN,cAA0B,cAAc;AAAA,EAc3C,YAAY,MAA6B;AACrC,UAAM,IAAI;AAdd,SAAO,OAAO;AAeV,SAAK,UAAU,KAAK;AAAA,EACxB;AAAA,EAbA,IAAW,QAAQ;AAAE,WAAO,KAAK,QAAQ,KAAK;AAAA,EAAG;AAAA,EACjD,IAAW,MAAM,OAAe;AAC5B,SAAK,QAAQ,KAAK,IAAI;AAAA,EAC1B;AAAA,EAEA,IAAW,SAAS;AAAE,WAAO,KAAK,QAAQ,KAAK;AAAA,EAAG;AAAA,EAClD,IAAW,OAAO,OAAe;AAC7B,SAAK,QAAQ,KAAK,IAAI;AAAA,EAC1B;AAAA,EAOO,OAAO,KAA+B;AACzC,QAAI,KAAK,QAAQ,OAAM;AACnB,UAAI,UAAU,KAAK,QAAQ,OAAO,KAAK,SAAS,GAAG,KAAK,SAAS,GAAG,KAAK,QAAQ,OAAO,KAAK,QAAQ,MAAM;AAAA,IAC/G;AAAA,EACJ;AACJ;;;ACxBO,IAAM,eAAN,MAAmB;AAAA,EAYtB,YAAY,MAA8B;AAF1C,SAAO,QAAiB;AAGpB,SAAK,SAAS,KAAK;AACnB,SAAK,WAAW,IAAI,MAAM;AAC1B,SAAK,SAAS,MAAM,KAAK;AACzB,SAAK,SAAS,SAAS,MAAM;AACzB,UAAI,KAAK,QAAQ;AACb,aAAK,QAAQ;AAAA,MACjB,OAAO;AACH,aAAK,OAAO,KAAK,QAAQ;AAAA,MAC7B;AAAA,IACJ;AAAA,EACJ;AAAA,EApBA,IAAW,OAAgB;AACvB,WAAO,IAAI,QAAQ,KAAK,OAAO,KAAK,MAAM;AAAA,EAC9C;AAAA,EACA,IAAW,QAAQ;AAAE,WAAO,KAAK,MAAM;AAAA,EAAO;AAAA,EAC9C,IAAW,SAAS;AAAE,WAAO,KAAK,MAAM;AAAA,EAAQ;AAAA,EAkBtC,UAAU;AAChB,UAAM,KAAK,SAAS,cAAc,QAAQ;AAC1C,OAAG,QAAQ,KAAK,SAAS;AACzB,OAAG,SAAS,KAAK,SAAS;AAC1B,UAAM,QAAQ,GAAG,WAAW,MAAM,EAAE,OAAO,KAAI,CAAC;AAEhD,UAAM,UAAU,KAAK,UAAU,GAAG,GAAG,KAAK,SAAS,OAAO,KAAK,SAAS,MAAM;AAE9E,UAAM,KAAK,SAAS,cAAc,QAAQ;AAC1C,OAAG,QAAQ,KAAK,SAAS,KAAK,SAAS;AACvC,OAAG,SAAS,KAAK,SAAS,KAAK,SAAS;AACxC,UAAM,QAAQ,GAAG,WAAW,IAAI;AAEhC,aAAS,IAAI,GAAG,IAAI,KAAK,SAAS,OAAO,KAAK;AAC1C,eAAS,IAAI,GAAG,IAAI,KAAK,SAAS,QAAQ,KAAK;AAC3C,cAAM,IAAI,MAAM,aAAa,GAAG,GAAG,GAAG,CAAC,EAAE,KAAK,KAAK,GAAG;AACtD,cAAM,YAAY,QAAQ,UAAC;AAC3B,cAAM;AAAA,UACF,IAAI,KAAK;AAAA,UACT,IAAI,KAAK;AAAA,UACT,KAAK;AAAA,UACL,KAAK;AAAA,QACT;AAAA,MACJ;AAAA,IACJ;AAEA,UAAM,OAAO,IAAI,MAAM;AACvB,SAAK,MAAM,GAAG,UAAU;AAExB,SAAK,SAAS,MAAM;AAChB,WAAK,OAAO,IAAI;AAAA,IACpB;AAAA,EACJ;AAAA,EAEU,OAAO,GAAqB;AAClC,SAAK,QAAQ;AACb,SAAK,QAAQ;AAAA,EACjB;AAEJ;;;AChDO,IAAM,aAAN,MAAM,oBAAmB,cAAc;AAAA,EAmB1C,YAAY,OAA6B,CAAC,GAAG;AACzC,UAAM,IAAI;AAnBd,SAAO,OAAO;AAMd,SAAO,QAAiB;AACxB,SAAQ,UAAwC,CAAC;AAa7C,SAAK,QAAQ,KAAK,SAAS;AAC3B,SAAK,SAAS,KAAK,UAAU;AAC7B,SAAK,SAAS,KAAK,UAAU;AAC7B,SAAK,OAAO,KAAK;AAEjB,gBAAW,aAAa,KAAK,IAAI,EAAE,KAAK,KAAK,WAAW,KAAK,IAAI,CAAC;AAAA,EACtE;AAAA,EAjBA,IAAW,iBAA0B;AACjC,WAAO,IAAI,QAAQ,KAAK,OAAO,KAAK,MAAM;AAAA,EAC9C;AAAA,EAEA,IAAW,eAAe,OAAgB;AACtC,SAAK,QAAQ,MAAM;AACnB,SAAK,SAAS,MAAM;AAAA,EACxB;AAAA,EAYQ,WAAW,EAAE,SAAS,MAAM,GAAkD;AAClF,YAAQ,QAAQ,CAAC,WAAW;AACxB,UAAI,MAAM,KAAK,CAAC,SAAS,OAAO,SAAS,KAAK,IAAI,GAAE;AAChD,aAAK,QAAQ,OAAO,IAAI,IAAI,IAAI,aAAa;AAAA,UACzC,KAAK,OAAO;AAAA,UACZ,QAAQ,KAAK;AAAA,QACjB,CAAC;AAAA,MACL;AAAA,IAEJ,CAAC;AACD,UAAM,QAAQ,CAAC,WAAW;AACtB,WAAK,SAAS,IAAI,YAAY;AAAA,QAC1B,UAAU,IAAI;AAAA,UACV,OAAO,IAAI,KAAK,SAAS;AAAA,WACxB,KAAK,SAAS,OAAO,KAAK,KAAK,SAAS;AAAA,QAC7C;AAAA,QACA,OAAO,KAAK,QAAQ,OAAO,IAAI;AAAA,MACnC,CAAC,CAAC;AAAA,IACN,CAAC;AAAA,EACL;AAAA,EAEA,aAAqB,aAAa,KAA2B;AACzD,UAAM,WAAW,MAAM,MAAM,GAAG;AAChC,UAAM,OAAO,MAAM,SAAS,KAAK;AACjC,WAAO;AAAA,EACX;AAAA,EAEO,OAAO,GAAmC;AAAA,EAEjD;AAEJ;;;ACzEO,IAAM,YAAN,cAAwB,MAAM;AAAA,EAA9B;AAAA;AACH,SAAQ,OAAO;AAEf,SAAO,QAAQ,IAAI,QAAQ,MAAM,IAAI;AACrC,SAAO,aAAa,IAAI,sBAAsB,SAAS;AACvD,SAAO,SAAS,KAAG,KAAK,OAAK;AAC7B,SAAO,QAAQ,KAAG,KAAK,OAAK;AAAA;AAAA,EAE5B,QAAQ;AACJ,SAAK,SAAS,KAAK,UAAU;AAC7B,SAAK,SAAS,IAAI,WAAW,EAAC,MAAM,gCAAgC,OAAO,IAAI,QAAQ,IAAI,QAAQ,KAAK,KAAI,CAAC,CAAC;AAC9G,SAAK,SAAS,IAAI,WAAW,EAAC,MAAM,gCAAgC,OAAO,IAAI,QAAQ,IAAI,QAAQ,KAAK,KAAI,CAAC,CAAC;AAC9G,SAAK,SAAS,IAAI,WAAW,EAAC,MAAM,oCAAoC,OAAO,IAAI,QAAQ,IAAI,QAAQ,KAAK,KAAI,CAAC,CAAC;AAClH,SAAK,SAAS,IAAI,WAAW,EAAC,MAAM,gCAAgC,OAAO,IAAI,QAAQ,IAAI,QAAQ,KAAK,KAAI,CAAC,CAAC;AAC9G,SAAK,SAAS,IAAI,MAAM;AAAA,MACpB,UAAU,KAAK;AAAA,MACf,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,WAAW;AAAA,MACX,cAAc;AAAA,MACd,QAAQ;AAAA,MACR,aAAa,CAAE,IAAK,OAAO,KAAK,QAAQ,IAAI,CAAC;AAAA,IACjD,CAAC,CAAC;AAAA,EACN;AACJ;;;AC7BO,IAAM,UAAN,cAAsB,KAAI;AAAA,EACtB,cAAc;AACjB,UAAM,EAAC,QAAQ,KAAI,CAAC;AAAA,EACxB;AAAA,EAEA,QAAO;AACH,SAAK,SAAS,aAAa,IAAI,UAAU,CAAC;AAC1C,SAAK,YAAY,WAAW;AAAA,EAChC;AAAA,EAEA,KAAK,KAA6B;AAC9B,UAAM,KAAK,GAAG;AAAA,EAClB;AACJ;;;ACLO,IAAM,OAAN,cAAmB,cAAc;AAAA,EAU7B,cAAe;AAClB,UAAM,EAAC,QAAQ,KAAI,CAAC;AAPxB,SAAO,QAA8B,CAAC;AACtC,SAAO,OAAO;AAEd,SAAO,SAAS;AAKZ,SAAK,OAAO;AACZ,SAAK,SAAS,IAAI,MAAM,QAAQ,CAAC;AACjC,WAAO,iBAAiB,UAAU,MAAI;AAAC,WAAK,OAAO;AAAA,IAAC,CAAC;AAGrD,SAAK,MAAM;AACX,SAAK,OAAO;AAAA,EAChB;AAAA,EACA,QAAQ;AAEJ,SAAK,WAAW,IAAI,SAAS;AAC7B,SAAK,SAAS,KAAK,QAAQ;AAE3B,SAAK,WAAW;AAEhB,SAAK,SAAS,IAAI,OAAO;AACzB,SAAK,OAAO,IAAI,KAAK,KAAK,KAAK,IAAI,CAAC;AAEpC,SAAK,QAAQ,IAAI,MAAM,IAAI;AAE3B,SAAK,MAAM;AACX,SAAK,MAAM;AACX,SAAK,OAAO;AAAA,EAChB;AAAA,EAEQ,aAAa;AACjB,SAAK,QAAQ,UAAU,IAAI,UAAU,CAAC;AACtC,SAAK,QAAQ,WAAW,IAAI,QAAQ,CAAC;AAErC,SAAK,IAAI,YAAY,IAAI,UAAU;AAAA,MAC/B,MAAM;AAAA,MACN,UAAU;AAAA,MACV,YAAY;AAAA,MACZ,OAAO;AAAA,MACP,UAAU,IAAI,QAAQ,KAAK,CAAC;AAAA,MAC5B,MAAM,IAAI,QAAQ,IAAI,EAAE;AAAA,MACxB,YAAY;AAAA,MACZ,YAAY;AAAA,MACZ,SAAS,CAAC,GAAG,IAAI,GAAG,EAAE;AAAA,MACtB,SAAS,MAAM;AACX,aAAK,WAAW,SAAS;AAAA,MAC7B;AAAA,IACJ,CAAC,CAAC;AACF,SAAK,IAAI,YAAY,IAAI,UAAU;AAAA,MAC/B,MAAM;AAAA,MACN,UAAU;AAAA,MACV,YAAY;AAAA,MACZ,OAAO;AAAA,MACP,UAAU,IAAI,QAAQ,KAAK,CAAC;AAAA,MAC5B,MAAM,IAAI,QAAQ,KAAK,EAAE;AAAA,MACzB,YAAY;AAAA,MACZ,YAAY;AAAA,MACZ,SAAS,CAAC,GAAG,IAAI,GAAG,EAAE;AAAA,MACtB,SAAS,MAAM;AACX,aAAK,WAAW,QAAQ;AAAA,MAC5B;AAAA,IACJ,CAAC,CAAC;AAEF,SAAK,WAAW,QAAQ;AAAA,EAC5B;AAAA,EAEA,SAAS;AACL,SAAK,KAAK,SAAS,QAAQ,EAAE,MAAM,IAAI,QAAQ,SAAS,KAAK,aAAY,SAAS,KAAK,YAAY,CAAC;AAAA,EACxG;AAAA,EAEQ,QAAQ;AACZ,SAAK,MAAM,IAAI,IAAI;AACnB,SAAK,IAAI,YAAY,KAAK,GAAG;AAC7B,SAAK,OAAO,IAAI,KAAK,IAAI,KAAK,KAAK,KAAK,GAAG,CAAC;AAAA,EAChD;AAAA,EAGU,QAAQ,GAAW,MAAY;AACrC,SAAK,MAAM,CAAC,IAAI;AAChB,SAAK,SAAS,SAAS,IAAI;AAAA,EAC/B;AAAA,EAEO,WAAW,GAAS;AACvB,WAAO,QAAQ,KAAK,KAAK,EAAE,QAAQ,CAAC,CAAC,KAAK,IAAI,MAAI;AAC9C,WAAK,SAAS,QAAQ;AACtB,WAAK,UAAU,QAAQ;AACvB,WAAK,MAAI,KAAK,IAAI,UAAU,QAAQ,IAAG;AAAA,IAC3C,CAAC;AAAA,EACL;AAAA,EAEO,QAAQ;AACX,SAAK,OAAO,MAAM;AAAA,EACtB;AACJ;;;AC9GA,SAAS,iBAAiB,oBAAoB,MAAI;AAC9C,WAAS,KAAK,YAAY,IAAI,KAAK,EAAE,IAAI,GAAG;AAAE;AAClD,CAAC;",
  "names": []
}
