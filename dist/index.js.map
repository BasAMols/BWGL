{
  "version": 3,
  "sources": ["../ts/utils/vector2.ts", "../ts/utils/elementPosition.ts", "../ts/utils/elementZoom.ts", "../ts/utils/elementSize.ts", "../ts/utils/elementVisible.ts", "../ts/utils/element.ts", "../ts/dom/domElement.ts", "../ts/canvas/canvasElement.ts", "../ts/canvas/canvasWrapper.ts", "../ts/dom/domText.ts", "../ts/utils/debug/fps.ts", "../ts/dom/domButton.ts", "../ts/utils/mode.ts", "../ts/canvas/canvasColor.ts", "../ts/canvas/canvasSquare.ts", "../ts/canvas/canvasBackground.ts", "../ts/utils/level.ts", "../ts/canvas/canvasCircle.ts", "../ts/modes/snakeMode/parts/eye.ts", "../ts/modes/snakeMode/parts/tail.ts", "../ts/modes/snakeMode/snake.ts", "../ts/utils/controller.ts", "../ts/modes/snakeMode/controllers/bouncyController.ts", "../ts/modes/snakeMode/levels/bouncerLevel.ts", "../ts/canvas/canvasRadialGradientBackground.ts", "../ts/modes/snakeMode/controllers/randomController.ts", "../ts/utils/collisions.ts", "../ts/utils/utils.ts", "../ts/modes/rpg/flatController.ts", "../ts/modes/snakeMode/levels/discoLevel.ts", "../ts/modes/snakeMode/snakeMode.ts", "../ts/utils/ticker.ts", "../ts/utils/event.ts", "../ts/utils/input.ts", "../ts/canvas/canvasAnimation.ts", "../ts/canvas/canvasImage.ts", "../ts/canvas/canvasGrid.ts", "../ts/canvas/prepImage.ts", "../ts/canvas/prepAnimation.ts", "../ts/canvas/canvasPrepSprites.ts", "../ts/utils/collider.ts", "../ts/utils/character.ts", "../ts/modes/rpg/rpgCharacter.ts", "../ts/modes/snakeMode/controllers/cameraController.ts", "../ts/modes/rpg/levels/overworldLevel.ts", "../ts/modes/rpg/rpgMode.ts", "../ts/dom/domCanvas.ts", "../ts/modes/side/character/SideCharacter.ts", "../ts/modes/side/character/SideController.ts", "../ts/canvas/spritesheet.ts", "../ts/modes/side/levels/locomotive.ts", "../ts/modes/side/levels/scrolling.ts", "../ts/canvas/canvasCustom.ts", "../ts/modes/side/levels/trainDoor.ts", "../ts/modes/side/levels/trainCar.ts", "../ts/modes/side/levels/trainCarForeground.ts", "../ts/modes/side/levels/train.ts", "../ts/modes/side/SideMode.ts", "../ts/utils/debug/loader.ts", "../ts/game.ts", "../ts/index.ts"],
  "sourcesContent": ["export class Vector2 {\r\n\tx: number;\r\n\ty: number;\r\n\tstatic Vector2: {};\r\n\tconstructor(x: number, y: number) {\r\n\t\tthis.x = (x === undefined) ? 0 : x;\r\n\t\tthis.y = (y === undefined) ? 0 : y;\r\n\t}\r\n\r\n\tclone(): Vector2 {\r\n\t\treturn new Vector2(this.x, this.y);\r\n\t}\r\n\r\n\tadd(vector: Vector2) {\r\n\t\treturn new Vector2(this.x + vector.x, this.y + vector.y);\r\n\t}\r\n\r\n\tmultiply(vector: Vector2) {\r\n\t\treturn new Vector2(this.x * vector.x, this.y * vector.y);\r\n\t}\r\n\r\n\tsubtract(vector: Vector2) {\r\n\t\treturn new Vector2(this.x - vector.x, this.y - vector.y);\r\n\t}\r\n\r\n\tscale(scalar: number) {\r\n\t\treturn new Vector2(this.x * scalar, this.y * scalar);\r\n\t}\r\n\r\n\tdot(vector: Vector2) {\r\n\t\treturn (this.x * vector.x + this.y + vector.y);\r\n\t}\r\n\r\n\tmoveTowards(vector: Vector2, t: number) {\r\n\t\tt = Math.min(t, 1); // still allow negative t\r\n\t\tvar diff = vector.subtract(this);\r\n\t\treturn this.add(diff.scale(t));\r\n\t}\r\n\r\n\tmagnitude() {\r\n\t\treturn Math.sqrt(this.magnitudeSqr());\r\n\t}\r\n\r\n\tmagnitudeSqr() {\r\n\t\treturn (this.x * this.x + this.y * this.y);\r\n\t}\r\n\r\n\tdistance(vector: Vector2) {\r\n\t\treturn Math.sqrt(this.distanceSqr(vector));\r\n\t}\r\n\r\n\tdistanceSqr(vector: Vector2) {\r\n\t\tvar deltaX = this.x - vector.x;\r\n\t\tvar deltaY = this.y - vector.y;\r\n\t\treturn (deltaX * deltaX + deltaY * deltaY);\r\n\t}\r\n\r\n\tnormalize() {\r\n\t\tvar mag = this.magnitude();\r\n\t\tvar vector = this.clone();\r\n\t\tif (Math.abs(mag) < 1e-9) {\r\n\t\t\tvector.x = 0;\r\n\t\t\tvector.y = 0;\r\n\t\t} else {\r\n\t\t\tvector.x /= mag;\r\n\t\t\tvector.y /= mag;\r\n\t\t}\r\n\t\treturn vector;\r\n\t}\r\n\r\n\tangleDegrees() {\r\n\t\treturn this.angle() * (180/Math.PI);\r\n\t}\r\n\r\n\tangle() {\r\n\t\treturn Math.atan2(this.y, this.x);\r\n\t}\r\n\r\n\r\n\trotate(rad: number) {\r\n\t\tvar cos = Math.cos(rad);\r\n\t\tvar sin = Math.sin(rad);\r\n\t\treturn new Vector2(\r\n\t\t\tthis.x * cos - this.y * sin,\r\n\t\t\tthis.x * sin + this.y * cos\r\n\t\t);\r\n\t}\r\n\r\n\ttoPrecision(precision: number) {\r\n\t\tvar vector = this.clone();\r\n\t\tvector.x = +vector.x.toFixed(precision);\r\n\t\tvector.y = +vector.y.toFixed(precision);\r\n\t\treturn vector;\r\n\t}\r\n\r\n\ttoString() {\r\n\t\tvar vector = this.toPrecision(1);\r\n\t\treturn (\"[\" + vector.x + \"; \" + vector.y + \"]\");\r\n\t}\r\n\r\n\tpublic clamp(min:Vector2, max:Vector2) {\r\n\t\treturn Vector2.clamp(this, min, max);\r\n    }\r\n\r\n\tpublic static min(a:Vector2, b:Vector2) {\r\n        return new Vector2(\r\n\t\t\tMath.min(a.x, b.x),\r\n\t\t\tMath.min(a.y, b.y),\r\n\t\t)\r\n    }\r\n\r\n\tpublic static max(a:Vector2, b:Vector2) {\r\n\t\treturn new Vector2(\r\n\t\t\tMath.max(a.x, b.x),\r\n\t\t\tMath.max(a.y, b.y),\r\n\t\t)\r\n    }\r\n\r\n\tpublic static clamp(value:Vector2, min:Vector2, max:Vector2) {\r\n        return Vector2.max(Vector2.min(value, min), max);\r\n    }\r\n\r\n\tpublic clampMagnitute(mag: number) {\r\n\t\treturn Vector2.clampMagnitute(this, mag);\r\n    }\r\n\r\n\tpublic static clampMagnitute(value:Vector2, mag: number) {\r\n\t\tvar ratio = value.magnitude() / mag;\r\n\t\treturn new Vector2(value.x / ratio, value.y / ratio);\r\n    }\r\n\r\n\tstatic get zero() {\r\n\t\treturn new Vector2(0, 0);\r\n\t}\r\n\tstatic get down() {\r\n\t\treturn new Vector2(0, -1);\r\n\t}\r\n\tstatic get up() {\r\n\t\treturn new Vector2(0, 1);\r\n\t}\r\n\tstatic get right() {\r\n\t\treturn new Vector2(1, 0);\r\n\t}\r\n\tstatic get left() {\r\n\t\treturn new Vector2(-1, 0);\r\n\t}\r\n\tstatic get fromDegree() {\r\n\t\treturn new Vector2(0, 0);\r\n\t}\r\n}\r\n", "import { TickerReturnData } from './ticker';\r\nimport { Vector2 } from './vector2';\r\n\r\nexport interface ElementPositionAttributes {\r\n    position?: Vector2,\r\n    relativity?: ElementRelativity,\r\n\r\n}\r\nexport type ElementRelativity = 'absolute' | 'relative' | 'anchor';\r\nexport abstract class ElementPosition {\r\n    public active: boolean = true;\r\n    public relativity: ElementRelativity = 'relative';\r\n    public lastPosition: Vector2 = Vector2.zero;\r\n    public movedAmount: Vector2 = Vector2.zero;\r\n\r\n    protected _x: number = 0;\r\n    protected _y: number = 0;\r\n\r\n    public get x() {\r\n        return this._x;\r\n    };\r\n    public set x(n) {\r\n        this._x = n;\r\n    }\r\n    public get y() {\r\n        return this._y;\r\n    };\r\n    public set y(n) {\r\n        this._y = n;\r\n    }\r\n\r\n    public get position() {\r\n        return new Vector2(this.x, this.y);\r\n    }\r\n    public set position(value: Vector2) {\r\n        this.x = value.x;\r\n        this.y = value.y;\r\n    };\r\n\r\n    constructor(attr: ElementPositionAttributes = {}) {\r\n        this.relativity = attr.relativity;\r\n        if (attr.position) {\r\n            this.position = attr.position;\r\n            this._x = attr.position.x;\r\n            this._y = attr.position.y;\r\n        }\r\n    }\r\n\r\n    public tick(obj: TickerReturnData) {\r\n        if (this.active) {\r\n            this.movedAmount = this.lastPosition.subtract(this.position);\r\n            this.lastPosition = this.position;\r\n        }\r\n    }\r\n}\r\n", "import { ElementPosition, ElementPositionAttributes } from './elementPosition';\r\nimport { Vector2 } from './vector2';\r\n\r\nexport type ElementZoomAttributes = ElementPositionAttributes & {\r\n    zoom?: Vector2,\r\n};\r\nexport abstract class ElementZoom extends ElementPosition {\r\n\r\n    protected _zoomX: number = 1;\r\n    protected _zoomY: number = 1;\r\n    public get zoomX() {\r\n        return this._zoomX;\r\n    };\r\n    public set zoomX(n) {\r\n        this._zoomX = n;\r\n    };\r\n    public get zoomY() {\r\n        return this._zoomY;\r\n    };\r\n    public set zoomY(n) {\r\n        this._zoomY = n;\r\n    };\r\n\r\n    public get zoom() {\r\n        return new Vector2(this.zoomX, this.zoomY);\r\n    }\r\n    public set zoom(value: Vector2) {\r\n        this.zoomX = value.x;\r\n        this.zoomY = value.y;\r\n    };\r\n\r\n    constructor(attr: ElementZoomAttributes = {}) {\r\n        super(attr);\r\n        if (attr.zoom) {\r\n            this._zoomX = attr.zoom.x;\r\n            this._zoomY = attr.zoom.y;\r\n        }\r\n    }\r\n\r\n}\r\n", "import { ElementZoom, ElementZoomAttributes } from './elementZoom';\r\nimport { Vector2 } from './vector2';\r\n\r\nexport type ElementSizeAttributes = ElementZoomAttributes & {\r\n    size?: Vector2,\r\n};\r\nexport abstract class ElementSize extends ElementZoom {\r\n\r\n    protected _width: number = 0;\r\n    protected _height: number = 0;\r\n    public get width() {\r\n        return this._width;\r\n    };\r\n    public set width(n) {\r\n        this._width = n;\r\n    };\r\n    public get height() {\r\n        return this._height;\r\n    };\r\n    public set height(n) {\r\n        this._height = n;\r\n    };\r\n\r\n    public get size() {\r\n        return new Vector2(this.width, this.height);\r\n    }\r\n    public set size(value: Vector2) {\r\n        this.width = value.x;\r\n        this.height = value.y;\r\n    };\r\n\r\n    constructor(attr: ElementSizeAttributes = {}) {\r\n        super(attr);\r\n        if (attr.size) {\r\n            this._width = attr.size.x;\r\n            this._height = attr.size.y;\r\n        }\r\n    }\r\n\r\n}\r\n", "import { ElementPosition, ElementPositionAttributes } from './elementPosition';\r\nimport { ElementSize, ElementSizeAttributes } from './elementSize';\r\nimport { Vector2 } from './vector2';\r\n\r\nexport type ElementVisibleAttributes = ElementSizeAttributes & {\r\n    visible?: boolean,\r\n}\r\nexport abstract class ElementVisible extends ElementSize{\r\n    \r\n    protected _visible: boolean = true;\r\n    public get visible () {\r\n        return this._visible;\r\n    };\r\n    public set visible (v: boolean) {\r\n        this._visible = v;\r\n    }\r\n\r\n    constructor(attr: ElementVisibleAttributes = {}) {\r\n        super(attr)\r\n        if (attr.visible !== undefined) {\r\n            this.visible = attr.visible;\r\n        }\r\n    }\r\n\r\n}\r\n", "import { Game } from '../game';\r\nimport { ElementVisible, ElementVisibleAttributes } from './elementVisible';\r\nimport { Event } from \"./event\";\r\nimport { Level } from './level';\r\nimport { Mode } from './mode';\r\n\r\nexport type ElementAttributes = ElementVisibleAttributes;\r\n\r\nexport abstract class Element extends ElementVisible {\r\n    public abstract rendererType: 'dom' | 'canvas';\r\n    private events: Event<unknown>[] = [];\r\n\r\n    public parent!: Element;\r\n    public game!: Game;\r\n    public mode!: Mode;\r\n    public level!: Level;\r\n\r\n    public build(): void  {\r\n        //\r\n    }\r\n\r\n    addEvent(e: Event<unknown>) {\r\n        this.events.push(e);\r\n    }\r\n\r\n    getEvent(id: string) {\r\n        return this.events.find((e)=>id === e.id)\r\n    }\r\n}\r\n", "import { Element, ElementAttributes } from \"../utils/element\";\r\nimport { TickerReturnData } from '../utils/ticker';\r\nimport { Vector2 } from \"../utils/vector2\";\r\n\r\nexport type DomElementAttributes = ElementAttributes & {\r\n    id?: string,\r\n    background?: string,\r\n    position?: Vector2;\r\n};\r\nexport class DomElement<T extends keyof HTMLElementTagNameMap> extends Element {\r\n    public dom: HTMLElementTagNameMap[T];\r\n    public children: DomElement<any>[] = [];\r\n    public rendererType = 'dom' as const;\r\n\r\n    public get id() { return this.dom.id; }\r\n\r\n    public set id(value: string) {\r\n        if (value) {\r\n            this.dom.id = value;\r\n        }\r\n    }\r\n\r\n    public get x(): number {\r\n        return Math.round(Number(this.dom.style.left.replace(/\\D/g,'')));\r\n    }\r\n    public set x(n: number) {\r\n        if (this.dom){\r\n            this.dom.style.left = `${n}px`;\r\n        }\r\n    }\r\n    public get y(): number {\r\n        return Math.round(Number(this.dom.style.bottom.replace(/\\D/g,'')));\r\n    }\r\n    public set y(n: number) {\r\n        if (this.dom){\r\n            this.dom.style.bottom = `${n}px`;\r\n        }\r\n    }\r\n\r\n    public set visible(value: boolean) {\r\n        super.visible = value;\r\n        this.dom? this.dom.style.display = value ? 'block' : 'none': null\r\n    }\r\n\r\n    public set background(v: string) {\r\n        this.dom.style.background = v;\r\n    }\r\n\r\n    public get width() {\r\n        return Math.round(Number(this.dom.style.width.replace(/\\D/g,'')));\r\n    }\r\n    public set width(value: number) {\r\n        if (this.dom) {\r\n            this.dom.style.width = `${value}px`;\r\n            this.dom.setAttribute('width', String(value));\r\n        }\r\n    }\r\n\r\n    public get height() {\r\n        return Math.round(Number(this.dom.style.height.replace(/\\D/g,'')));\r\n    }\r\n    public set height(value: number) {\r\n        if (this.dom) {\r\n            this.dom.style.height = `${value}px`;\r\n            this.dom.setAttribute('height', String(value));\r\n        }\r\n    }\r\n\r\n    constructor(type: T, attr: DomElementAttributes = {}) {\r\n        super(attr);\r\n        this.dom = document.createElement(type);\r\n        this.dom.style.position = 'absolute';\r\n        this.dom.style.transformOrigin = 'bottom left';\r\n        this.dom.style.pointerEvents = 'none';\r\n        this.dom.style.bottom = '0px';\t\r\n        this.id = attr.id || '';\r\n        this.background = attr.background || '';\r\n        this.size = attr.size || Vector2.zero;\r\n        this.position = attr.position || Vector2.zero;\r\n    }\r\n\r\n    public tick(obj: TickerReturnData): void {\r\n        super.tick(obj);\r\n    }\r\n\r\n    public appendChild(e: DomElement<any>) {\r\n        this.dom.appendChild(e.dom);\r\n    }\r\n\r\n    public addChild(child: DomElement<any>) {\r\n        this.children.push(child);\r\n        this.dom.appendChild(child.dom);\r\n    }\r\n\r\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLAnchorElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void {\r\n        this.dom.addEventListener(type, listener, options);\r\n    };\r\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLAnchorElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\r\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void {\r\n        this.dom.removeEventListener(type, listener, options);\r\n    };\r\n\r\n\r\n\r\n}\r\n", "import { DomElement } from '../dom/domElement';\r\nimport { Collider } from '../utils/collider';\r\nimport { CanvasController } from '../utils/controller';\r\nimport { Element, ElementAttributes } from \"../utils/element\";\r\nimport { Level } from '../utils/level';\r\nimport { TickerReturnData } from '../utils/ticker';\r\nimport { Vector2 } from \"../utils/vector2\";\r\n\r\nexport type CanvasElementAttributes = ElementAttributes & {\r\n    hasDom?: boolean,\r\n    autoReady?: boolean,\r\n    controllers?: CanvasController[];\r\n};\r\nexport interface CanvasElement {\r\n    mouseMove?(e: MouseEvent): void;\r\n    keyDown?(e: KeyboardEvent): void;\r\n    keyUp?(e: KeyboardEvent): void;\r\n}\r\nexport type CanvasElementType = 'color' | 'image' | 'wrapper' | 'logic' | 'animation' | 'collider';\r\nexport abstract class CanvasElement extends Element {\r\n    public abstract type: CanvasElementType;\r\n    public rendererType = 'canvas' as const;\r\n    public dom!: DomElement<any>;\r\n    private autoReady: boolean;\r\n    private hasDom: boolean;\r\n\r\n    public get x() {\r\n        return super.x;\r\n    }\r\n\r\n    public set x(n: number) {\r\n        super.x = n;\r\n        if (this.dom) {\r\n            this.dom.x = n;\r\n        }\r\n    }\r\n\r\n    public get y() {\r\n        return super.y;\r\n    }\r\n\r\n    public set y(n: number) {\r\n        super.y = n;\r\n        if (this.dom) {\r\n            this.dom.y = n;\r\n        }\r\n    }\r\n\r\n    public get width() {\r\n        return super.width;\r\n    }\r\n\r\n    public set width(n: number) {\r\n        super.width = n;\r\n        if (this.dom) {\r\n            this.dom.width = n;\r\n        }\r\n    }\r\n\r\n    public get height() {\r\n        return super.height;\r\n    }\r\n\r\n    public set height(n: number) {\r\n        super.height = n;\r\n        if (this.dom) {\r\n            this.dom.height = n;\r\n        }\r\n    }\r\n\r\n    public get renderPosition(): Vector2 {\r\n        return this.position.add(this.anchoredPosition);\r\n    }\r\n    public get renderX() { return this.renderPosition.x; }\r\n    public get renderY() { return this.renderPosition.y; }\r\n\r\n    public lowerChildren: CanvasElement[] = [];\r\n    public higherChildren: CanvasElement[] = [];\r\n    public controllers: CanvasController[] = [];\r\n    public anchoredPosition: Vector2 = Vector2.zero;\r\n\r\n    constructor(attr: CanvasElementAttributes = {}) {\r\n        super(attr);\r\n        this.hasDom = attr.hasDom || false;\r\n        if (this.hasDom) {\r\n            this.dom = new DomElement('div');\r\n        }\r\n        this.autoReady = attr.autoReady || false;\r\n        this.addControllers(attr.controllers || []);\r\n    }\r\n\r\n    public addChild(child: CanvasElement | DomElement<any>, above: boolean = false) {\r\n        child.parent ??= this;\r\n        child.game ??= this.game;\r\n        child.mode ??= this.mode;\r\n        child.level ??= this.level;\r\n        if (this.game.waitCount){\r\n            this.game.waitCount++;\r\n        }\r\n\r\n        if (child.rendererType === 'canvas') {\r\n            this[above ? 'higherChildren' : 'lowerChildren'].push(child);\r\n            child.registerControllers(child);\r\n            if (child.dom && this.hasDom) {\r\n                this.dom.addChild(child.dom);\r\n            }\r\n        } else {\r\n            if (this.hasDom) {\r\n                this.dom.addChild(child);\r\n            } else {\r\n                console.log('The CanvasElement class does not have a dom element to add children to. Child:', child.constructor.name);\r\n            }\r\n        }\r\n\r\n        if (!this.autoReady) {\r\n            child.build();\r\n            if (this.game.waitCount){\r\n                this.game.waitCount--;\r\n            }\r\n    \r\n        }\r\n\r\n        if (child.rendererType === 'canvas' && child.type === 'collider' && (child as Collider).colliderType === 'static' && this.level) {\r\n            this.level.colliders.push(child as Collider);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    public addControllers(c: CanvasController[]) {\r\n        if (c.length > 0) {\r\n            this.controllers.push(...c);\r\n        }\r\n    }\r\n\r\n    public registerControllers(child: CanvasElement) {\r\n        child.controllers.forEach((controller) => {\r\n            if (controller.parent === undefined) {\r\n                controller.parent ??= child;\r\n                controller.game ??= child.game;\r\n                controller.mode ??= child.mode;\r\n                controller.level ??= child.level;\r\n                controller.build();\r\n            }\r\n        });\r\n    }\r\n\r\n    public tick(obj: TickerReturnData) {\r\n        super.tick(obj);\r\n        \r\n        this.controllers.filter((child)=>child.active).forEach((c) => c.tick(obj));\r\n        this.lowerChildren.filter((child)=>child.active).forEach((c) => c.tick(obj));\r\n        this.higherChildren.filter((child)=>child.active).forEach((c) => c.tick(obj));\r\n        if (this.dom) {\r\n            this.dom.tick(obj);\r\n        }\r\n    }\r\n    \r\n\r\n    public preRender(c: CanvasRenderingContext2D) {\r\n        c.save();\r\n        \r\n        if (this.relativity === 'anchor') {\r\n            c.translate(this.x, this.y);\r\n            c.scale(this.zoom.x, this.zoom.y);\r\n        }\r\n\r\n        \r\n        this.lowerChildren.filter((child)=>child.visible && child.active).forEach((child) => {\r\n            child.preRender(c);\r\n            child.postRender(c);\r\n        });\r\n        \r\n        this.render(c);\r\n    }\r\n\r\n    public render(c: CanvasRenderingContext2D) {\r\n        //\r\n    }\r\n\r\n    public postRender(c: CanvasRenderingContext2D) {\r\n        this.higherChildren.filter((child)=>child.visible && child.active).forEach((child) => {\r\n            child.preRender(c);\r\n            child.postRender(c);\r\n        });\r\n\r\n        c.restore();\r\n    }\r\n\r\n}\r\n\r\n\r\n", "import { ElementRelativity } from '../utils/elementPosition';\r\nimport { CanvasElement, CanvasElementAttributes, CanvasElementType } from './canvasElement';\r\n\r\nexport type CanvasWrapperAttributes = CanvasElementAttributes & {\r\n}\r\nexport abstract class CanvasWrapper extends CanvasElement {\r\n    public type: CanvasElementType = 'wrapper';\r\n    public relativity: ElementRelativity =  'anchor';\r\n}\r\n\r\n", "import { DomElement, DomElementAttributes } from \"./domElement\";\r\n\r\nexport type  DomTextAttributes = DomElementAttributes & {\r\n    text?: string,\r\n    color?: string,\r\n    fontSize?: number,\r\n    fontWeight?: number,\r\n    fontFamily?: string,\r\n    padding?: [number,number,number,number],\r\n}\r\nexport class DomText extends DomElement<'div'> {\r\n    set color (v: string) {\r\n        this.dom.style.color = v; \r\n    }\r\n    set fontSize (v: number) {\r\n        this.dom.style.fontSize = String(v)+'px'; \r\n    }\r\n    set fontWeight (v: number) {\r\n        this.dom.style.fontWeight = String(v); \r\n    }\r\n    set fontFamily (v: string) {\r\n        this.dom.style.fontFamily = v; \r\n    }\r\n    public get text() {\r\n        return this.dom.innerHTML;\r\n    }\r\n    public set text (v: string) {\r\n        this.dom.innerHTML = v?v:''; \r\n    }\r\n    public set padding (v: [number,number,number,number]) {\r\n        this.dom.style.padding = v.join('px ')+'px'; \r\n    }\r\n    public constructor(attr: DomTextAttributes = {}) {\r\n        super('div', attr);\r\n        this.color = attr.color;\r\n        this.text = attr.text;\r\n        this.fontSize = attr.fontSize;\r\n        this.fontWeight = attr.fontWeight;\r\n        this.fontFamily = attr.fontFamily;\r\n        this.padding = attr.padding || [0,0,0,0];\r\n\r\n        this.dom.style.pointerEvents = 'none';\r\n        this.dom.style.userSelect = 'none';\r\n    }\r\n}", "import { DomText } from \"../../dom/domText\";\r\nimport { TickerReturnData } from '../ticker';\r\nimport { Vector2 } from '../vector2';\r\n\r\nexport class FPS extends DomText {\r\n    private fCount: number = 0;\r\n    private tCount: number = 0;\r\n    public constructor( ) {\r\n        super({\r\n            text: FPS.getString(0),\r\n            fontSize: 35,\r\n            fontWeight: 900,\r\n            color: 'white',\r\n            position: new Vector2(5,5), \r\n            size: new Vector2(100, 50),\r\n            background: '#ff0000aa',\r\n            fontFamily: 'monospace',\r\n            padding: [0,10,0,10]\r\n        });\r\n    }\r\n\r\n    public tick({interval}: TickerReturnData){\r\n        this.fCount++;\r\n        this.tCount+=interval;\r\n        if (this.tCount > 1000){\r\n            this.text = FPS.getString(this.fCount);\r\n            this.fCount = 0;\r\n            this.tCount = 0;\r\n        }\r\n    }\r\n\r\n    public static getString(v: number){\r\n        return `${String(v)}<sub style=\"font-size:25px; top: -7px; position: relative\">FPS</sub>`\r\n    }\r\n}", "\r\n\r\nimport { DomText, DomTextAttributes } from './domText';\r\n\r\nexport type  DomButtonAttributes = DomTextAttributes & {\r\n    onClick: ()=>void\r\n}\r\nexport class DomButton extends DomText {\r\n    public onClick: ()=>void;\r\n    public constructor(attr: DomButtonAttributes) {\r\n        super(attr);        \r\n        this.onClick = attr.onClick;\r\n        this.dom.style.pointerEvents = 'auto';\r\n        this.dom.style.cursor = 'pointer';\r\n        this.dom.onclick = this.onClick;\r\n    }\r\n}", "import { CanvasElement } from '../canvas/canvasElement';\r\nimport { CanvasWrapper, CanvasWrapperAttributes } from '../canvas/canvasWrapper';\r\nimport { DomElement } from '../dom/domElement';\r\nimport { Game } from '../game';\r\nimport { ElementRelativity } from './elementPosition';\r\nimport { Level } from './level';\r\nimport { Vector2 } from './vector2';\r\n\r\nexport type modeAttributes = CanvasWrapperAttributes & {\r\n\r\n}\r\nexport abstract class Mode extends CanvasWrapper {\r\n    public levels: Record<string, Level> = {};\r\n    public relativity: ElementRelativity = 'anchor';\r\n\r\n    private keyAliases = {\r\n        'w': 'up',\r\n        'a': 'left',\r\n        's': 'down',\r\n        'd': 'right',\r\n        'ArrowUp': 'up',\r\n        'ArrowLeft': 'left',\r\n        'ArrowDown': 'down',\r\n        'ArrowRight': 'right',\r\n    } as const\r\n\r\n    public input: {\r\n        'up': boolean,\r\n        'left': boolean,\r\n        'down': boolean,\r\n        'right': boolean,\r\n    } = {\r\n        'up': false,\r\n        'left': false,\r\n        'down': false,\r\n        'right': false,\r\n    }\r\n\r\n    build(): void {\r\n        super.build();\r\n        this.game.getEvent('resize').subscribe(String(Math.random()), (size: Vector2) => {\r\n            this.size = size;\r\n        });\r\n    }\r\n\r\n    protected addLevel(s: string, level: Level) {\r\n        this.levels[s] = level;\r\n        this.addChild(level);\r\n    }\r\n\r\n    public switchLevel(s:string){\r\n        Object.entries(this.levels).forEach(([key, level])=>{\r\n            level.active = key === s;\r\n            level.visible = key === s;\r\n            level.dom?level.dom.visible = key === s: null;\r\n        });\r\n    }\r\n\r\n    public keyDown(e: KeyboardEvent) {\r\n        if (Object.keys(this.keyAliases).includes(e.key)){\r\n            this.input[this.keyAliases[e.key as keyof typeof this.keyAliases]] = true;\r\n        }\r\n    }\r\n    \r\n    public keyUp(e: KeyboardEvent) {\r\n        if (Object.keys(this.keyAliases).includes(e.key)){\r\n            this.input[this.keyAliases[e.key as keyof typeof this.keyAliases]] = false;\r\n        }\r\n    }\r\n}\r\n", "import { Vector2 } from '../utils/vector2';\r\nimport { CanvasElement, CanvasElementAttributes } from './canvasElement';\r\n\r\nexport type LinearGradient = {\r\n    angle: number,\r\n    stops: [number,string][]\r\n}\r\nexport type RadialGradient = {\r\n    stops: [number,string][],\r\n    offset?: Vector2,\r\n}\r\nexport type ColorType = 'color'|'linearGradient'|'radialGradient';\r\nexport type CanvasColorAttributes = CanvasElementAttributes & {\r\n    color?: string,\r\n    stroke?: string,\r\n    strokeWidth?: number,\r\n    linearGradient?: LinearGradient,\r\n    radialGradient?: RadialGradient,\r\n}\r\nexport abstract class CanvasColor extends CanvasElement {\r\n    public abstract shape: 'circle'|'square';\r\n    public type = 'color' as const;\r\n    public colorType: ColorType = 'color';\r\n    public color: string;\r\n    public linearGradient: LinearGradient;\r\n    public radialGradient: RadialGradient;\r\n    public stroke: string;\r\n    public strokeWidth: number = 0;\r\n\r\n    constructor(attr: CanvasColorAttributes = {}) {\r\n        super(attr);\r\n        this.color = attr.color\r\n        this.stroke = attr.stroke\r\n        this.strokeWidth = attr.strokeWidth | 0\r\n        this.linearGradient = attr.linearGradient\r\n        this.radialGradient = attr.radialGradient\r\n    }\r\n\r\n    public getColor(): string | CanvasGradient | CanvasPattern {\r\n        if (this.colorType === 'color'){\r\n            return this.color\r\n        }\r\n        if (this.colorType === 'linearGradient'){\r\n            return this.getLiniarGradient();\r\n        }\r\n        if (this.colorType === 'radialGradient'){\r\n            return this.getRadialGradient();\r\n        }\r\n    }\r\n    public abstract getLiniarGradient(): CanvasGradient | ''\r\n    public abstract getRadialGradient(): CanvasGradient | ''\r\n}\r\n", "import { Vector2 } from '../utils/vector2';\r\nimport { CanvasColor, CanvasColorAttributes } from './canvasColor';\r\n\r\nexport type CanvasSquareAttributes = CanvasColorAttributes & {\r\n    rounded?: number;\r\n    condition?: (position: Vector2, size: Vector2)=>void,\r\n    opacity?: number,\r\n};\r\nexport class CanvasSquare extends CanvasColor {\r\n    public shape = 'square' as const;\r\n    public rounded: number;\r\n    public condition: (position: Vector2, size: Vector2) => void;\r\n    public opacity: number;\r\n\r\n    constructor(attr: CanvasSquareAttributes = {}) {\r\n        super(attr);\r\n        this.color = attr.color;\r\n        this.rounded = attr.rounded || 3;\r\n        this.condition = attr.condition;\r\n        this.opacity = attr.opacity || 1;\r\n\r\n    }\r\n\r\n    public render(ctx: CanvasRenderingContext2D): void {\r\n        if ((!this.condition || this.condition(this.position.add(this.parent.position), this.size))) {\r\n            ctx.fillStyle = this.getColor();\r\n            ctx.globalAlpha = this.opacity;\r\n            ctx.beginPath();\r\n            ctx.roundRect(this.position.x, this.position.y, this.width, this.height, this.rounded);\r\n            ctx.fill();\r\n            if (this.strokeWidth) {\r\n                ctx.lineWidth = this.strokeWidth;\r\n                ctx.strokeStyle = this.stroke || 'black';\r\n                ctx.stroke();\r\n            }\r\n            ctx.closePath();\r\n        }\r\n    }\r\n\r\n    public getLiniarGradient(): CanvasGradient | '' {\r\n        if (this.linearGradient) {\r\n            const grd = this.game.renderer.ctx.createLinearGradient(\r\n                this.position.x + this.anchoredPosition.x,\r\n                this.position.y + this.anchoredPosition.y,\r\n                this.position.x + this.anchoredPosition.x + this.width,\r\n                this.position.y + this.anchoredPosition.y + this.height\r\n            );\r\n\r\n            this.linearGradient.stops.forEach(([number, color]) => {\r\n                grd.addColorStop(number, color);\r\n            });\r\n\r\n            return grd;\r\n        }\r\n        return \"\";\r\n    }\r\n    public getRadialGradient(): CanvasGradient | '' {\r\n        if (this.radialGradient) {\r\n            const grd = this.game.renderer.ctx.createRadialGradient(\r\n                this.position.x + this.width / 2,\r\n                this.position.y + this.height / 2,\r\n                0,\r\n                this.position.x + this.width / 2,\r\n                this.position.y + this.height / 2,\r\n                this.width\r\n            );\r\n            this.radialGradient.stops.forEach(([number, color]) => {\r\n                grd.addColorStop(number, color);\r\n            });\r\n            return grd;\r\n        }\r\n        return \"\";\r\n    }\r\n}\r\n", "import { Vector2 } from '../utils/vector2';\r\nimport { CanvasSquare } from './canvasSquare';\r\n\r\nexport class CanvasColorBackground extends CanvasSquare {\r\n    constructor(color: string) {\r\n        super({\r\n            position: Vector2.zero,\r\n            color,\r\n        });\r\n    }\r\n\r\n    build() {\r\n        this.game.getEvent('resize').subscribe(String(Math.random()), (size: Vector2)=>{\r\n            this.size = this.parent.size;            \r\n        });\r\n    }\r\n\r\n}\r\n\r\n\r\n", "import { CanvasElement } from '../canvas/canvasElement';\r\nimport { CanvasSquare } from '../canvas/canvasSquare';\r\nimport { CanvasWrapper, CanvasWrapperAttributes } from '../canvas/canvasWrapper';\r\nimport { DomElement } from '../dom/domElement';\r\nimport { Collider } from './collider';\r\nimport { ElementRelativity } from './elementPosition';\r\nimport { Vector2 } from \"./vector2\";\r\n\r\nexport type levelAttributes =  CanvasWrapperAttributes & {\r\n\r\n}\r\nexport abstract class Level extends CanvasWrapper{\r\n    abstract start: Vector2;\r\n    abstract background: CanvasSquare;\r\n    public relativity: ElementRelativity = 'anchor';\r\n    public ready = false;\r\n    public colliders: Collider[] = [];\r\n\r\n    constructor(attr: levelAttributes = {}) {\r\n        super(attr);\r\n        this.level = this;\r\n        this.mode = this.mode;\r\n        this.size = this.size;\r\n    }\r\n\r\n}\r\n", "import { Vector2 } from '../utils/vector2';\r\nimport { CanvasColor, CanvasColorAttributes } from './canvasColor';\r\n\r\nexport type CanvasCircleAttributes = CanvasColorAttributes & {\r\n    radius: number,\r\n    radiusY?: number,\r\n    center?: boolean;\r\n    angle?: number;\r\n};\r\nexport class CanvasCircle extends CanvasColor {\r\n\r\n    public readonly shape = 'circle';\r\n    \r\n    public angle: number;\r\n\r\n    private _radius: number;\r\n    public get radius(): number {\r\n        return this._radius;\r\n    }\r\n    public set radius(value: number) {\r\n        this._radius = value;\r\n    }\r\n    private _radiusY: number;\r\n    public get radiusY(): number {\r\n        return this._radiusY;\r\n    }\r\n    public set radiusY(value: number) {\r\n        this._radiusY = value;\r\n    }\r\n    public get width() { return this.radius*2; }\r\n    public set width(value: number) {\r\n        this.radius = value / 2;\r\n    }\r\n\r\n    public get height() { return this.radiusY*2; }\r\n    public set height(value: number) {\r\n        this.radiusY = value / 2;\r\n    }\r\n\r\n    public center: boolean;\r\n\r\n    constructor(attr: CanvasCircleAttributes) {\r\n        super(attr);\r\n        this.radius = attr.radius;\r\n        this.radiusY = attr.radiusY || attr.radius;\r\n        this.center = attr.center;\r\n        this.angle = attr.angle || 0;\r\n    }\r\n\r\n    public render(ctx: CanvasRenderingContext2D): void {\r\n        ctx.fillStyle = this.getColor();\r\n        ctx.beginPath();\r\n\r\n        ctx.ellipse(\r\n            this.position.x,\r\n            this.position.y,\r\n            this.radius,\r\n            this.radiusY,\r\n            this.angle,\r\n            0, 2\r\n        * Math.PI,\r\n            false\r\n        );\r\n\r\n        ctx.fill();\r\n        if (this.strokeWidth) {\r\n            ctx.lineWidth = this.strokeWidth;\r\n            ctx.strokeStyle = this.stroke || 'black';\r\n            ctx.stroke();\r\n        }\r\n        ctx.closePath();\r\n    }\r\n\r\n    public getLiniarGradient(): CanvasGradient | '' {\r\n        if (this.linearGradient) {\r\n            const grd = this.game.renderer.ctx.createLinearGradient(\r\n                this.position.x + this.anchoredPosition.x - this.radius,\r\n                this.position.y + this.anchoredPosition.y - this.radiusY,\r\n                this.position.x + this.anchoredPosition.x + this.radius,\r\n                this.position.y + this.anchoredPosition.y + this.radiusY\r\n            );\r\n            this.linearGradient.stops.forEach(([number, color]) => {\r\n                grd.addColorStop(number, color);\r\n            });\r\n            return grd;\r\n        }\r\n        return '';\r\n    }\r\n    public getRadialGradient(): CanvasGradient | '' {\r\n        if (this.radialGradient) {\r\n            if (!this.radialGradient.offset) {\r\n                this.radialGradient.offset = Vector2.zero;\r\n            }\r\n            const grd = this.game.renderer.ctx.createRadialGradient(\r\n                this.position.x + this.anchoredPosition.x + this.radialGradient.offset.x,\r\n                this.position.y + this.anchoredPosition.y + this.radialGradient.offset.y,\r\n                0,\r\n                this.position.x + this.anchoredPosition.x,\r\n                this.position.y + this.anchoredPosition.y,\r\n                Math.max(this.radius, this.radiusY)\r\n            );\r\n            this.radialGradient.stops.forEach(([number, color]) => {\r\n                grd.addColorStop(number, color);\r\n            });\r\n            return grd;\r\n        }\r\n        return '';\r\n    }\r\n}\r\n", "\r\nimport { CanvasCircle } from '../../../canvas/canvasCircle';\r\nimport { TickerReturnData } from '../../../utils/ticker';\r\nimport { Vector2 } from '../../../utils/vector2';\r\n\r\nexport class Eye extends CanvasCircle {\r\n    public readonly colorType = 'radialGradient';\r\n    public offset: Vector2;\r\n\r\n    constructor(offset: Vector2, size: number = 65) {\r\n        super({\r\n            radialGradient: {\r\n                stops: [[0, '#666'], [0.5, 'black'], [0.5, 'white'], [1, 'grey'],],\r\n            },\r\n            strokeWidth: 0.08*size,\r\n            radius: size,\r\n            radiusY: size * 1.1,\r\n            stroke: 'black',\r\n        });\r\n        this.offset = offset;\r\n    }\r\n    tick(obj: TickerReturnData) {\r\n        super.tick(obj);\r\n        this.radialGradient.offset = new Vector2(\r\n            -this.radius * this.movedAmount.x*0.2,\r\n            -this.radiusY * this.movedAmount.y*0.2,\r\n        );\r\n        this.radialGradient.offset.x = Math.min(this.radialGradient.offset.x, this.radius *0.6);\r\n        this.radialGradient.offset.x = Math.max(this.radialGradient.offset.x, -this.radius *0.6);\r\n        this.radialGradient.offset.y = Math.min(this.radialGradient.offset.y, this.radiusY *0.6);\r\n        this.radialGradient.offset.y = Math.max(this.radialGradient.offset.y, -this.radiusY *0.6);\r\n\r\n        this.position = this.parent.position.subtract(this.offset);\r\n    }\r\n}\r\n", "import { CanvasCircle } from '../../../canvas/canvasCircle';\r\nimport { ColorType } from '../../../canvas/canvasColor';\r\nimport { CanvasController } from '../../../utils/controller';\r\nimport { Vector2 } from '../../../utils/vector2';\r\nimport { SnakeColors } from '../snake';\r\n\r\nexport class Tail extends CanvasCircle {\r\n    private trace: Vector2[] = [];\r\n    private number: number;\r\n\r\n    protected bottomRadius: number;\r\n    protected topRadius: number;\r\n    protected moving: boolean = false;\r\n    protected next: Tail;\r\n\r\n    public colorType: ColorType = 'radialGradient';\r\n    public colors: SnakeColors;\r\n    public distance: number;\r\n    public total: number;\r\n\r\n    constructor({\r\n        number,\r\n        distance,\r\n        total,\r\n        topRadius = 120,\r\n        bottomRadius = 20,\r\n        controllers = []\r\n    }: {\r\n        number: number;\r\n        distance: number;\r\n        total: number;\r\n        topRadius?: number;\r\n        bottomRadius?: number;\r\n        controllers?: CanvasController[];\r\n    }) {\r\n\r\n        super({\r\n            position: new Vector2(200, 200),\r\n            radius: (1 - (number / total)) * (topRadius - bottomRadius) + bottomRadius,\r\n            color: `transparant`,\r\n            center: true,\r\n            controllers\r\n        });\r\n\r\n        this.number = number;\r\n        this.distance = distance;\r\n        this.total = total;\r\n        this.visible = false;\r\n        this.topRadius = topRadius;\r\n        this.bottomRadius = bottomRadius;\r\n    }\r\n\r\n    public add(total: number) {\r\n        if (this.next) {\r\n            this.next.add(total);\r\n        } else {\r\n            this.next = new Tail({ number: this.number + 1, distance: this.distance, total, topRadius: this.topRadius, bottomRadius: this.bottomRadius, controllers: [] });\r\n            this.next.colors = this.colors;\r\n            this.addChild(this.next);\r\n        }\r\n    }\r\n\r\n    public follow(p: Vector2) {\r\n        this.trace.push(p);\r\n\r\n        if (this.moving) {\r\n            this.position = this.trace.shift().clone();\r\n            if (this.next) {\r\n                this.next.follow(this.position.clone());\r\n            }\r\n\r\n        } else if (this.trace.length === Math.max(3, Math.round((this.distance - ((this.number / this.total) * this.distance))))) {\r\n            this.moving = true;\r\n            this.position = this.trace[0].clone();\r\n            this.visible = true;\r\n            this.getColorGradient();\r\n\r\n        } else {\r\n            this.visible = false;\r\n        }\r\n    }\r\n\r\n    public getColorGradient() {\r\n\r\n\r\n        const lin = 1 - (this.number / this.total);\r\n        const siz = ((this.radius - this.topRadius) / this.topRadius);\r\n        const h = (lin * 360);\r\n        const s = ({\r\n            rainbow: [\r\n                [0.1, `hsla(${h},0%,0%,${70*lin}%)`],\r\n                [0.68, `hsla(${h},100%,50%,${70*lin}%)`],\r\n            ],\r\n            green: [\r\n                [0.1, `hsla(140,0%,0%,${100}%)`],\r\n                [0.68, `hsla(140,45%,40%,${100}%)`],\r\n            ],\r\n            dark: [\r\n                [0.1, `black`],\r\n                [0.68, `black`],\r\n            ],\r\n        } as Record<SnakeColors, [number, string][]>)[this.colors];\r\n        if (1 - siz < 1) {\r\n            s.push(\r\n                [0.68, `black`],\r\n                [0.68 + ((1-siz) * .03), `#00000011`],\r\n                [0.68 + ((1-siz) * .03), `#00000005`],\r\n                [1, `#00000000`]\r\n            );\r\n        } else {\r\n            s.push(\r\n                [0.68, `black`],\r\n                [0.68 + ((1-siz) * .03), `black`],\r\n                [0.68 + ((1-siz) * .03), `#00000011`],\r\n                [1, `#00000000`]\r\n            );\r\n        }\r\n\r\n        this.radialGradient = {\r\n            stops: s,\r\n            offset: new Vector2(10 * siz, 10 * siz)\r\n        };\r\n    }\r\n}\r\n", "import { CanvasCircle } from '../../canvas/canvasCircle';\r\nimport { CanvasController } from '../../utils/controller';\r\nimport { TickerReturnData } from '../../utils/ticker';\r\nimport { Vector2 } from '../../utils/vector2';\r\nimport { Eye } from './parts/eye';\r\nimport { Tail } from './parts/tail';\r\n\r\nexport type SnakeColors = 'rainbow' | 'dark' | 'green';\r\nexport class Snake extends Tail {\r\n    public eye1: CanvasCircle;\r\n    public eye2: CanvasCircle;\r\n    private faceSize: number;\r\n\r\n    constructor({\r\n        position = Vector2.zero,\r\n        totals = 10,\r\n        distance = 10,\r\n        topRadius = 120,\r\n        bottomRadius = 5,\r\n        colors = 'rainbow',\r\n        controllers = []\r\n    }: {\r\n        position?: Vector2;\r\n        totals?: number;\r\n        distance?: number;\r\n        topRadius?: number;\r\n        bottomRadius?: number;\r\n        colors?: SnakeColors;\r\n        controllers?: CanvasController[];\r\n    } = {}) {\r\n\r\n        super({ number: 0, distance, total: totals, controllers, topRadius: topRadius + 25, bottomRadius });\r\n        this.faceSize = topRadius;\r\n        this.position = position;\r\n        this.colors = colors;\r\n    }\r\n\r\n    build() {\r\n        this.moving = true;\r\n        this.visible = true;\r\n        this.radius = this.faceSize * 1.2;\r\n        this.radiusY = this.faceSize;\r\n        this.strokeWidth = this.faceSize*0.05;\r\n        this.setcolor();\r\n\r\n        for (let index = 0; index < this.total; index++) {\r\n            this.add(this.total);\r\n        }\r\n\r\n        this.addChild(new Eye(new Vector2(-this.faceSize * 0.62, -this.faceSize * 0.4), this.faceSize * 0.6), true);\r\n        this.addChild(new Eye(new Vector2(this.faceSize * 0.62, -this.faceSize * 0.4), this.faceSize * 0.6), true);\r\n\r\n    }\r\n\r\n    public tick(obj: TickerReturnData) {\r\n        super.tick(obj);\r\n\r\n        if (this.next) {\r\n            this.next.follow(this.position.clone());\r\n        }\r\n    }\r\n\r\n    public setcolor() {\r\n        if (this.colors === 'rainbow') {\r\n            this.colorType = 'linearGradient';\r\n            this.linearGradient = {\r\n                stops: [\r\n                    [0.0, 'rgba(255,0,0,1)'],\r\n                    [0.1, 'rgba(255,154,0,1)'],\r\n                    [0.2, 'rgba(208,222,33,1)'],\r\n                    [0.3, 'rgba(79,220,74,1)'],\r\n                    [0.4, 'rgba(63,218,216,1)'],\r\n                    [0.5, 'rgba(47,201,226,1)'],\r\n                    [0.6, 'rgba(28,127,238,1)'],\r\n                    [0.7, 'rgba(95,21,242,1)'],\r\n                    [0.8, 'rgba(186,12,248,1)'],\r\n                    [0.9, 'rgba(251,7,217,1)'],\r\n                    [1.0, 'rgba(255,0,0,1)'],\r\n                ],\r\n                angle: 0,\r\n            };\r\n\r\n        } else if (this.colors === 'dark') {\r\n            this.colorType = 'radialGradient';\r\n            this.radialGradient = {\r\n                stops: [\r\n                    [0.0, 'rgba(255,0,0,1)'],\r\n                    [0.1, 'rgba(255,154,0,1)'],\r\n                    [0.2, 'rgba(208,222,33,1)'],\r\n                    [0.3, 'rgba(79,220,74,1)'],\r\n                    [0.4, 'rgba(63,218,216,1)'],\r\n                    [0.5, 'rgba(47,201,226,1)'],\r\n                    [0.6, 'rgba(28,127,238,1)'],\r\n                    [0.7, 'rgba(95,21,242,1)'],\r\n                    [0.8, 'rgba(186,12,248,1)'],\r\n                    [0.9, 'rgba(251,7,217,1)'],\r\n                    [1.0, 'rgba(255,0,0,1)'],\r\n                ],\r\n            };\r\n           \r\n        } else if (this.colors === 'green') {\r\n            this.colorType = 'radialGradient';\r\n            this.radialGradient = {\r\n                stops: [\r\n                    [0, `hsla(140,100%,20%,${100}%)`],\r\n                    [1, `hsla(140,45%,40%,${100}%)`],\r\n                ],\r\n            };\r\n        }\r\n    }\r\n}\r\n", "import { CanvasElement, CanvasElementAttributes, CanvasElementType } from '../canvas/canvasElement';\r\n\r\nexport class CanvasController extends CanvasElement {\r\n    public type: CanvasElementType = 'logic';\r\n}", "import { CanvasController } from '../../../utils/controller';\r\nimport { TickerReturnData } from '../../../utils/ticker';\r\nimport { Vector2 } from '../../../utils/vector2';\r\n\r\nexport class BouncyController extends CanvasController {\r\n    private velocity: Vector2 = new Vector2(10, 0);\r\n    private bouncing: boolean = true;\r\n    private radius: number;\r\n\r\n    constructor(radius: number) {\r\n        super();\r\n        this.radius = radius;\r\n    }\r\n\r\n    public tick(obj: TickerReturnData) {\r\n        super.tick(obj);\r\n\r\n        this.bounceGround();\r\n        this.bounceWall();\r\n    }\r\n\r\n    bounceWall() {\r\n        if (this.parent.position.add(this.velocity).x > this.level.width - this.radius) {\r\n            this.velocity.x = (-this.velocity.x * 0.8);\r\n        } else if (this.parent.position.add(this.velocity).x < (this.radius)) {\r\n            this.velocity.x = (-this.velocity.x * 0.8);\r\n        }\r\n\r\n        if (this.bouncing){\r\n            this.parent.position.x += this.velocity.x;\r\n        } else {\r\n            this.velocity.x*=0.98\r\n            this.parent.position.x += this.velocity.x;\r\n        }\r\n    }\r\n\r\n    bounceGround() {\r\n        if (this.bouncing) {\r\n            if (this.parent.position.add(this.velocity).y > this.level.height - this.radius) {\r\n                if (this.velocity.y > 5) {\r\n                    this.velocity.y = (-this.velocity.y) + 3;\r\n                } else {\r\n                    this.land();\r\n                    return;\r\n                }\r\n            }\r\n            this.velocity.y += 1;\r\n            this.parent.position.y += this.velocity.y;\r\n        }\r\n    }\r\n\r\n    land() {\r\n        this.parent.position.y = this.level.height - this.radius;\r\n        this.bouncing = false;\r\n    }\r\n}", "import { CanvasColorBackground } from '../../../canvas/canvasBackground';\r\nimport { Vector2 } from \"../../../utils/vector2\"\r\nimport { Level } from \"../../../utils/level\"\r\nimport { Snake } from '../snake';\r\nimport { BouncyController } from '../controllers/bouncyController';\r\n\r\nexport class BouncerLevel extends Level {\r\n    public start = new Vector2(300, 400)\r\n    public background = new CanvasColorBackground('black')\r\n\r\n    constructor() {\r\n        super();\r\n        this.size = new Vector2(1145, 2000)\r\n    }\r\n\r\n    build(){\r\n        this.game.getEvent('resize').subscribe(String(Math.random()), (size: Vector2) => {\r\n            this.size = size;\r\n        });\r\n        this.addChild(this.background);\r\n        this.addChild(new Snake({ position: this.start, totals: 50, distance: 6, colors: 'rainbow', controllers: [new BouncyController(120)] }));\r\n    }\r\n\r\n}\r\n", "import { Vector2 } from '../utils/vector2';\r\nimport { CanvasSquare } from './canvasSquare';\r\nimport { RadialGradient } from './canvasColor';\r\n\r\n\r\nexport class CanvasRadialGradientBackground extends CanvasSquare {\r\n    public colorType = 'radialGradient' as const;\r\n    constructor(radialGradient: RadialGradient) {\r\n        super({\r\n            position: Vector2.zero,\r\n            radialGradient: radialGradient\r\n        });\r\n    }\r\n\r\n    build() {\r\n        this.game.getEvent('resize').subscribe(String(Math.random()), (size: Vector2) => {\r\n            this.size = this.level.size;\r\n        });\r\n    }\r\n}\r\n", "import { CanvasController } from '../../../utils/controller';\r\nimport { TickerReturnData } from '../../../utils/ticker';\r\nimport { Vector2 } from '../../../utils/vector2';\r\n\r\nexport class RandomController extends CanvasController {\r\n    private speed:number = 7;\r\n    private direction = Vector2.up;\r\n    private steering: number = Math.random();\r\n    private maxSteering: number = 5;\r\n    private radius: number;;\r\n\r\n    constructor(radius: number, speed: number = 7, direction: Vector2 = Vector2.up) {\r\n        super();\r\n        this.radius = radius\r\n        this.speed = speed\r\n        this.direction = direction;\r\n    }\r\n\r\n    public tick(obj: TickerReturnData) {\r\n        super.tick(obj);\r\n\r\n        this.steering = Math.max(Math.min(this.steering + ((Math.random() * 2) - 1) / 5, this.maxSteering), -this.maxSteering);\r\n        this.direction = this.direction.rotate(this.steering / 200);\r\n        this.parent.position = this.parent.position.add(this.direction.scale(this.speed).scale(obj.interval / 10));\r\n\r\n        if (this.parent.position.x > this.level.width + this.radius) {\r\n            this.parent.position.x = -this.radius;\r\n        }\r\n        if (this.parent.position.y > this.level.height + this.radius) {\r\n            this.parent.position.y = -this.radius;\r\n        }\r\n        if (this.parent.position.x < -this.radius) {\r\n            this.parent.position.x = this.level.width + this.radius;\r\n        }\r\n        if (this.parent.position.y < -this.radius) {\r\n            this.parent.position.y = this.level.height + this.radius;\r\n        }\r\n    }\r\n}", "import { CanvasElement } from '../canvas/canvasElement';\r\nimport { Collider } from './collider';\r\nimport { Level } from './level';\r\nimport { Vector2 } from './vector2';\r\n\r\nexport abstract class Collisions {\r\n\r\n    public static overlap(aP: Vector2, aS: Vector2, bP: Vector2, bS: Vector2): boolean {\r\n        return aP.x < bP.x + bS.x && aP.x + aS.x > bP.x && aP.y < bP.y + bS.y && aP.y + aS.y > bP.y;\r\n    }\r\n\r\n    private static overlapDirection(aP: Vector2, aS: Vector2, bP: Vector2, bS: Vector2, v: Vector2): (['x', number] | ['y', number])[] {\r\n        let result: (['x', number] | ['y', number])[] = [];\r\n\r\n        if (Collisions.overlap(aP,aS,new Vector2(bP.x, bP.y + v.y),bS)) {\r\n            result.push(v.y > 0?['y', aP.y - bP.y - bS.y]: ['y', aP.y + aS.y - bP.y]); \r\n        }\r\n\r\n        if (Collisions.overlap(aP,aS,new Vector2(bP.x + v.x, bP.y),bS)) {\r\n            result.push(v.x < 0? ['x', aP.x + aS.x - bP.x]: ['x', aP.x - bP.x - bS.x]); \r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    static check(statics: Collider[], dynamic: Collider, velocity: Vector2): (['x', number] | ['y', number])[] {\r\n        const r:(['x', number] | ['y', number])[] = [];\r\n\r\n        statics.forEach((s) => {\r\n            r.push(...Collisions.overlapDirection(s.position.add(s.parent instanceof Level? Vector2.zero: s.parent.position ), s.size, dynamic.position, dynamic.size, velocity))\r\n        });\r\n\r\n        return r\r\n    }\r\n}", "export abstract class Util{\r\n    public static clamp(value:number, min:number, max:number) {\r\n        return Math.max(Math.min(value, max), min);\r\n    }\r\n    public static to0(value:number, tolerance: number = 0.1) {\r\n        return Math.abs(value) < tolerance ? 0 : value;\r\n    }\r\n}", "import { Character } from '../../utils/character';\r\nimport { Collisions } from '../../utils/collisions';\r\nimport { CanvasController } from '../../utils/controller';\r\nimport { TickerReturnData } from '../../utils/ticker';\r\nimport { Util } from '../../utils/utils';\r\nimport { Vector2 } from '../../utils/vector2';\r\n\r\nexport class FlatContoller extends CanvasController {\r\n    private speed = 4;\r\n    private velocity: Vector2 = Vector2.zero;\r\n    public parent: Character;\r\n\r\n    public tick(obj: TickerReturnData) {\r\n        super.tick(obj); \r\n\r\n        const angle = new Vector2(\r\n            this.mode.input.right ? 1 : this.mode.input.left ? -1 : 0,\r\n            this.mode.input.down ? -1 : this.mode.input.up ? 1 : 0\r\n        );\r\n\r\n        this.velocity.x = Util.to0(this.velocity.x * 0.9, 0.1);\r\n        this.velocity.y = Util.to0(this.velocity.y * 0.9, 0.1);\r\n\r\n        if (angle.x !== 0 || angle.y !== 0) {\r\n            this.velocity = this.velocity\r\n                .add(Vector2.right.scale(this.speed).rotate(angle.angle()))\r\n                .clampMagnitute(this.speed)\r\n                .toPrecision(2);\r\n        }\r\n\r\n        const r = Collisions.check(this.level.colliders, this.parent, this.velocity.scale(obj.interval / 10));\r\n\r\n        if (r.length !== 0) {\r\n            r.sort(function (a, b) {\r\n                return Math.abs(a[1]) - Math.abs(b[1]);\r\n            });\r\n            if (r.find((a) => a[0] === \"x\")) { this.velocity.x = r.find((a) => a[0] === \"x\")[1] / (obj.interval / 10); }\r\n            if (r.find((a) => a[0] === \"y\")) { this.velocity.y = r.find((a) => a[0] === \"y\")[1] / (obj.interval / 10); }\r\n        }\r\n\r\n        this.parent.position = Vector2.clamp(\r\n            this.parent.position.add(this.velocity.scale(obj.interval / 10)),\r\n            this.level.size.subtract(this.parent.size),\r\n            Vector2.zero,\r\n        );\r\n    }\r\n}", "import { Vector2 } from \"../../../utils/vector2\";\r\nimport { Level } from \"../../../utils/level\";\r\nimport { CanvasRadialGradientBackground } from '../../../canvas/canvasRadialGradientBackground';\r\nimport { Snake } from '../snake';\r\nimport { RandomController } from '../controllers/randomController';\r\nimport { FlatContoller } from '../../rpg/flatController';\r\nimport { DomButton } from '../../../dom/domButton';\r\n\r\nexport class DiscoLevel extends Level {\r\n    public start = new Vector2(300, 400);\r\n    public background = new CanvasRadialGradientBackground({\r\n        stops: [[0, 'red'], [1, 'blue']],\r\n    });\r\n    \r\n    constructor() {\r\n        super({hasDom: true});\r\n        this.size = new Vector2(1145, 2000)\r\n    }\r\n\r\n    build() {\r\n        this.game.getEvent('resize').subscribe(String(Math.random()), (size: Vector2) => {\r\n            this.size = size;\r\n        });\r\n        this.addChild(this.background);\r\n\r\n        this.dom.appendChild(new DomButton({\r\n            text: 'ADD',\r\n            fontSize: 39,\r\n            fontWeight: 1000,\r\n            color: 'black',\r\n            position: new Vector2(5, 120),\r\n            size: new Vector2(70, 50),\r\n            background: 'linear-gradient(90deg, rgba(255,0,0,1) 0%, rgba(255,154,0,1) 10%, rgba(208,222,33,1) 20%, rgba(79,220,74,1) 30%, rgba(63,218,216,1) 40%, rgba(47,201,226,1) 50%, rgba(28,127,238,1) 60%, rgba(95,21,242,1) 70%, rgba(186,12,248,1) 80%, rgba(251,7,217,1) 90%, rgba(255,0,0,1) 100%)',\r\n            fontFamily: 'monospace',\r\n            padding: [0, 10, 0, 10],\r\n            onClick: () => {\r\n                this.addSnake();\r\n            }\r\n        }));\r\n\r\n        this.addChild(new Snake({\r\n            totals: 30,\r\n            distance: 1,\r\n            topRadius: 50,\r\n            bottomRadius: 1,\r\n            colors: 'rainbow',\r\n            position: new Vector2(150, 200),\r\n            controllers: [new FlatContoller()]\r\n        }));\r\n\r\n        this.addSnake();\r\n    }\r\n\r\n    public addSnake() {\r\n\r\n        const topSize = 15 + Math.random() * 170;\r\n        const bottomSize = 2\r\n\r\n        this.addChild(new Snake({\r\n            totals: Math.ceil(Math.random() * 40 + 10),\r\n            distance: Math.ceil(topSize/17),\r\n            topRadius: topSize,\r\n            bottomRadius: bottomSize,\r\n            position: new Vector2(-topSize, -topSize),\r\n            colors: Math.random() < 0.2? 'green': 'rainbow',\r\n            controllers: [new RandomController(topSize, 3 + (185 - topSize)/17, Vector2.right)]\r\n        }));\r\n\r\n\r\n    }\r\n}", "import { DomButton } from '../../dom/domButton';\r\nimport { Mode } from '../../utils/mode';\r\nimport { Vector2 } from '../../utils/vector2';\r\nimport { BouncerLevel } from './levels/bouncerLevel';\r\nimport { DiscoLevel } from './levels/discoLevel';\r\n\r\nexport class SnakeMode extends Mode{\r\n    public constructor() {\r\n        super({hasDom: true});\r\n        this.dom.appendChild(new DomButton({\r\n            text: 'DISCO',\r\n            fontSize: 39,\r\n            fontWeight: 1000,\r\n            color: 'black',\r\n            position: new Vector2(5,60), \r\n            size: new Vector2(105, 50),\r\n            background: 'linear-gradient(90deg, rgba(255,0,0,1) 0%, rgba(255,154,0,1) 10%, rgba(208,222,33,1) 20%, rgba(79,220,74,1) 30%, rgba(63,218,216,1) 40%, rgba(47,201,226,1) 50%, rgba(28,127,238,1) 60%, rgba(95,21,242,1) 70%, rgba(186,12,248,1) 80%, rgba(251,7,217,1) 90%, rgba(255,0,0,1) 100%)',\r\n            fontFamily: 'monospace',\r\n            padding: [0,10,0,10],\r\n            onClick: ()=>{\r\n                this.mode.switchLevel('disco')\r\n            }\r\n        }));\r\n        this.dom.appendChild(new DomButton({\r\n            text: 'BOUNCE',\r\n            fontSize: 39,\r\n            fontWeight: 1000,\r\n            color: 'white',\r\n            position: new Vector2(135,60), \r\n            size: new Vector2(130, 50),\r\n            background: '#ff00ffaa',\r\n            fontFamily: 'monospace',\r\n            padding: [0,10,0,10],\r\n            onClick: ()=>{\r\n                this.mode.switchLevel('bounce')\r\n            }\r\n        }));\r\n    }\r\n\r\n    build(){\r\n        super.build();\r\n        this.addLevel('disco', new DiscoLevel());\r\n        this.addLevel('bounce', new BouncerLevel());\r\n        this.switchLevel('disco');\r\n    }\r\n}", "import { Vector2 } from './vector2';\r\n\r\nexport type TickerReturnData = {interval: number, total: number}\r\nexport type TickerCallback = (obj: TickerReturnData) => void;\r\nexport class Ticker {\r\n    private callbacks: TickerCallback[] = [];\r\n    private sTime: number;\r\n    public get startTime() {\r\n        return this.sTime;\r\n    }\r\n    private eTime: number;\r\n    public get elapsed() {\r\n        return this.eTime;\r\n    }\r\n    private pTime: number;\r\n    \r\n    private fFrame(time: number) {\r\n        this.sTime = time;\r\n        this.pTime = time;\r\n        window.requestAnimationFrame(this.frame.bind(this));\r\n    }\r\n    private frame(timeStamp: number) {\r\n        const interval = timeStamp - this.pTime;\r\n        this.eTime = timeStamp - this.sTime;\r\n        this.pTime = timeStamp;\r\n\r\n        const o = {\r\n            interval,\r\n            total: this.eTime,\r\n        }\r\n\r\n        this.callbacks.forEach((c) => {\r\n            c(o);\r\n        });\r\n\r\n        window.requestAnimationFrame(this.frame.bind(this));\r\n    }\r\n\r\n    public start() {\r\n        window.requestAnimationFrame(this.fFrame.bind(this));\r\n    }\r\n\r\n    public add(callback: TickerCallback) {\r\n        this.callbacks.push(callback);\r\n    }\r\n}\r\n", "export type eventFunction<T> = (v: T) => void;\r\nexport class Event<T> {\r\n    public id: string;\r\n    private subscribers: Record<string, eventFunction<T>> = {};\r\n    constructor(id: string) {\r\n        this.id = id;\r\n    }\r\n\r\n    public subscribe(key: string, func: eventFunction<T>) {\r\n        this.subscribers[key] = func;\r\n    }\r\n\r\n    public alert(v: T) {\r\n        Object.values(this.subscribers).forEach((s) => {\r\n            s(v);\r\n        });\r\n    }\r\n}\r\n", "import { CanvasElement } from '../canvas/canvasElement';\r\nimport { DomElement } from '../dom/domElement';\r\nimport { Game } from '../game';\r\nimport { Mode } from './mode';\r\n\r\nexport type inputEvents = 'mouseMove'|'keyDown'|'keyUp';\r\nexport type inputEventsData = {\r\n    'mouseMove': MouseEvent,\r\n    'keyDown': KeyboardEvent,\r\n    'keyUp': KeyboardEvent,\r\n}\r\nexport class Input {\r\n    private canvas: DomElement<\"canvas\">;\r\n    private game: Game;\r\n    public constructor(game: Game) {\r\n        this.game = game;\r\n        this.canvas = game.renderer;\r\n        this.canvas.addEventListener('mousemove', this.mouseMove.bind(this));\r\n        this.canvas.addEventListener('keydown', this.keyDown.bind(this));\r\n        this.canvas.addEventListener('keyup', this.keyUp.bind(this));\r\n        \r\n    }\r\n\r\n    public mouseMove(e: MouseEvent) {\r\n        this.send('mouseMove', e); \r\n    }\r\n\r\n    public keyDown(e: KeyboardEvent) {\r\n        this.send('keyDown', e);\r\n    }\r\n\r\n    public keyUp(e: KeyboardEvent) {\r\n        this.send('keyUp', e);\r\n    }\r\n\r\n    private send(event:inputEvents, e: KeyboardEvent|MouseEvent){\r\n        Object.values(this.game.modes).forEach((mode) => this.recursive(event, mode, e));\r\n    }\r\n\r\n    private recursive(event:inputEvents, element: CanvasElement, e: KeyboardEvent|MouseEvent) {\r\n        if (element.active) {\r\n            if (element[event]) {\r\n                if (event === 'mouseMove') {\r\n                    element[event](e as MouseEvent);\r\n                } else {\r\n                    element[event](e as KeyboardEvent);\r\n                }\r\n            }\r\n            element.lowerChildren.forEach((child) => this.recursive(event, child, e));\r\n            element.controllers.forEach((child) => this.recursive(event, child, e));\r\n        }\r\n    }\r\n}", "import { ElementRelativity } from '../utils/elementPosition';\r\nimport { TickerReturnData } from '../utils/ticker';\r\nimport { CanvasElement, CanvasElementAttributes, CanvasElementType } from './canvasElement';\r\nimport { PrepAnimation } from './prepAnimation';\r\nimport { PrepSpritesheet } from './spritesheet';\r\n\r\nexport type CanvasAnimationAttributes = CanvasElementAttributes & {\r\n    animation: PrepAnimation | PrepSpritesheet,\r\n    interval?: number,\r\n    paralax?: number,\r\n    shadow?: [string, number, number, number],\r\n    reverse?: boolean,\r\n\r\n};\r\nexport class CanvasAnimation extends CanvasElement {\r\n    public type: CanvasElementType = 'animation';\r\n    public relativity: ElementRelativity = 'anchor';\r\n    public ready: boolean = false;\r\n    private prepped: PrepAnimation | PrepSpritesheet;\r\n    public frame: number = 0;\r\n    public interval: number;\r\n    public shadow: [string, number, number, number];\r\n    public reverse: boolean;\r\n\r\n    public get max (){ return this.prepped.max }\r\n    public get frames (){ return this.prepped.frames }\r\n\r\n    constructor(attr: CanvasAnimationAttributes) {\r\n        super({...attr, autoReady: false});\r\n        this.prepped = attr.animation;\r\n        this.prepped.callback = this.build.bind(this);\r\n        this.interval = attr.interval || this.prepped.interval;\r\n        this.shadow = attr.shadow;\r\n        this.reverse = attr.reverse || false;\r\n    }\r\n\r\n    get width() {\r\n        return this.prepped.size.x;\r\n    }\r\n\r\n    get height() {\r\n        return this.prepped.size.y;\r\n    }\r\n\r\n\r\n    build(): void {\r\n        this.prepped.frames.forEach((frame) => {\r\n            this.addChild(frame, true);\r\n            frame.shadow = this.shadow;\r\n        });\r\n    }\r\n\r\n    tick(obj: TickerReturnData) {\r\n        super.tick(obj);\r\n        this.frame = (this.frame+1)%(this.max*this.interval);\r\n        this.frames.forEach((frame,i) => {\r\n            if (this.reverse){\r\n                frame.active = Math.floor(this.frame/this.interval) === this.max - i - 1;\r\n            } else {\r\n                frame.active = Math.floor(this.frame/this.interval) === i;\r\n            }\r\n        });\r\n    }\r\n}\r\n", "import { ElementRelativity } from '../utils/elementPosition';\r\nimport { Vector2 } from '../utils/vector2';\r\nimport { CanvasElement, CanvasElementAttributes,CanvasElementType } from './canvasElement';\r\nimport { PrepImage } from './prepImage';\r\n\r\nexport type CanvasImageAttributes = CanvasElementAttributes & {\r\n    image: PrepImage,\r\n    condition?: (position: Vector2, size: Vector2)=>void,\r\n    worldSpaceParalaxX? : number,\r\n    worldSpaceParalaxY? : number,\r\n    screenSpaceParalaxX? : number,\r\n    screenSpaceParalaxY? : number,\r\n    repeatX?: number,\r\n    repeatY?: number,\r\n    opacity?: number,\r\n    shadow?: [string, number, number, number],\r\n};\r\nexport class CanvasImage extends CanvasElement {\r\n    public type: CanvasElementType = 'image';\r\n    public prepped: PrepImage;\r\n    public relativity: ElementRelativity = 'relative';\r\n    public condition: (position: Vector2, size: Vector2) => void;\r\n    public repeatX: number;\r\n    public repeatY: number;\r\n    public opacity: number;\r\n    public shadow: [string, number, number, number];\r\n    public worldSpaceParalaxX: number;\r\n    public worldSpaceParalaxY: number;\r\n    public screenSpaceParalaxX: number;\r\n    public screenSpaceParalaxY: number;\r\n\r\n    get width() {\r\n        return this.prepped.width;\r\n    }\r\n    get height() {\r\n        return this.prepped.height;\r\n    }\r\n\r\n\r\n    constructor(attr: CanvasImageAttributes) {\r\n        super(attr);\r\n        this.prepped = attr.image;\r\n        this.condition = attr.condition;\r\n        this.worldSpaceParalaxX = attr.worldSpaceParalaxX || 0;\r\n        this.worldSpaceParalaxY = attr.worldSpaceParalaxY || 0;\r\n        this.screenSpaceParalaxX = attr.screenSpaceParalaxX || 0;\r\n        this.screenSpaceParalaxY = attr.screenSpaceParalaxY || 0;\r\n        this.repeatX = attr.repeatX || 1;\r\n        this.repeatY = attr.repeatY || 1;\r\n        this.opacity = attr.opacity || 1;\r\n        this.shadow = attr.shadow;\r\n    }\r\n\r\n    public render(ctx: CanvasRenderingContext2D) {        \r\n        if (this.prepped.ready && (!this.condition || this.condition(this.position.add(this.parent.position), this.prepped.size))) {            \r\n            for (let i = 0; i < this.repeatX; i++) {\r\n                for (let j = 0; j < this.repeatY; j++) {\r\n                    if (this.opacity !== 1){\r\n                        ctx.globalAlpha = this.opacity;\r\n                    }\r\n                    if (this.shadow){\r\n                        ctx.shadowColor = this.shadow[0];\r\n                        ctx.shadowOffsetX = this.shadow[1];\r\n                        ctx.shadowOffsetY = this.shadow[2];\r\n                        ctx.shadowBlur = this.shadow[3];\r\n                    }\r\n\r\n                    ctx.drawImage(\r\n                        this.prepped.image,\r\n                        this.x + (this.worldSpaceParalaxX * this.level.x) + ((this.width / 2 + this.x) - (this.mode.width / 2 - this.level.x)) * this.screenSpaceParalaxX + (i * this.prepped.width),\r\n                        this.y + (j * this.prepped.height),\r\n                        this.prepped.width,\r\n                        this.prepped.height,\r\n                    );\r\n                }\r\n            }     \r\n        }\r\n        // this.level.x + this.x + (this.prepped.width/2); // center of image\r\n        // this.level.x + this.x + (this.prepped.width/2);\r\n    }\r\n}\r\n", "\r\nimport { ElementRelativity } from '../utils/elementPosition';\r\nimport { TickerReturnData } from '../utils/ticker';\r\nimport { Vector2 } from \"../utils/vector2\";\r\nimport { CanvasAnimation } from './canvasAnimation';\r\nimport { CanvasElement, CanvasElementAttributes } from './canvasElement';\r\nimport { CanvasImage } from './canvasImage';\r\nimport { CanvasPrepSprites } from './canvasPrepSprites';\r\nimport { PrepAnimation } from './prepAnimation';\r\nimport { PrepImage } from './prepImage';\r\n\r\nexport type CanvasGridAttributes = CanvasElementAttributes & {\r\n    json: string;\r\n    sprites: CanvasPrepSprites\r\n    factor?: number;\r\n    paralax?: number;\r\n    condition?: (position: Vector2, size: Vector2)=>void\r\n};\r\nexport type TileData = {\r\n    x: number,\r\n    y: number,\r\n    \"type\": string;\r\n};\r\nexport class CanvasGrid extends CanvasElement {\r\n    public type = 'logic' as const;\r\n    public relativity: ElementRelativity = 'anchor';\r\n\r\n    public factor: number;\r\n    public json: string;\r\n    public ready: Boolean = false;\r\n    private spritesData: CanvasPrepSprites;\r\n    private paralax: number;\r\n    condition: (position: Vector2, size: Vector2) => void;\r\n\r\n    constructor(attr: CanvasGridAttributes) {\r\n        super(attr);\r\n        this.factor = attr.factor || 10;\r\n        this.json = attr.json;\r\n        this.spritesData = attr.sprites;\r\n        this.paralax = attr.paralax || 0;\r\n        this.condition = attr.condition;\r\n    }\r\n\r\n    public build(): void {\r\n        CanvasGrid.loadJsonFile(this.json).then(this.jsonLoaded.bind(this));\r\n        this.game.waitCount++;\r\n    }\r\n\r\n    private jsonLoaded(tiles: TileData[]) {\r\n        tiles.forEach((tile) => {\r\n            \r\n            if (this.spritesData.sprites[tile.type].type === 'image'){\r\n                this.addChild(new CanvasImage({\r\n                    position: new Vector2(\r\n                        tile.x * this.factor,\r\n                        tile.y * this.factor\r\n                    ),\r\n                    image: this.spritesData.sprites[tile.type] as PrepImage,\r\n                    condition: this.condition?this.condition:null\r\n                }));\r\n            } else {\r\n                this.addChild(new CanvasAnimation({\r\n                    position: new Vector2(\r\n                        tile.x * this.factor,\r\n                        tile.y * this.factor\r\n                    ),\r\n                    animation: this.spritesData.sprites[tile.type] as PrepAnimation,\r\n                }));\r\n            }\r\n        });\r\n\r\n        this.game.waitCount--\r\n    }\r\n\r\n    public tick(obj: TickerReturnData): void {\r\n        super.tick(obj);\r\n        this.x = (this.paralax * this.level.x);\r\n    }\r\n\r\n    private static async loadJsonFile(url: string): Promise<any> {\r\n        const response = await fetch(url);\r\n        const data = await response.json();\r\n        return data;\r\n    }\r\n\r\n}\r\n", "import { Game } from '../game';\r\nimport { Vector2 } from '../utils/vector2';\r\n\r\nexport type PrepImageAttributes = {\r\n    factor?: number;\r\n    url: string;\r\n    image?: HTMLImageElement;\r\n    cropSize?: Vector2,\r\n    cropPosition?: Vector2,\r\n};\r\nexport class PrepImage {\r\n    private game: Game;\r\n    public type: 'image' = 'image';\r\n    public original: HTMLImageElement;\r\n    public image: HTMLImageElement;\r\n    protected cropSize: Vector2;\r\n    protected cropPosition: Vector2;\r\n    public get size(): Vector2 {\r\n        return new Vector2(this.width, this.height);\r\n    }\r\n    public get width() { return this.image.width; }\r\n    public get height() { return this.image.height; }\r\n\r\n    public factor: number;\r\n    public ready: boolean = false;\r\n\r\n    constructor(attr: PrepImageAttributes, game: Game) {\r\n        this.game = game;\r\n        this.cropSize = attr.cropSize;\r\n        this.cropPosition = attr.cropPosition || Vector2.zero;\r\n        this.factor = attr.factor || 1;\r\n\r\n        if (attr.image) {\r\n            this.original = attr.image;\r\n            this.upScale();\r\n        } else {\r\n            this.original = new Image();\r\n            this.original.src = attr.url;\r\n            this.game.waitCount++;\r\n            this.original.onload = () => {\r\n                this.game.waitCount--;\r\n                this.upScale();\r\n            };\r\n        }\r\n    }\r\n\r\n    protected upScale() {\r\n        this.game.waitCount++;\r\n        const originalSize = this.cropSize || new Vector2(this.original.width, this.original.height);\r\n        const newSize = originalSize.scale(this.factor);\r\n\r\n        const os = document.createElement('canvas');\r\n        os.width = newSize.x;\r\n        os.height = newSize.y;\r\n        const osCTX = os.getContext('2d', { alpha: true, willReadFrequently: true });\r\n\r\n        osCTX.drawImage(this.original, this.cropPosition.x, this.cropPosition.y, originalSize.x, originalSize.y, 0, 0, originalSize.x, originalSize.y);\r\n\r\n        const ss = document.createElement('canvas');\r\n        ss.width = newSize.x;\r\n        ss.height = newSize.y;\r\n        const ssCTX = ss.getContext('2d', { willReadFrequently: true });\r\n\r\n        for (let x = 0; x < originalSize.x; x++) {\r\n            for (let y = 0; y < originalSize.y; y++) {\r\n                const r = osCTX.getImageData(x, y, 1, 1, { colorSpace: \"srgb\" });\r\n                ssCTX.fillStyle = `rgba(${r.data[0]}, ${r.data[1]}, ${r.data[2]}, ${r.data[3] / 255})`;\r\n                ssCTX.fillRect(\r\n                    Math.round(x * this.factor),\r\n                    newSize.y - Math.round(y * this.factor),\r\n                    Math.round(this.factor),\r\n                    Math.round(this.factor) * -1\r\n                );\r\n            }\r\n        }\r\n\r\n        const newI = new Image();\r\n        newI.src = ss.toDataURL();\r\n\r\n        newI.onload = () => {\r\n            this.game.waitCount--;\r\n            this.loaded(newI);\r\n        };\r\n    }\r\n\r\n    protected loaded(i: HTMLImageElement) {\r\n        this.image = i;\r\n        this.ready = true;\r\n    }\r\n\r\n}\r\n", "import { Game } from '../game';\r\nimport { CanvasImage } from './canvasImage';\r\nimport { PrepImage } from './prepImage';\r\n\r\nexport type PrepAnimationAttributes = {\r\n    interval?: number;\r\n    factor?: number;\r\n    urls: string[];\r\n};\r\nexport class PrepAnimation {\r\n    public type: 'animation' = 'animation';\r\n    public frames: CanvasImage[] = [];\r\n    public max: number = 0;\r\n    public factor: number;\r\n    public ready: boolean = false;\r\n    protected urls: string[];\r\n    public interval: number;\r\n    protected game: Game;\r\n    public callback: ()=>void;\r\n\r\n    public get size() {\r\n        return this.frames[0].prepped.size;\r\n    }\r\n\r\n    constructor(attr: PrepAnimationAttributes, game: Game) {\r\n        this.game = game;\r\n        this.factor = attr.factor || 1;\r\n        this.interval = attr.interval || 10;\r\n        this.urls = attr.urls;\r\n        this.add();\r\n    }\r\n\r\n    protected add() {\r\n        this.urls.forEach((url)=>{      \r\n            this.game.waitCount++;\r\n            const frame = new CanvasImage({image: new PrepImage({ url, factor: this.factor }, this.game)});\r\n            this.frames.push(frame);\r\n            this.game.waitCount--;\r\n            this.max++;\r\n        });\r\n        if(this.callback){\r\n            this.callback();\r\n        }\r\n    }\r\n}\r\n", "\r\nimport { Game } from '../game';\r\nimport { CanvasController } from '../utils/controller';\r\nimport { ElementRelativity } from '../utils/elementPosition';\r\nimport { Vector2 } from \"../utils/vector2\";\r\nimport { PrepAnimation } from './prepAnimation';\r\nimport { PrepImage } from './prepImage';\r\n\r\nexport type CanvasGridAttributes = {\r\n    factor?: number;\r\n    jsons: string[],\r\n    callback?: ()=>void;\r\n};\r\n\r\n\r\nexport interface SpriteImageJSON {\r\n    \"name\": string,\r\n    \"type\": 'image',\r\n    \"image\": SpriteImagePrepData,\r\n};\r\n\r\nexport interface SpriteImagePrepData{\r\n    \"url\": string,\r\n};\r\n\r\nexport interface SpriteAnimationJSON {\r\n    \"name\": string,\r\n    \"type\": 'animation'\r\n    \"animation\": SpriteAnimationPrepData,\r\n};\r\n\r\nexport interface SpriteAnimationPrepData {\r\n    \"urls\": string[],\r\n    \"interval\"?: number,\r\n};\r\n\r\n\r\n\r\nexport class CanvasPrepSprites extends CanvasController{\r\n    public type = 'logic' as const;\r\n    public relativity: ElementRelativity = 'relative';\r\n\r\n    public factor: number;\r\n    public gridWidth: number;\r\n    public gridHeight: number;\r\n    public jsons: string[];\r\n    public ready: Boolean = false;\r\n    private readyCallback: () => void;\r\n    private spritesLoaded: number = 0;\r\n    private spritesMax: number = 0;\r\n    public sprites: Record<string, PrepImage|PrepAnimation> = {};\r\n\r\n    public get gridDimentsion(): Vector2 {\r\n        return new Vector2(this.gridWidth, this.gridHeight);\r\n    }\r\n\r\n    public set gridDimentsion(value: Vector2) {\r\n        this.gridWidth = value.x;\r\n        this.gridHeight = value.y;\r\n    }\r\n\r\n    constructor(attr: CanvasGridAttributes) {\r\n        super();\r\n        this.factor = attr.factor || 10;\r\n        this.spritesMax = attr.jsons.length;\r\n        this.readyCallback = attr.callback;\r\n        this.jsons = attr.jsons;\r\n    }\r\n\r\n    public build(): void {\r\n        this.game.waitCount++\r\n        this.jsons.forEach((json) => {\r\n            this.game.waitCount++\r\n            CanvasPrepSprites.loadJsonFile(json).then(this.jsonLoaded.bind(this));\r\n        });\r\n    }\r\n\r\n    private checkReady() {\r\n        if (this.spritesLoaded === this.spritesMax){\r\n            this.ready = true;\r\n            this.game.waitCount--\r\n            this.readyCallback();\r\n        }\r\n    }\r\n\r\n    private jsonLoaded(sprites: (SpriteImageJSON|SpriteAnimationJSON)[]) {\r\n        sprites.forEach((sprite) => {\r\n            if (!this.sprites[sprite.name]){\r\n                if (sprite.type === 'image'){\r\n                    this.sprites[sprite.name] = new PrepImage(Object.assign(sprite.image, {factor: this.factor}), this.game);\r\n                } else {\r\n                    this.sprites[sprite.name] = new PrepAnimation(Object.assign(sprite.animation, {factor: this.factor}), this.game);\r\n                }\r\n            }\r\n        });\r\n        this.game.waitCount--\r\n        this.spritesLoaded++;\r\n        this.checkReady();\r\n    }\r\n\r\n    public static async loadJsonFile(url: string): Promise<any> {\r\n        const response = await fetch(url);\r\n        const data = await response.json();\r\n        return data;\r\n    }\r\n\r\n}\r\n", "import { CanvasElement, CanvasElementAttributes, CanvasElementType } from '../canvas/canvasElement';\r\nimport { CanvasSquare } from '../canvas/canvasSquare';\r\nimport { ElementRelativity } from './elementPosition';\r\n\r\nexport type ColliderAttributes = CanvasElementAttributes & {\r\n    cornerTolerance?: number;\r\n    colliderType?: ColliderType,\r\n    callback?: () => void;\r\n}\r\n\r\nexport type ColliderType = 'static' | 'dynamic';\r\n\r\nexport class Collider extends CanvasElement {\r\n    public type: CanvasElementType = 'collider';\r\n    public relativity: ElementRelativity = 'anchor';\r\n    public colliderType: ColliderType = 'static';\r\n    public cornerTolerance: number;\r\n    public callback: () => void;\r\n\r\n    public constructor(attr: ColliderAttributes = {}) {\r\n        super(attr);\r\n        this.cornerTolerance = attr.cornerTolerance || 0;\r\n        this.colliderType = attr.colliderType || 'static';\r\n        this.callback = attr.callback;\r\n\r\n    }\r\n\r\n    public build(): void {\r\n        // this.addChild( new CanvasSquare({size: this.size, color: 'rgba(255,0,0,0.5)', rounded: 0}));\r\n    }\r\n}", "import { Collider, ColliderAttributes, ColliderType } from './collider';\r\nimport { ElementRelativity } from './elementPosition';\r\n\r\nexport type CharacterAttributes = ColliderAttributes & {\r\n}\r\n\r\nexport abstract class Character extends Collider {\r\n    public relativity: ElementRelativity = 'anchor';\r\n    public colliderType: ColliderType = 'dynamic';\r\n    public collider: Collider;\r\n\r\n    constructor(attr: CharacterAttributes) {\r\n        super(attr);\r\n        this.position = attr.position;\r\n        this.size = attr.size;\r\n        this.collider = new Collider({\r\n            size: this.size,\r\n            cornerTolerance: 30,\r\n        });\r\n        this.colliderType = 'dynamic';\r\n    }\r\n}\r\n", "import { CanvasAnimation } from '../../canvas/canvasAnimation';\r\nimport { CanvasPrepSprites, SpriteAnimationJSON } from '../../canvas/canvasPrepSprites';\r\nimport { PrepAnimation } from '../../canvas/prepAnimation';\r\nimport { Character } from '../../utils/character';\r\nimport { CanvasController } from '../../utils/controller';\r\nimport { ElementRelativity } from '../../utils/elementPosition';\r\nimport { TickerReturnData } from '../../utils/ticker';\r\nimport { Util } from '../../utils/utils';\r\nimport { Vector2 } from '../../utils/vector2';\r\n\r\nexport class RPGCharacter extends Character {\r\n    private scale: number = 6;\r\n    public relativity: ElementRelativity = 'anchor';\r\n    public animations: Record<string, CanvasAnimation> = {};\r\n    public direction: '00' | '09' | '18' | '27' = '00';\r\n    public phase: 'idle' | 'attack' | 'walk' = 'idle';\r\n\r\n    constructor({\r\n        scale = 6,\r\n        position = Vector2.zero,\r\n        controllers = []\r\n    }: {\r\n        scale?: number;\r\n        position?: Vector2;\r\n        controllers?: CanvasController[];\r\n    } = {}) {\r\n        super({\r\n            position,\r\n            controllers,\r\n            size: new Vector2(10 * scale, 7 * scale),\r\n        });\r\n    }\r\n\r\n    build() {\r\n        super.build();\r\n\r\n        // this.addChild(new CanvasSquare({ color: 'blue', size: new Vector2(16*this.scale*4, 16*this.scale*4), relativity: 'relative' }));\r\n        CanvasPrepSprites.loadJsonFile('/json/character/sprites.json').then((sprite: SpriteAnimationJSON[]) => {\r\n            sprite.forEach(sprite => {\r\n                this.animations[sprite.name] = new CanvasAnimation({\r\n                    position: new Vector2(-165, -80),\r\n                    animation: new PrepAnimation({\r\n                        urls: sprite.animation.urls,\r\n                        interval: 30,\r\n                        factor: this.scale\r\n                    }, this.game)\r\n                });\r\n                this.addChild(this.animations[sprite.name]);\r\n            });\r\n        });\r\n    }\r\n\r\n    public tick(o: TickerReturnData) {\r\n        super.tick(o);\r\n        this.phase = this.movedAmount.magnitude() > .1 ? 'walk' : 'idle';\r\n        if (this.phase === 'walk') {\r\n            const degrees = (3 - Math.round((this.movedAmount.angleDegrees() + 1) / 90 + 4) % 4) * 9;\r\n            this.direction = degrees.toString().padStart(2, '0') as '00' | '09' | '18' | '27';\r\n        }\r\n\r\n\r\n        Object.entries(this.animations).forEach(([key, animation]) => {\r\n            if (key.startsWith('walk')) {\r\n                animation.interval = Util.clamp(Math.floor(30 - this.movedAmount.magnitude() * 0.8), 5, 50);\r\n            }\r\n            animation.active = key === `${this.phase}${this.direction}`;\r\n        });\r\n    }\r\n}\r\n", "import { CanvasWrapper } from '../../../canvas/canvasWrapper';\r\nimport { CanvasController } from '../../../utils/controller';\r\nimport { TickerReturnData } from '../../../utils/ticker';\r\nimport { Util } from '../../../utils/utils';\r\nimport { Vector2 } from '../../../utils/vector2';\r\n\r\nexport class CameraController extends CanvasController {\r\n    private target: CanvasWrapper;\r\n    constructor({ target }: {\r\n        target: CanvasWrapper;\r\n    }) {\r\n        super();\r\n        this.target = target;\r\n    }\r\n\r\n    public tick(obj: TickerReturnData) {\r\n        super.tick(obj);\r\n\r\n        const mid = this.target.position\r\n            .add(this.target.size.subtract(this.mode.size).scale(0.5))\r\n            .scale(-1)\r\n            \r\n        const rel = this.mode.size.subtract(this.level.size);\r\n\r\n        this.parent.position = new Vector2(\r\n            rel.x < 0 ? Util.clamp(mid.x, rel.x, 0): rel.x/2,\r\n            rel.y < 0 ? Util.clamp(mid.y, rel.y, 0): rel.y/2\r\n        )\r\n\r\n    }\r\n}", "import { CanvasColorBackground } from '../../../canvas/canvasBackground';\r\nimport { CanvasGrid } from '../../../canvas/canvasGrid';\r\nimport { Level } from '../../../utils/level';\r\nimport { Vector2 } from '../../../utils/vector2';\r\nimport { RPGCharacter } from '../rpgCharacter';\r\nimport { FlatContoller } from '../flatController';\r\nimport { CameraController } from '../../snakeMode/controllers/cameraController';\r\nimport { TickerReturnData } from '../../../utils/ticker';\r\nimport { CanvasPrepSprites } from '../../../canvas/canvasPrepSprites';\r\nimport { CanvasImage } from '../../../canvas/canvasImage';\r\nimport { PrepImage } from '../../../canvas/prepImage';\r\nimport { Collider } from '../../../utils/collider';\r\nimport { DomText } from '../../../dom/domText';\r\nimport { DomButton } from '../../../dom/domButton';\r\n\r\nexport class OverworldLevel extends Level {\r\n    private scale = 6;\r\n\r\n    public start = new Vector2(7 * this.scale * 16, 7 * this.scale * 16);\r\n    public background = new CanvasColorBackground('#272727');\r\n    public character: RPGCharacter;\r\n    public sprites: CanvasPrepSprites;\r\n    public mo: DomText;\r\n\r\n    constructor() {\r\n        super({\r\n            hasDom: true,\r\n            size: new Vector2(320 * 6, 320 * 6),\r\n        });\r\n\r\n        this.character = new RPGCharacter({\r\n            position: this.start,\r\n            controllers: [new FlatContoller()],\r\n        });\r\n\r\n        this.addControllers([new CameraController({ target: this.character })]);\r\n\r\n        this.sprites = new CanvasPrepSprites({\r\n            jsons: ['/json/overworld/sprites.json'],\r\n            factor: this.scale,\r\n            callback: () => {\r\n                this.assetsLoaded();\r\n            }\r\n        });\r\n        this.addControllers([this.sprites])\r\n    }\r\n\r\n    assetsLoaded() {\r\n        this.addChild(this.background);\r\n\r\n        this.addChild(new CanvasImage({\r\n            image: new PrepImage({ url: '/img/overworld/terrain.png', factor: this.scale }, this.game),\r\n        }));\r\n\r\n        \r\n        this.addChild(new CanvasGrid({\r\n            sprites: this.sprites,\r\n            json: '/json/overworld/decorations.json',\r\n            factor: this.scale,\r\n        }));\r\n\r\n        this.addChild(new CanvasGrid({\r\n            sprites: this.sprites,\r\n            json: '/json/overworld/objects.json',\r\n            factor: this.scale,\r\n            condition: (entity)=>entity.y >= this.character.y\r\n        }));\r\n\r\n        this.addChild(this.character);\r\n\r\n        this.addChild(new CanvasGrid({\r\n            sprites: this.sprites,\r\n            json: '/json/overworld/objects.json',\r\n            factor: this.scale,\r\n            condition: (entity)=>entity.y < this.character.y\r\n        }));\r\n\r\n        this.addChild(new CanvasGrid({\r\n            sprites: this.sprites,\r\n            json: '/json/overworld/overlay.json',\r\n            factor: this.scale\r\n        }));\r\n\r\n        (([\r\n            [20,122,25,28],//doghouse\r\n            [147,163,173,50],//riverRight\r\n            [0,163,125,50],//riverLeft\r\n            [64,120,31,30],//statue\r\n            [23,260,25,62],//house1\r\n            [48,282,17,39],//house2\r\n            [65,260,24,62],//house3\r\n            [-15,0,30,112,100], //hedgeLeft\r\n            [305,0,30,112,100], //hedgeRight\r\n            [0,0,320,14,100], //hedgeBottom\r\n            [97,272,13,24],\r\n            [176,112,15,19],\r\n            [194,103,49,10],\r\n            [255,103,15,60],\r\n            [272,113,41,39],\r\n            [67,20,58,16],\r\n            [32,37,15,16],\r\n        ]) as ([number,number,number,number,number?])[]).forEach(([x,y,w,h,t = 30]) => {\r\n            this.addChild(new Collider({\r\n                position: new Vector2(this.scale*x,this.scale*y),\r\n                size: new Vector2(this.scale*w,this.scale*h),\r\n                cornerTolerance: t,\r\n            }));\r\n        });\r\n\r\n        // const [x,y,w,h] = [23,260,25,62];\r\n        // this.mo = new DomButton({\r\n        //     position: new Vector2(this.scale*x,this.scale*y),\r\n        //     size: new Vector2(this.scale*w,this.scale*h),\r\n        //     background: 'rgba(0, 255,0,0.3)',\r\n        //     fontSize: 50,\r\n        //     onClick: () => {\r\n        //         navigator.clipboard.writeText(this.mo.text)\r\n        //     },\r\n        // })\r\n        // this.mo.dom.style.pointerEvents = 'all';\r\n        // this.mo.dom.style.userSelect = 'all';\r\n        // this.addChild(this.mo);\r\n    }\r\n\r\n    // tick(obj: TickerReturnData): void {\r\n    //     super.tick(obj);\r\n    //     if (this.mo){\r\n    //         this.mo.text = `[${Math.round(this.mo.x/this.scale)},${Math.round(this.mo.y/this.scale)},${Math.round(this.mo.width/this.scale)},${Math.round(this.mo.height/this.scale)}]`;\r\n    //     }\r\n    // }\r\n}", "import { CanvasColorBackground } from '../../canvas/canvasBackground';\r\nimport { Mode } from '../../utils/mode';\r\nimport { TickerReturnData } from '../../utils/ticker';\r\nimport { OverworldLevel as OverworldLevel } from './levels/overworldLevel';\r\n\r\nexport class RPGMode extends Mode{\r\n    public constructor() {\r\n        super({hasDom: true});\r\n    }\r\n\r\n    build(){\r\n        super.build();\r\n        this.addChild(new CanvasColorBackground('#272727'))\r\n        this.addLevel('overworld', new OverworldLevel());\r\n        this.switchLevel('overworld');\r\n    }\r\n\r\n}", "import { CanvasElement } from '../canvas/canvasElement';\r\nimport { ElementAttributes } from \"../utils/element\";\r\nimport { Mode } from '../utils/mode';\r\nimport { TickerReturnData } from '../utils/ticker';\r\nimport { Vector2 } from \"../utils/vector2\";\r\nimport { DomElement } from './domElement';\r\n\r\nexport type DomElementAttributes = ElementAttributes & {\r\n    id?: string,\r\n    size?: Vector2,\r\n    background?: string,\r\n    position?: Vector2;\r\n};\r\nexport class DomCanvas extends DomElement<'canvas'> {\r\n    public dom: HTMLElementTagNameMap['canvas'];\r\n    public ctx: CanvasRenderingContext2D;\r\n\r\n    constructor() {\r\n        super('canvas');\r\n        this.dom = document.createElement('canvas');\r\n        this.dom.style.position = 'absolute';\r\n        this.dom.style.imageRendering = 'pixelated';\r\n        this.dom.style.pointerEvents = 'all';\r\n        this.dom.style.bottom = '0px';\r\n        this.ctx = this.dom.getContext('2d');\r\n        this.ctx.imageSmoothingEnabled = false;\r\n    }\r\n\r\n    public build(): void {\r\n        this.game.ctx = this.ctx;\r\n        this.dom.tabIndex = 1;\r\n\r\n        this.game.getEvent('resize').subscribe(String(Math.random()), (size: Vector2) => {\r\n            this.size = size;\r\n        });\r\n        this.game.resize();\r\n    }\r\n\r\n    public addMode(child: Mode) {\r\n        child.parent ??= this.game;\r\n        child.game ??= this.game;\r\n        child.mode ??= this.mode;\r\n        child.level ??= this.level;\r\n        this.game.dom.appendChild(child.dom);\r\n        child.registerControllers(child);\r\n        child.build();\r\n    }\r\n\r\n    public tick(obj: TickerReturnData) {\r\n\r\n        // this.ctx.fillStyle = 'red';\r\n        // this.ctx.beginPath();\r\n        // this.ctx.roundRect(100, 100, 100, 100, 100);\r\n        // this.ctx.fill();\r\n        // this.ctx.closePath();\r\n\r\n        super.tick(obj);\r\n\r\n        this.ctx.save();\r\n        this.ctx.scale(1, -1);\r\n        this.ctx.translate(0, -this.height);\r\n\r\n        Object.values(this.game.modes).filter((child) => child.active).forEach((mode) => mode.tick(obj));\r\n        Object.values(this.game.modes).filter((child) => child.visible && child.active).forEach((mode) => {\r\n            mode.preRender(this.ctx);\r\n            mode.postRender(this.ctx);\r\n        });\r\n        this.ctx.restore();\r\n    }\r\n}\r\n\r\n\r\n", "import { CanvasAnimation } from '../../../canvas/canvasAnimation';\r\nimport { CanvasPrepSprites, SpriteAnimationJSON } from '../../../canvas/canvasPrepSprites';\r\nimport { CanvasSquare } from '../../../canvas/canvasSquare';\r\nimport { PrepAnimation } from '../../../canvas/prepAnimation';\r\nimport { Character } from '../../../utils/character';\r\nimport { CanvasController } from '../../../utils/controller';\r\nimport { ElementRelativity } from '../../../utils/elementPosition';\r\nimport { TickerReturnData } from '../../../utils/ticker';\r\nimport { Util } from '../../../utils/utils';\r\nimport { Vector2 } from '../../../utils/vector2';\r\n\r\nexport class SideCharacter extends Character {\r\n    private scale: number = 6;\r\n    public relativity: ElementRelativity = 'anchor';\r\n    public animations: Record<string, CanvasAnimation> = {};\r\n    public direction: '00' | '09' | '18' | '27' = '00';\r\n    public phase: 'idle' | 'attack' | 'walk' = 'idle';\r\n\r\n    constructor({\r\n        scale = 5,\r\n        position = Vector2.zero,\r\n        controllers = []\r\n    }: {\r\n        scale?: number;\r\n        position?: Vector2;\r\n        controllers?: CanvasController[];\r\n    } = {}) {\r\n        super({\r\n            position,\r\n            controllers,\r\n            size: new Vector2(10 * scale, 20 * scale),\r\n        });\r\n    }\r\n\r\n    build() {\r\n        super.build();\r\n\r\n        // this.addChild(new CanvasSquare({ color: 'blue', size: new Vector2(16*this.scale*4, 16*this.scale*4), relativity: 'relative' }));\r\n        CanvasPrepSprites.loadJsonFile('/json/character/sprites.json').then((sprite: SpriteAnimationJSON[]) => {\r\n            sprite.forEach(sprite => {\r\n                this.animations[sprite.name] = new CanvasAnimation({\r\n                    position: new Vector2(-165, -100),\r\n                    animation: new PrepAnimation({\r\n                        urls: sprite.animation.urls,\r\n                        interval: 30,\r\n                        factor: this.scale\r\n                    }, this.game)\r\n                });\r\n                this.addChild(this.animations[sprite.name]);\r\n            });\r\n        });\r\n\r\n    }\r\n    public tick(o: TickerReturnData) {\r\n        super.tick(o);\r\n        this.phase = this.movedAmount.magnitude() > .1 ? 'walk' : 'idle';\r\n        if (this.phase === 'walk') {\r\n            const degrees = (3 - Math.round((this.movedAmount.angleDegrees() + 1) / 90 + 4) % 4) * 9;\r\n            this.direction = degrees.toString().padStart(2, '0') as '00' | '09' | '18' | '27';\r\n        }\r\n\r\n\r\n        Object.entries(this.animations).forEach(([key, animation]) => {\r\n            if (key.startsWith('walk')) {\r\n                animation.interval = Util.clamp(Math.floor(30 - this.movedAmount.magnitude() * 0.8), 5, 50);\r\n            }\r\n            animation.active = key === `${this.phase}${this.direction}`;\r\n        });\r\n    }\r\n}", "import { Character } from '../../../utils/character';\r\nimport { Collisions } from '../../../utils/collisions';\r\nimport { CanvasController } from '../../../utils/controller';\r\nimport { TickerReturnData } from '../../../utils/ticker';\r\nimport { Util } from '../../../utils/utils';\r\nimport { Vector2 } from '../../../utils/vector2';\r\n\r\nexport class SideContoller extends CanvasController {\r\n    private speed = 4;\r\n    private jumpHeight = 14;\r\n    private velocity: Vector2 = Vector2.zero;\r\n    public parent: Character;\r\n    public jumping: boolean = false;\r\n\r\n    keyDown(e: KeyboardEvent): void {\r\n        if (!this.jumping && this.mode.input.up) {\r\n            this.velocity.y = this.jumpHeight;\r\n            this.jumping = true;\r\n        }\r\n    }\r\n\r\n    public tick(obj: TickerReturnData) {\r\n        super.tick(obj);\r\n\r\n        this.velocity.x = Util.to0(this.velocity.x * 0.9, 0.1);\r\n        this.velocity.y = Util.to0(this.velocity.y - (9.8 * 0.02), 0.001);\r\n        this.velocity.x += this.mode.input.right ? 1 : this.mode.input.left ? -1 : 0 * this.speed;\r\n\r\n        const r = Collisions.check(this.level.colliders, this.parent, this.velocity.scale(obj.interval / 10));\r\n\r\n        if (r.length !== 0) {\r\n            r.sort(function (a, b) {\r\n                return Math.abs(a[1]) - Math.abs(b[1]);\r\n            });\r\n            if (r.find((a) => a[0] === \"x\")) {\r\n                this.velocity.x = r.find((a) => a[0] === \"x\")[1] / (obj.interval / 10);\r\n            }\r\n            if (r.find((a) => a[0] === \"y\")) {\r\n                if (this.velocity.y <= 0) {\r\n                    this.jumping = false;\r\n                }\r\n                this.velocity.y = r.find((a) => a[0] === \"y\")[1] / (obj.interval / 10);\r\n            }\r\n        }\r\n\r\n\r\n        this.parent.position = Vector2.clamp(\r\n            this.parent.position.add(this.velocity.scale(obj.interval / 10)),\r\n            this.level.size.subtract(this.parent.size),\r\n            Vector2.zero,\r\n        );\r\n    }\r\n}", "import { Game } from '../game';\r\nimport { Vector2 } from '../utils/vector2';\r\nimport { CanvasImage } from './canvasImage';\r\nimport { PrepImage } from './prepImage';\r\n\r\nexport type PrepSpritesheetAttributes = {\r\n    url: string,\r\n    size: Vector2;\r\n    repeatX?: number,\r\n    repeatY?: number,\r\n    sectionX?: number,\r\n    sectionY?: number,\r\n    interval?: number;\r\n    factor?: number;\r\n};\r\nexport class PrepSpritesheet {\r\n    public type: 'animation' = 'animation';\r\n    protected url: string;\r\n    public size: Vector2;\r\n    protected repeatX: number;\r\n    protected repeatY: number;\r\n    protected sectionX: number;\r\n    protected sectionY: number;\r\n    protected factor: number;\r\n    protected game: Game;\r\n    public ready: boolean = false;\r\n    public interval: number;\r\n    public frames: CanvasImage[] = [];\r\n    public max: number = 0;\r\n    public callback: ()=>void;\r\n\r\n    constructor(attr: PrepSpritesheetAttributes, game: Game) {\r\n        this.game = game;\r\n        this.factor = attr.factor || 1;\r\n        this.interval = attr.interval || 10;\r\n        this.url = attr.url;\r\n        this.size = attr.size;\r\n        this.repeatX = attr.repeatX || 1;\r\n        this.repeatY = attr.repeatY || 1;\r\n        this.sectionX = attr.sectionX || 0;\r\n        this.sectionY = attr.sectionY || 0;\r\n        this.game.waitCount++;\r\n        const i = new Image();\r\n        i.src = this.url;\r\n        i.onload = () => {\r\n            this.game.waitCount--;\r\n            this.add(i);\r\n            if(this.callback){\r\n                this.callback();\r\n            }\r\n        }\r\n    }\r\n\r\n    protected add(image: HTMLImageElement) {\r\n        for (let j = 0; j < this.repeatY; j++) {\r\n            for (let i = 0; i < this.repeatX; i++) {\r\n                const frame = new CanvasImage({\r\n                    image: new PrepImage({\r\n                        image,\r\n                        url: this.url,\r\n                        factor: this.factor,\r\n                        cropPosition: new Vector2(this.sectionX + (this.size.x * i), this.sectionY + (this.size.y * j)),\r\n                        cropSize: this.size\r\n                    },this.game)\r\n                });\r\n                this.frames.push(frame);\r\n                this.max++;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n", "import { CanvasAnimation } from '../../../canvas/canvasAnimation';\r\nimport { CanvasImage } from '../../../canvas/canvasImage';\r\nimport { CanvasSquare } from '../../../canvas/canvasSquare';\r\nimport { CanvasWrapper } from '../../../canvas/canvasWrapper';\r\nimport { PrepImage } from '../../../canvas/prepImage';\r\nimport { PrepSpritesheet } from '../../../canvas/spritesheet';\r\nimport { Collider } from '../../../utils/collider';\r\nimport { ElementRelativity } from '../../../utils/elementPosition';\r\nimport { Vector2 } from '../../../utils/vector2';\r\n\r\n\r\nexport class Locomotive extends CanvasWrapper {\r\n    public background: CanvasAnimation;\r\n    public foreground: CanvasAnimation;\r\n    public relativity: ElementRelativity = 'anchor';\r\n    constructor(x: number, y: number = 100, w: number = 800, h: number = 400) {\r\n        super({\r\n            position: new Vector2(x, y),\r\n            size: new Vector2(w, h),\r\n        });\r\n    }\r\n\r\n    build() {\r\n\r\n        this.background = new CanvasAnimation({\r\n            animation:  new PrepSpritesheet({\r\n                url: '/img/train/sheet_train_v18.png',\r\n                factor: 6,\r\n                size: new Vector2(256, 64),\r\n                repeatX: 16,\r\n                interval: 20,\r\n            }, this.game),\r\n            position: new Vector2(0, 0),\r\n        });\r\n        this.addChild(this.background);\r\n\r\n        this.foreground = new CanvasAnimation({\r\n            animation:  new PrepSpritesheet({\r\n                url: '/img/train/sheet_train_v18.png',\r\n                factor: 6,\r\n                size: new Vector2(256, 64),\r\n                repeatX: 16,\r\n                interval: 20,\r\n            }, this.game),\r\n            position: new Vector2(0, -15),\r\n        });\r\n\r\n        // this.addChild(this.foreground);\r\n\r\n        ([\r\n            [0, 8, 256, 6], //hedgeBottom\r\n            // [16, 48, 4, 8], //hedgeBottom\r\n            // [236, 48, 4, 8], //hedgeBottom\r\n            // [4, 56, 248, 8], //hedgeBottom\r\n        ] as ([number, number, number, number, number?])[]).forEach(([x, y, w, h, t = 30]) => {\r\n            this.addChild(new Collider({\r\n                position: new Vector2(x * 6, y * 6),\r\n                size: new Vector2(w * 6, h * 6),\r\n                cornerTolerance: t,\r\n            }));\r\n            // this.addChild(new CanvasSquare({\r\n            //     color: '#ff0000aa',\r\n            //     position: new Vector2(x*6,y*6),\r\n            //     size: new Vector2(w*6,h*6),\r\n            // }))\r\n        });\r\n\r\n\r\n    }\r\n}", "import { CanvasImage } from '../../../canvas/canvasImage';\r\nimport { CanvasSquare } from '../../../canvas/canvasSquare';\r\nimport { CanvasWrapper } from '../../../canvas/canvasWrapper';\r\nimport { PrepImage } from '../../../canvas/prepImage';\r\nimport { TickerReturnData } from '../../../utils/ticker';\r\nimport { Vector2 } from '../../../utils/vector2';\r\n\r\nexport class Scroller extends CanvasWrapper {\r\n    public speed: number = 6\r\n    private layers: [CanvasImage, number, number][] = []\r\n\r\n\r\n    add(layer: CanvasImage, width: number, paralax: number) {\r\n        this.layers.push([layer, width, paralax]);\r\n        this.addChild(layer);\r\n    }\r\n\r\n    build() {\r\n        this.size = this.parent.size\r\n\r\n        this.addChild(new CanvasImage({\r\n            image: new PrepImage({ \r\n                url: '/img/dusk/sky.png', \r\n                factor: 5,\r\n            }, this.game),\r\n            worldSpaceParalaxX: -1,\r\n            position: new Vector2(800,100),\r\n        }));\r\n\r\n        this.add(new CanvasImage({\r\n            image: new PrepImage({ \r\n                url: '/img/dusk/far-clouds.png', \r\n                factor: 3,\r\n            }, this.game),\r\n            position: new Vector2(0,400),\r\n            worldSpaceParalaxX: -0.98,\r\n            repeatX:16,\r\n            opacity: 0.4,\r\n        }), 128*3, 0.05);\r\n        \r\n        this.add(new CanvasImage({\r\n            image: new PrepImage({ \r\n                url: '/img/dusk/near-clouds.png', \r\n                factor: 3,\r\n            }, this.game),\r\n            position: new Vector2(0,400),\r\n            worldSpaceParalaxX: -0.96,\r\n            repeatX: 16,\r\n            opacity: 0.3,\r\n        }), 144*3, 0.10);\r\n\r\n        this.add(new CanvasImage({\r\n            image: new PrepImage({ \r\n                url: '/img/dusk/far-mountains.png', \r\n                factor: 3,\r\n            }, this.game),\r\n            position: new Vector2(0,350),\r\n            worldSpaceParalaxX: -0.94,\r\n            repeatX: 16,\r\n        }), 160*3, 0.15);\r\n\r\n\r\n        this.add(new CanvasImage({\r\n            image: new PrepImage({ \r\n                url: '/img/dusk/mountains.png', \r\n                factor: 4,\r\n            }, this.game),\r\n            position: new Vector2(0,250),\r\n            worldSpaceParalaxX: -0.92,\r\n            repeatX: 16,\r\n        }), 320*4, 0.17);\r\n        \r\n        this.addChild(new CanvasSquare({\r\n            color: '#2C2546',\r\n            size: new Vector2(this.width, 500),\r\n        }));\r\n\r\n        this.add(new CanvasImage({\r\n            image: new PrepImage({ \r\n                url: '/img/dusk/trees.png', \r\n                factor:2,\r\n            }, this.game),\r\n            position: new Vector2(0,500),\r\n            worldSpaceParalaxX: -0.5,\r\n\r\n            repeatX: 16,\r\n        }), 240*2, 0.6);\r\n\r\n        this.add(new CanvasImage({\r\n            image: new PrepImage({ \r\n                url: '/img/dusk/trees.png', \r\n                factor:3,\r\n            }, this.game),\r\n            position: new Vector2(0,320),\r\n            worldSpaceParalaxX: -0.38,\r\n            repeatX: 16,\r\n        }), 240*3, 0.8);\r\n\r\n        this.add(new CanvasImage({\r\n            image: new PrepImage({ \r\n                url: '/img/dusk/trees.png', \r\n                factor:7,\r\n            }, this.game),\r\n            position: new Vector2(0,-100),\r\n            worldSpaceParalaxX: -.26,\r\n            repeatX: 16,\r\n        }), 240*7, 0.95);\r\n\r\n        this.add(new CanvasImage({\r\n            image: new PrepImage({ \r\n                url: '/img/train/railtrack_v1.png', \r\n                factor: 7\r\n            }, this.game),\r\n            position: new Vector2(0,40),\r\n            repeatX: Math.ceil(this.level.width / 64*7 + 1),\r\n        }), 64*7, 1);\r\n\r\n        this.add(new CanvasImage({\r\n            image: new PrepImage({ \r\n                url: '/img/train/railtrack_v1.png', \r\n                factor: 7\r\n            }, this.game),\r\n            position: new Vector2(0,0),\r\n            repeatX: Math.ceil(this.level.width / 64*7 + 1),\r\n        }), 64*7, 1);\r\n\r\n    }\r\n    public tick(obj: TickerReturnData): void {\r\n        super.tick(obj);\r\n        this.layers.forEach(([layer, width, paralax]) => {\r\n            layer.x = (layer.x - (this.speed* paralax)) % width ;\r\n        });\r\n    }\r\n}", "import { CanvasElement, CanvasElementAttributes, CanvasElementType } from './canvasElement';\r\n\r\nexport type CanvasCustomAttributes = CanvasElementAttributes & {\r\n    render?: (c: CanvasRenderingContext2D)=>void,\r\n};\r\nexport class CanvasCustom extends CanvasElement {\r\n    public type: CanvasElementType = 'color';\r\n    constructor(attr: CanvasCustomAttributes = {}) {\r\n        super(attr);\r\n        this.render = attr.render.bind(this);\r\n    }\r\n}\r\n", "import { CanvasImage } from '../../../canvas/canvasImage';\r\nimport { CanvasWrapper } from '../../../canvas/canvasWrapper';\r\nimport { PrepImage } from '../../../canvas/prepImage';\r\nimport { Vector2 } from '../../../utils/vector2';\r\n\r\nexport class TrainDoor extends CanvasWrapper {\r\n    public offset: Vector2;\r\n    public factor = 0.05;\r\n    public doorHeight = 45 * 6;\r\n    public outer: CanvasImage;\r\n    public inner: CanvasImage;\r\n\r\n    public build(): void {\r\n        this.outer = new CanvasImage({\r\n            image: new PrepImage({\r\n                url: '/img/train/door.png',\r\n                factor: 6,\r\n            }, this.game),\r\n            position: new Vector2(0, 0),\r\n        });\r\n        this.addChild(this.outer);\r\n        const or = this.outer.render.bind(this.outer);\r\n        this.outer.render = (c: CanvasRenderingContext2D) => {\r\n            if (this.offset.x + 17 * 6 * this.factor > 0) {\r\n                c.save();\r\n                c.transform((this.offset.x + 17 * 6 * this.factor) / this.outer.prepped.width, -(0.22), 0, 1 / (this.outer.prepped.height / this.doorHeight), 17 * 6, 13 * 6);\r\n                or(c);\r\n                c.restore();\r\n            }\r\n            if (this.offset.x + 223 * 6 * this.factor < 0) {\r\n                c.save();\r\n                c.transform((this.offset.x + 223 * 6 * this.factor) / this.outer.prepped.width, -(0.22), 0, 1 / (this.outer.prepped.height / this.doorHeight), 240 * 6, 13 * 6);\r\n                or(c);\r\n                c.restore();\r\n            }\r\n        };\r\n\r\n        this.inner = new CanvasImage({\r\n            image: new PrepImage({\r\n                url: '/img/train/door2.png',\r\n                factor: 6,\r\n            }, this.game),\r\n            position: new Vector2(0, 0),\r\n        });\r\n        this.addChild(this.inner);\r\n        const ir = this.inner.render.bind(this.inner);\r\n        this.inner.render = (c: CanvasRenderingContext2D) => {\r\n            if (this.offset.x + 17 * 6 * this.factor < 0) {\r\n                c.save();\r\n                c.transform((this.offset.x + 17 * 6 * this.factor) / this.inner.prepped.width, -(0.22), 0, 1 / (this.inner.prepped.height / this.doorHeight), 17 * 6, 14 * 6);\r\n                ir(c);\r\n                c.restore();\r\n            }\r\n            if (this.offset.x + 223 * 6 * this.factor > 0) {\r\n                c.save();\r\n                c.transform((this.offset.x + 223 * 6 * this.factor) / this.inner.prepped.width, -(0.22), 0, 1 / (this.inner.prepped.height / this.doorHeight), 240 * 6, 14 * 6);\r\n                ir(c);\r\n                c.restore();\r\n            }\r\n        };\r\n\r\n\r\n    }\r\n}\r\n", "import { CanvasAnimation } from '../../../canvas/canvasAnimation';\r\nimport { CanvasCustom } from '../../../canvas/canvasCustom';\r\nimport { CanvasImage } from '../../../canvas/canvasImage';\r\nimport { CanvasSquare } from '../../../canvas/canvasSquare';\r\nimport { CanvasWrapper } from '../../../canvas/canvasWrapper';\r\nimport { PrepImage } from '../../../canvas/prepImage';\r\nimport { PrepSpritesheet } from '../../../canvas/spritesheet';\r\nimport { Collider } from '../../../utils/collider';\r\nimport { TickerReturnData } from '../../../utils/ticker';\r\nimport { Vector2 } from '../../../utils/vector2';\r\nimport { Train } from './train';\r\nimport { TrainDoor } from './trainDoor';\r\n\r\n\r\nexport class TrainCar extends CanvasWrapper {\r\n    public foregsquare: CanvasImage;\r\n    private v: number;\r\n    private lastOffset: number = 1;\r\n    public door: TrainDoor;\r\n    private factor = 0.05;\r\n    private scale = 6;\r\n    public frame: CanvasImage;\r\n    public interior: CanvasImage;\r\n    public train: Train;\r\n    public set offset(value: Vector2) {\r\n        this.door.offset = value;\r\n    }\r\n    constructor(train: Train, x: number, y: number = 100, w: number = 800, h: number = 400, v: number = 0) {\r\n        super({\r\n            position: new Vector2(x, y),\r\n            size: new Vector2(w, h),\r\n        });\r\n        this.v = v || 0;\r\n        this.train = train;\r\n    }\r\n\r\n    build() {\r\n\r\n        this.frame = new CanvasImage({\r\n            image: new PrepImage({\r\n                url: '/img/train/Frame Back.png',\r\n                factor: this.scale,\r\n            }, this.game),\r\n            position: new Vector2(0, 0),\r\n        });\r\n        this.addChild(this.frame);\r\n\r\n        this.interior = new CanvasImage({\r\n            image: new PrepImage({\r\n                url: '/img/train/Interior.png',\r\n                factor: this.scale,\r\n            }, this.game),\r\n            position: new Vector2(0, 0),\r\n        });\r\n        this.addChild(this.interior);\r\n\r\n        this.interior.addChild(new CanvasCustom({\r\n            render: (c) => {\r\n                const ce = ((this.width / 2 + this.x) - (this.mode.width / 2 - this.level.x));\r\n\r\n                this.fill([\r\n                    [9, 14],\r\n                    [247, 14],\r\n                    [247, ce + 762 > 0 ? 16 : 8, ce + 762 > 0 ? 1 : 0],\r\n                    [247, 8, 1],\r\n                    [9, 8, 1],\r\n                    [9, ce - 762 <= 0 ? 16 : 8, ce - 762 <= 0 ? 1 : 0],\r\n                    [9, 16],\r\n                ], '#58473f', '#140e14');\r\n\r\n                this.fill([\r\n                    [18, 16],\r\n                    [240, 16],\r\n                    [240, 16, 1],\r\n                    [18, 16, 1],\r\n                ], '#8f563b');\r\n\r\n                for (let index = 18; index < 239; index += 4) {\r\n                    this.line('#662736', 0 + index, 16, 0, 0 + index, 16, 1, 'x');\r\n                    this.line('#e37332', 1 + index, 16, 0, 1 + index, 16, 1, 'x');\r\n                    if (index % 8 === 2){\r\n                        this.line('#662736', 0 + index, 16, 0.2, 0 + index, 16, 0.3, 'x', 4);\r\n                    }\r\n                    if (index % 8 === 6){\r\n                        this.line('#662736', 0 + index, 16, 0.7, 0 + index, 16, 0.8, 'x', 4);\r\n                    }\r\n                }\r\n\r\n                // this.line('#140e14', 8, 15, 0, 8, 15, 1);\r\n                // this.line('#140e14', 248, 15, 1,248, 15, 1);\r\n                // this.line('#140e14', 8, 10, 0, 8, 10, 1);\r\n                // this.line('#140e14', 248, 10, 0, 248, 10, 1);\r\n            }\r\n        }), true);\r\n\r\n        this.door = new TrainDoor();\r\n        this.interior.addChild(this.door, true);\r\n\r\n        this.interior.addChild(new CanvasCustom({\r\n            render: (c) => {\r\n                const ce = ((this.width / 2 + this.x) - (this.mode.width / 2 - this.level.x));\r\n\r\n                this.fill([\r\n                    [8, 61],\r\n                    [248, 61],\r\n                    [248, ce + 762 > 0 ? 61 : 57, ce + 762 > 0 ? 1 : 0],\r\n                    [248, 57, 1],\r\n                    [8, 57, 1],\r\n                    [8, ce - 762 <= 0 ? 61 : 57, ce - 762 <= 0 ? 1 : 0],\r\n                    [8, 61],\r\n                ], '#7e6970', '#140e14');\r\n\r\n                this.line('#140e14', 8, 57, 1, 8, 61, 1);\r\n                this.line('#140e14', 8, 61, 1, 248, 61, 1);\r\n                this.line('#140e14', 248, 61, 1, 248, 57, 1);\r\n                this.line('#140e14', 8, 61, 0, 8, 61, 1);\r\n                this.line('#140e14', 248, 61, 0, 248, 61, 1);\r\n\r\n            }\r\n        }), true);\r\n        this.interior.relativity = 'anchor';\r\n\r\n\r\n        ([\r\n            [0, 5, 256, 6], //hedgeBottom\r\n            [8, 50, 240, 8], //hedgeBottom\r\n        ] as ([number, number, number, number, number?])[]).forEach(([x, y, w, h, t = 80]) => {\r\n            this.addChild(new Collider({\r\n                position: new Vector2(x * this.scale, y * this.scale),\r\n                size: new Vector2(w * this.scale, h * this.scale),\r\n                cornerTolerance: t,\r\n            }));\r\n        });\r\n    }\r\n\r\n    private lineSequence(fill: string, points: [number, number, number?][]) {\r\n        for (let i = 0; i < points.length - 1; i++) {\r\n            this.line(fill, points[i][0], points[i][1], points[i][2] || 0, points[i + 1][0], points[i + 1][1], points[i + 1][2] || 0);\r\n        }\r\n    }\r\n\r\n    private line(fill: string, x: number, y: number, offset: number, x2: number, y2: number, offset2: number, style: 'x' | 'y' | 'z' = offset !== offset2 ? 'z' : x === x2 ? 'x' : 'y', w: number = 1): void {\r\n        this.game.ctx.fillStyle = fill;\r\n        this.game.ctx.save();\r\n\r\n        if (style === 'x') {\r\n            this.switchOffsetRender(offset);\r\n            this.game.ctx.beginPath();\r\n            this.game.ctx.moveTo((x) * this.scale, (y) * this.scale);\r\n            this.game.ctx.lineTo((x + w) * this.scale, (y) * this.scale);\r\n            this.switchOffsetRender(offset2);\r\n            this.game.ctx.lineTo((x2 + w) * this.scale, (y2) * this.scale);\r\n            this.game.ctx.lineTo((x2) * this.scale, (y2) * this.scale);\r\n            this.game.ctx.fill();\r\n            this.game.ctx.closePath();\r\n        }\r\n\r\n        if (style === 'y') {\r\n            this.switchOffsetRender(offset);\r\n            this.game.ctx.beginPath();\r\n            this.game.ctx.moveTo((x) * this.scale, (y) * this.scale);\r\n            this.game.ctx.lineTo((x) * this.scale, (y + w) * this.scale);\r\n            this.switchOffsetRender(offset2);\r\n            this.game.ctx.lineTo((x2) * this.scale, (y2 + w) * this.scale);\r\n            this.game.ctx.lineTo((x2) * this.scale, (y2) * this.scale);\r\n            this.game.ctx.fill();\r\n            this.game.ctx.closePath();\r\n        }\r\n\r\n        if (style === 'z') {\r\n            this.switchOffsetRender(offset);\r\n            this.game.ctx.beginPath();\r\n            this.game.ctx.moveTo((x) * this.scale, (y) * this.scale);\r\n            this.game.ctx.lineTo((x + w) * this.scale, (y) * this.scale);\r\n            this.switchOffsetRender(offset2);\r\n            this.game.ctx.lineTo((x2 + w) * this.scale, (y2) * this.scale);\r\n            this.game.ctx.lineTo((x2) * this.scale, (y2) * this.scale);\r\n            this.game.ctx.fill();\r\n            this.game.ctx.closePath();\r\n\r\n            this.game.ctx.beginPath();\r\n            this.game.ctx.moveTo((x2) * this.scale, (y2) * this.scale);\r\n            this.game.ctx.lineTo((x2) * this.scale, (y2 + w) * this.scale);\r\n            this.switchOffsetRender(offset);\r\n            this.game.ctx.lineTo((x) * this.scale, (y + w) * this.scale);\r\n            this.game.ctx.lineTo((x) * this.scale, (y) * this.scale);\r\n            this.game.ctx.fill();\r\n            this.game.ctx.closePath();\r\n\r\n            this.game.ctx.beginPath();\r\n            this.game.ctx.moveTo((x) * this.scale, (y + w) * this.scale);\r\n            this.game.ctx.lineTo((x + w) * this.scale, (y + w) * this.scale);\r\n            this.switchOffsetRender(offset2);\r\n            this.game.ctx.lineTo((x2 + w) * this.scale, (y2 + w) * this.scale);\r\n            this.game.ctx.lineTo((x2) * this.scale, (y2 + w) * this.scale);\r\n            this.game.ctx.fill();\r\n            this.game.ctx.closePath();\r\n\r\n            this.game.ctx.beginPath();\r\n            this.game.ctx.moveTo((x2 + w) * this.scale, (y2) * this.scale);\r\n            this.game.ctx.lineTo((x2 + w) * this.scale, (y2 + w) * this.scale);\r\n            this.switchOffsetRender(offset);\r\n            this.game.ctx.lineTo((x + w) * this.scale, (y + w) * this.scale);\r\n            this.game.ctx.lineTo((x + w) * this.scale, (y) * this.scale);\r\n            this.game.ctx.fill();\r\n            this.game.ctx.closePath();\r\n        }\r\n\r\n        this.game.ctx.restore();\r\n        this.lastOffset = undefined;\r\n\r\n        // this.game.ctx.lineTo((x2) * this.scale, (y2 + 1) * this.scale);\r\n        // this.game.ctx.lineTo((x2 + 1) * this.scale, (y2 + 1) * this.scale);\r\n        // this.game.ctx.lineTo((x2 + 1) * this.scale, (y2) * this.scale);\r\n\r\n        // this.switchOffsetRender(offset);\r\n        // this.game.ctx.moveTo((x + 1) * this.scale, (y) * this.scale);\r\n        // this.game.ctx.lineTo((x) * this.scale, (y + 1) * this.scale);\r\n        // this.game.ctx.lineTo((x) * this.scale, (y + 1) * this.scale);\r\n        // this.switchOffsetRender(offset2);\r\n        // this.game.ctx.lineTo((x2) * this.scale, (y2 + 1) * this.scale);\r\n        // this.game.ctx.lineTo((x2 + 1) * this.scale, (y2 + 1) * this.scale);\r\n        // this.game.ctx.lineTo((x2 + 1) * this.scale, (y2) * this.scale);\r\n\r\n        // if (offset2 !== offset) {\r\n\r\n        //     let px1 = offset2 < offset ? x2 : x;\r\n        //     let py1 = offset2 < offset ? y2 : y;\r\n        //     let po1 = offset2 < offset ? offset2 : offset;\r\n        //     let px2 = offset2 < offset ? x : x2;\r\n        //     let py2 = offset2 < offset ? y : y2;\r\n        //     let po2 = offset2 < offset ? offset : offset2;\r\n\r\n\r\n        //     this.switchOffsetRender(po1);\r\n        //     this.game.ctx.moveTo((px1) * this.scale, (py1 +1) * this.scale);\r\n        //     this.game.ctx.lineTo((px1+1 ) * this.scale, (py1 + 1) * this.scale);\r\n        //     this.game.ctx.lineTo((px1 + 1) * this.scale, (py1) * this.scale);\r\n        //     this.switchOffsetRender(po2);\r\n        //     this.game.ctx.lineTo((px2 + 1) * this.scale, (py2) * this.scale);\r\n        //     this.game.ctx.lineTo((px2) * this.scale, (py2) * this.scale);\r\n        //     this.game.ctx.lineTo((px2) * this.scale, (py2 + 1) * this.scale);\r\n        // } else {\r\n        //     this.switchOffsetRender(offset);\r\n        //     if (x === x2) {\r\n        //         this.game.ctx.moveTo((x) * this.scale, (y) * this.scale);\r\n        //         this.game.ctx.lineTo((x + 1) * this.scale, (y) * this.scale);\r\n        //         this.game.ctx.lineTo((x2 + 1) * this.scale, (y2) * this.scale);\r\n        //         this.game.ctx.lineTo((x2) * this.scale, (y2) * this.scale);\r\n        //     } else if (y === y2) {\r\n        //         this.game.ctx.moveTo((x) * this.scale, (y) * this.scale);\r\n        //         this.game.ctx.lineTo((x) * this.scale, (y + 1) * this.scale);\r\n        //         this.game.ctx.lineTo((x2) * this.scale, (y2 + 1) * this.scale);\r\n        //         this.game.ctx.lineTo((x2) * this.scale, (y2) * this.scale);\r\n        //     }\r\n        // }\r\n\r\n        // this.game.ctx.moveTo((x) * this.scale, (y) * this.scale);\r\n        // this.game.ctx.lineTo((x) * this.scale, (y +1) * this.scale);\r\n        // // this.game.ctx.lineTo((x + 1) * this.scale, (y + 1) * this.scale);\r\n        // this.switchOffsetRender(offset2);\r\n        // this.game.ctx.lineTo((x2 + 1) * this.scale, (y2 + 1) * this.scale);\r\n        // this.game.ctx.lineTo((x2 + 1) * this.scale, (y2) * this.scale);\r\n        // this.game.ctx.lineTo((x2) * this.scale, (y2) * this.scale);\r\n\r\n    }\r\n\r\n    private switchOffsetRender(offset: number) {\r\n\r\n        if (this.lastOffset !== offset) {\r\n            this.lastOffset = offset;\r\n            this.game.ctx.restore();\r\n            this.game.ctx.save();\r\n            this.game.ctx.scale(1 + (this.factor * offset), 1 + (this.factor * offset));\r\n            this.game.ctx.translate((-this.width * (this.factor / 2)) * offset, 0);\r\n            this.game.ctx.translate(\r\n                (((this.width / 2 + this.x) - (this.mode.width / 2 - this.level.x)) * this.factor) * offset,\r\n                -50 * offset\r\n            );\r\n\r\n        }\r\n    }\r\n\r\n    private fill(points: [number, number, number?][], fill: string, stroke?: string) {\r\n        this.game.ctx.beginPath();\r\n        this.game.ctx.save();\r\n\r\n        points.forEach((p, i) => {\r\n            this.switchOffsetRender(p[2] || 0);\r\n            this.game.ctx[i === 0 ? 'moveTo' : 'lineTo'](p[0] * this.scale, p[1] * this.scale);\r\n        });\r\n\r\n        this.game.ctx.fillStyle = fill;\r\n        this.game.ctx.fill();\r\n        this.game.ctx.closePath();\r\n        this.game.ctx.restore();\r\n\r\n        if (stroke) {\r\n            this.lineSequence(stroke, points);\r\n        }\r\n    }\r\n}", "import { CanvasAnimation } from '../../../canvas/canvasAnimation';\r\nimport { CanvasCustom } from '../../../canvas/canvasCustom';\r\nimport { CanvasImage } from '../../../canvas/canvasImage';\r\nimport { CanvasWrapper } from '../../../canvas/canvasWrapper';\r\nimport { PrepImage } from '../../../canvas/prepImage';\r\nimport { PrepSpritesheet } from '../../../canvas/spritesheet';\r\nimport { Character } from '../../../utils/character';\r\nimport { Collider } from '../../../utils/collider';\r\nimport { ElementRelativity } from '../../../utils/elementPosition';\r\nimport { TickerReturnData } from '../../../utils/ticker';\r\nimport { Util } from '../../../utils/utils';\r\nimport { Vector2 } from '../../../utils/vector2';\r\nimport { TrainCar } from './trainCar';\r\n\r\n\r\nexport class TrainCarForeground extends CanvasWrapper {\r\n    public foreground: CanvasImage;\r\n    public background: CanvasImage;\r\n    public relativity: ElementRelativity = 'anchor';\r\n    public factor = 0.05;\r\n    private car: TrainCar;\r\n    private character: Character;\r\n    private wheels1: CanvasAnimation;\r\n    private wheels2: CanvasAnimation;\r\n    private wheels3: CanvasAnimation;\r\n    private wheels4: CanvasAnimation;\r\n    private wheelFrame: number = 0;\r\n    private frame: CanvasImage;\r\n    constructor(car: TrainCar, character: Character) {\r\n        super({\r\n            position: new Vector2(car.x, car.y - 50),\r\n            size: new Vector2(car.width, car.height),\r\n            relativity: 'anchor',\r\n            zoom: new Vector2(1.05, 1.05),\r\n        });\r\n        this.car = car;\r\n        this.character = character;\r\n    }\r\n\r\n    build() {\r\n\r\n        // this.y = this.car.y + 50;\r\n\r\n\r\n        this.wheels1 = new CanvasAnimation({\r\n            animation:  new PrepSpritesheet({\r\n                url: '/img/train/wheels.png',\r\n                factor: 6,\r\n                size: new Vector2(16, 8),\r\n                repeatX: 4,\r\n                interval: 30,\r\n            }, this.game),\r\n            reverse: true,\r\n            position: new Vector2(24*6, 0),\r\n        });\r\n        this.addChild(this.wheels1);\r\n\r\n        this.wheels2 = new CanvasAnimation({\r\n            animation:  new PrepSpritesheet({\r\n                url: '/img/train/wheels.png',\r\n                factor: 6,\r\n                size: new Vector2(16, 8),\r\n                repeatX: 4,\r\n                interval: 30,\r\n            }, this.game),\r\n            reverse: true,\r\n            position: new Vector2(48*6, 0),\r\n        });\r\n        this.addChild(this.wheels2);\r\n        this.wheels2.frame = 1*20;\r\n\r\n        this.wheels3 = new CanvasAnimation({\r\n            animation:  new PrepSpritesheet({\r\n                url: '/img/train/wheels.png',\r\n                factor: 6,\r\n                size: new Vector2(16, 8),\r\n                repeatX: 4,\r\n                interval: 30,\r\n            }, this.game),\r\n            reverse: true,\r\n            position: new Vector2(192*6, 0),\r\n        });\r\n        this.addChild(this.wheels3);\r\n        this.wheels3.frame = 2*20;\r\n\r\n        this.wheels4 = new CanvasAnimation({\r\n            animation:  new PrepSpritesheet({\r\n                url: '/img/train/wheels.png',\r\n                factor: 6,\r\n                size: new Vector2(16, 8),\r\n                repeatX: 4,\r\n                interval: 30,\r\n            }, this.game),\r\n            reverse: true,\r\n            position: new Vector2(216*6, 0),\r\n        });\r\n        this.addChild(this.wheels4);\r\n        this.wheels4.frame = 3*20;\r\n        \r\n        this.frame = new CanvasImage({\r\n            image: new PrepImage({\r\n                url: '/img/train/Frane Front.png',\r\n                factor: 6,\r\n            }, this.game),\r\n        });\r\n        this.addChild(this.frame);\r\n\r\n        this.foreground = new CanvasImage({\r\n            image: new PrepImage({\r\n                url: '/img/train/Exterior.png',\r\n                factor: 6\r\n            }, this.game),\r\n        });\r\n        this.addChild(this.foreground);\r\n\r\n        this.wheelFrame = 25*this.car.x / this.car.width\r\n\r\n    }\r\n\r\n    public tick(obj: TickerReturnData): void {\r\n        super.tick(obj);\r\n        const f = 200;\r\n        [this.wheels4,this.wheels2,this.wheels3,this.wheels1].forEach((w)=>{\r\n            w.interval = 160 - Math.round(this.car.train.speed/this.car.train.maxSpeed * 120);\r\n        });\r\n        this.wheelFrame = (this.wheelFrame + 1) % 200;\r\n        this.wheels4.y = (this.wheelFrame > 0 && this.wheelFrame < 30)? 1*6 : 0;\r\n        this.wheels3.y = (this.wheelFrame > 20 && this.wheelFrame < 50 )? 1*6 : 0;\r\n        this.wheels2.y = (this.wheelFrame > 0 && this.wheelFrame < 30 )? 1*6 : 0;\r\n        this.wheels1.y = (this.wheelFrame > 20 && this.wheelFrame < 50 )? 1*6 : 0;\r\n\r\n        this.frame.y = (this.wheelFrame > 40 && this.wheelFrame < 70)? 1*6/3 : 0;\r\n        this.foreground.y = (this.wheelFrame > 40 && this.wheelFrame < 70)? 1*6/3 : 0;\r\n        this.car.frame.y = (this.wheelFrame > 40 && this.wheelFrame < 70)? 1*6/3 : 0;\r\n        this.car.interior.y = (this.wheelFrame > 40 && this.wheelFrame < 70)? 1*6/3 : 0;\r\n        \r\n        this.x = this.car.x -\r\n            this.car.width *\r\n            (this.factor / 2) + (\r\n                (this.width / 2 + this.x) -\r\n                (this.mode.width / 2 - this.level.x)\r\n            ) * this.factor * 1;\r\n            \r\n        this.car.offset = this.position.subtract(this.car.position);\r\n\r\n        if (this.character.y < this.y + this.height) {\r\n            this.foreground.opacity = Util.clamp((Math.abs((this.width / 2 + this.x) - (this.character.width / 2 + this.character.x)) - (this.width / 2 - f)) / f, 0, 1);\r\n        }\r\n        \r\n    }\r\n}", "import { CanvasColorBackground } from '../../../canvas/canvasBackground';\r\nimport { CanvasElement } from '../../../canvas/canvasElement';\r\nimport { CanvasImage } from '../../../canvas/canvasImage';\r\nimport { CanvasPrepSprites } from '../../../canvas/canvasPrepSprites';\r\nimport { DomText } from '../../../dom/domText';\r\nimport { Collider } from '../../../utils/collider';\r\nimport { Collisions } from '../../../utils/collisions';\r\nimport { Level } from '../../../utils/level';\r\nimport { TickerReturnData } from '../../../utils/ticker';\r\nimport { Util } from '../../../utils/utils';\r\nimport { Vector2 } from '../../../utils/vector2';\r\nimport { CameraController } from '../../snakeMode/controllers/cameraController';\r\nimport { SideCharacter } from '../character/SideCharacter';\r\nimport { SideContoller } from '../character/SideController';\r\nimport { Locomotive } from './locomotive';\r\nimport { Scroller } from './scrolling';\r\nimport { TrainCar } from './trainCar';\r\nimport { TrainCarForeground } from './trainCarForeground';\r\n\r\n\r\nexport class Train extends Level {\r\n    public start = new Vector2((256 * 6) * 2\r\n        , 250);\r\n    public background = new CanvasColorBackground('#46345E');\r\n    public character: SideCharacter;\r\n    public sprites: CanvasPrepSprites;\r\n    public mo: DomText;\r\n    public trainCars: TrainCar[] = [];\r\n    public ground: CanvasImage;\r\n    public speed: number = 0;\r\n    public maxSpeed: number = 10;\r\n    public env: Scroller;\r\n    frame: number = 0;\r\n\r\n    constructor() {\r\n        super({\r\n            hasDom: true,\r\n            size: new Vector2((256 * 8) * 8, 1200),\r\n        });\r\n\r\n        this.trainCars.push(new TrainCar(this,(256 * 6) * 1, 90, 256 * 6, 64 * 6, 7));\r\n        this.trainCars.push(new TrainCar(this,(256 * 6) * 2, 90, 256 * 6, 64 * 6, 5));\r\n        this.trainCars.push(new TrainCar(this,(256 * 6) * 3, 90, 256 * 6, 64 * 6, 2));\r\n        this.trainCars.push(new TrainCar(this,(256 * 6) * 4, 90, 256 * 6, 64 * 6, 0));\r\n        this.trainCars.push(new TrainCar(this,(256 * 6) * 5, 90, 256 * 6, 64 * 6, 0));\r\n\r\n        this.character = new SideCharacter({\r\n            position: this.start,\r\n            controllers: [new SideContoller()],\r\n        });\r\n\r\n        this.addControllers([new CameraController({ target: this.character })]);\r\n    }\r\n\r\n    build() {\r\n        this.addChild(this.background);\r\n        this.env = new Scroller()\r\n        this.addChild(this.env);\r\n\r\n        this.trainCars.forEach(trainCar => {\r\n            this.addChild(trainCar);\r\n        });\r\n\r\n        this.addChild(this.character);\r\n\r\n        this.trainCars.forEach(trainCar => {\r\n            this.addChild(new TrainCarForeground(trainCar, this.character));\r\n        });\r\n\r\n        const loco = new Locomotive((256 * 6) * 6, 90, 256 * 6, 64 * 6);\r\n        this.addChild(loco);\r\n\r\n        (([\r\n            [0, 0, this.width, 35],\r\n        ]) as ([number, number, number, number, number?])[]).forEach(([x, y, w, h, t = 30]) => {\r\n            this.addChild(new Collider({\r\n                position: new Vector2(x, y),\r\n                size: new Vector2(w, h),\r\n            }));\r\n        });\r\n\r\n    }\r\n\r\n\r\n    public tick(obj: TickerReturnData): void {\r\n        super.tick(obj);\r\n        this.frame = (this.frame+1)%(3000*Math.PI);\r\n        this.speed = +(Math.sin(this.frame / 3000) * this.maxSpeed).toPrecision(2);\r\n        this.env.speed = this.speed;\r\n    }\r\n}", "import { CanvasColorBackground } from '../../canvas/canvasBackground';\r\nimport { Mode } from '../../utils/mode';\r\nimport { Train } from './levels/train';\r\n\r\nexport class SideMode extends Mode{\r\n    public constructor() {\r\n        super({hasDom: true});\r\n    }\r\n\r\n    build(){\r\n        super.build();\r\n        this.addChild(new CanvasColorBackground('#272727'))\r\n        this.addLevel('platform', new Train());\r\n        this.switchLevel('platform');\r\n    }\r\n\r\n}", "import { DomElement } from '../../dom/domElement';\r\nimport { DomText } from \"../../dom/domText\";\r\nimport { Vector2 } from '../vector2';\r\n\r\nexport class Loader extends DomElement<'div'> {\r\n    bar: DomElement<'div'>;\r\n    barBackground: DomElement<'div'>;\r\n    text: DomText;\r\n    public constructor( ) {\r\n        super('div',{\r\n            position: new Vector2(5, 5),\r\n            size: new Vector2(600, 70),\r\n            background: '#272727',\r\n        });\r\n\r\n        this.bar = new DomElement('div', {\r\n            size: new Vector2(600, 70),\r\n            background: '#80808070',\r\n        })\r\n        this.dom.appendChild(this.bar.dom);\r\n\r\n        this.text = new DomText({\r\n            text: '',\r\n            fontSize: 35,\r\n            fontWeight: 900,\r\n            color: 'white',\r\n            size: new Vector2(600, 70),\r\n            position: new Vector2(30, -10),\r\n            fontFamily: 'monospace',\r\n        });\r\n        this.dom.appendChild(this.text.dom);\r\n    }\r\n\r\n    public update(value: number, total: number){\r\n        this.text.text = `loaded ${total - value} out of ${total} assets`;\r\n        this.bar.width = 600 * (total - value) / total;\r\n    }\r\n}", "import { CanvasWrapper } from './canvas/canvasWrapper';\r\nimport { FPS } from './utils/debug/fps';\r\nimport { SnakeMode } from './modes/snakeMode/snakeMode';\r\nimport { Ticker, TickerReturnData } from './utils/ticker';\r\nimport { Event } from './utils/event';\r\nimport { Vector2 } from './utils/vector2';\r\nimport { Input } from './utils/input';\r\nimport { Mode } from './utils/mode';\r\nimport { RPGMode } from './modes/rpg/rpgMode';\r\nimport { DomButton } from './dom/domButton';\r\nimport { ElementRelativity } from './utils/elementPosition';\r\nimport { DomCanvas } from './dom/domCanvas';\r\nimport { SideMode } from './modes/side/SideMode';\r\nimport { DomText } from './dom/domText';\r\nimport { Loader } from './utils/debug/loader';\r\n\r\nexport class Game extends CanvasWrapper {\r\n    public relativity: ElementRelativity = 'anchor';\r\n    public ticker: Ticker;\r\n    public renderer: DomCanvas;\r\n    private fps: FPS;\r\n    public modes: Record<string, Mode> = {};\r\n    public game = this;\r\n    public ctx: CanvasRenderingContext2D;\r\n    public input: Input;\r\n    public ready: boolean = false;\r\n    private _waitCount: number = 0;\r\n    private readyToStart: boolean = false;\r\n    private started: boolean = false;\r\n    private loader: Loader;\r\n    public total: number = 0;\r\n    public get waitCount(): number {\r\n        return this._waitCount;\r\n    }\r\n    public set waitCount(value: number) {\r\n        if (value > this._waitCount){\r\n            this.total++;\r\n        }\r\n        if (!this.started){\r\n            if (value === 0 && this.readyToStart) {\r\n                this.start();\r\n            } else {\r\n                this.loader.update(value, this.total);\r\n            }\r\n        }\r\n        this._waitCount = value;\r\n\r\n    }\r\n\r\n    public constructor() {\r\n        super({ hasDom: true });\r\n        this.game = this;\r\n        this.addEvent(new Event('resize'));\r\n        window.addEventListener(\"resize\", () => { this.resize(); });\r\n        this.build();\r\n    }\r\n    build() {\r\n        this.loader = new Loader();\r\n        this.addChild(this.loader);\r\n\r\n        this.renderer = new DomCanvas();\r\n        this.addChild(this.renderer);\r\n\r\n        this.setupModes();\r\n        this.ticker = new Ticker();\r\n        this.ticker.add(this.tick.bind(this));\r\n        this.input = new Input(this);\r\n        this.debug();\r\n        this.fps.visible = false;\r\n\r\n        if (this.waitCount === 0) {\r\n            this.start();\r\n        } else {\r\n            this.readyToStart = true;\r\n        }\r\n        this.resize();\r\n    }\r\n\r\n    public tick(obj: TickerReturnData) {\r\n        this.renderer.tick(obj);\r\n    }\r\n\r\n    private setupModes() {\r\n        this.addMode('snakes', new SnakeMode());\r\n        this.addMode('rpg', new RPGMode());\r\n        this.addMode('side', new SideMode());\r\n\r\n        this.switchMode('side');\r\n    }\r\n\r\n    resize() {\r\n        this.game.getEvent('resize').alert(new Vector2(document.body.clientWidth, document.body.clientHeight));\r\n    }\r\n\r\n    private debug() {\r\n        this.fps = new FPS();\r\n        this.dom.appendChild(this.fps);\r\n        this.ticker.add(this.fps.tick.bind(this.fps));\r\n    }\r\n\r\n    protected addMode(s: string, mode: Mode) {\r\n        this.modes[s] = mode;\r\n        mode.parent = this;\r\n        mode.mode = mode;\r\n        this.renderer.addMode(mode);\r\n    }\r\n\r\n    public switchMode(s: string) {\r\n        document.title = s;\r\n        Object.entries(this.modes).forEach(([key, mode]) => {\r\n            mode.active = key === s;\r\n            mode.visible = key === s;\r\n            mode.dom ? mode.dom.visible = key === s : null;\r\n        });\r\n    }\r\n\r\n    public start() {\r\n        this.started = true;\r\n        this.loader.visible = false;\r\n        this.fps.visible = true;\r\n        this.ticker.start();\r\n        // this.addChild(new DomButton({\r\n        //     text: 'RPG',\r\n        //     fontSize: 39,\r\n        //     fontWeight: 1000,\r\n        //     color: 'white',\r\n        //     position: new Vector2(130, 5),\r\n        //     size: new Vector2(65, 50),\r\n        //     background: '#ff00ffaa',\r\n        //     fontFamily: 'monospace',\r\n        //     padding: [0, 10, 0, 10],\r\n        //     onClick: () => {\r\n        //         this.switchMode('rpg');\r\n        //     }\r\n        // }));\r\n        // this.addChild(new DomButton({\r\n        //     text: 'SNAKES',\r\n        //     fontSize: 39,\r\n        //     fontWeight: 1000,\r\n        //     color: 'white',\r\n        //     position: new Vector2(220, 5),\r\n        //     size: new Vector2(130, 50),\r\n        //     background: '#ff00ffaa',\r\n        //     fontFamily: 'monospace',\r\n        //     padding: [0, 10, 0, 10],\r\n        //     onClick: () => {\r\n        //         this.switchMode('snakes');\r\n        //     }\r\n        // }));\r\n        // this.addChild(new DomButton({\r\n        //     text: 'TRAIN',\r\n        //     fontSize: 39,\r\n        //     fontWeight: 1000,\r\n        //     color: 'white',\r\n        //     position: new Vector2(375, 5),\r\n        //     size: new Vector2(130, 50),\r\n        //     background: '#ff00ffaa',\r\n        //     fontFamily: 'monospace',\r\n        //     padding: [0, 10, 0, 10],\r\n        //     onClick: () => {\r\n        //         this.switchMode('side');\r\n        //     }\r\n        // }));\r\n    }\r\n}\r\n\r\n\r\n", "import { Game } from \"./game\";\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\r\n    document.body.appendChild(new Game().dom.dom);;\r\n});"],
  "mappings": "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",
  "names": ["sprite", "sprite"]
}
